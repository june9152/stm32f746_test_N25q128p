
STM32F746_QSPI_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052ec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080054bc  080054bc  000154bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055d4  080055d4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080055d4  080055d4  000155d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055dc  080055dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055dc  080055dc  000155dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055e0  080055e0  000155e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080055e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  20000070  08005654  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08005654  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d3cf  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000210a  00000000  00000000  0002d46f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b08  00000000  00000000  0002f580  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009f0  00000000  00000000  00030088  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026ada  00000000  00000000  00030a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009d58  00000000  00000000  00057552  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e9ae7  00000000  00000000  000612aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014ad91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003374  00000000  00000000  0014ae0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080054a4 	.word	0x080054a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080054a4 	.word	0x080054a4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <_write>:
static void CPU_CACHE_Enable(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, uint8_t *ptr, uint16_t len) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	4613      	mov	r3, r2
 80005bc:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Transmit(&huart1, ptr, len, 10);
 80005be:	88fa      	ldrh	r2, [r7, #6]
 80005c0:	230a      	movs	r3, #10
 80005c2:	68b9      	ldr	r1, [r7, #8]
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <_write+0x24>)
 80005c6:	f003 faad 	bl	8003b24 <HAL_UART_Transmit>

	return len;
 80005ca:	88fb      	ldrh	r3, [r7, #6]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	2000009c 	.word	0x2000009c

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	f5ad 7d5a 	sub.w	sp, sp, #872	; 0x368
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 fff3 	bl	80015ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f8c4 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 f9b0 	bl	800094c <MX_GPIO_Init>
  MX_QUADSPI_Init();
 80005ec:	f000 f952 	bl	8000894 <MX_QUADSPI_Init>
  MX_USART1_UART_Init();
 80005f0:	f000 f97c 	bl	80008ec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	setbuf(stdout, NULL);
 80005f4:	4b57      	ldr	r3, [pc, #348]	; (8000754 <main+0x17c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	689b      	ldr	r3, [r3, #8]
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f003 ffc7 	bl	8004590 <setbuf>
	printf("TEST DATA\r\n");
 8000602:	4855      	ldr	r0, [pc, #340]	; (8000758 <main+0x180>)
 8000604:	f003 ffbc 	bl	8004580 <puts>


	QSPI_CommandTypeDef sCommand;
		uint32_t address = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
		uint16_t index;
		__IO uint8_t step = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	f887 3323 	strb.w	r3, [r7, #803]	; 0x323
		uint32_t data[100];
		uint32_t writedata[100];
		for (int i = 0; i < 400; i = i + 4) {
 8000614:	2300      	movs	r3, #0
 8000616:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 800061a:	e046      	b.n	80006aa <main+0xd2>
			writedata[i / 4] |= i;
 800061c:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8000620:	2b00      	cmp	r3, #0
 8000622:	da00      	bge.n	8000626 <main+0x4e>
 8000624:	3303      	adds	r3, #3
 8000626:	109b      	asrs	r3, r3, #2
 8000628:	463a      	mov	r2, r7
 800062a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800062e:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 8000632:	4311      	orrs	r1, r2
 8000634:	463a      	mov	r2, r7
 8000636:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			writedata[i / 4] |= (i + 1) << 8;
 800063a:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 800063e:	2b00      	cmp	r3, #0
 8000640:	da00      	bge.n	8000644 <main+0x6c>
 8000642:	3303      	adds	r3, #3
 8000644:	109b      	asrs	r3, r3, #2
 8000646:	463a      	mov	r2, r7
 8000648:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800064c:	f8d7 1364 	ldr.w	r1, [r7, #868]	; 0x364
 8000650:	3101      	adds	r1, #1
 8000652:	0209      	lsls	r1, r1, #8
 8000654:	4311      	orrs	r1, r2
 8000656:	463a      	mov	r2, r7
 8000658:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			writedata[i / 4] |= (i + 2)<< 16;
 800065c:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8000660:	2b00      	cmp	r3, #0
 8000662:	da00      	bge.n	8000666 <main+0x8e>
 8000664:	3303      	adds	r3, #3
 8000666:	109b      	asrs	r3, r3, #2
 8000668:	463a      	mov	r2, r7
 800066a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800066e:	f8d7 1364 	ldr.w	r1, [r7, #868]	; 0x364
 8000672:	3102      	adds	r1, #2
 8000674:	0409      	lsls	r1, r1, #16
 8000676:	4311      	orrs	r1, r2
 8000678:	463a      	mov	r2, r7
 800067a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			writedata[i / 4] |= (i + 3)<< 24;
 800067e:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8000682:	2b00      	cmp	r3, #0
 8000684:	da00      	bge.n	8000688 <main+0xb0>
 8000686:	3303      	adds	r3, #3
 8000688:	109b      	asrs	r3, r3, #2
 800068a:	463a      	mov	r2, r7
 800068c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000690:	f8d7 1364 	ldr.w	r1, [r7, #868]	; 0x364
 8000694:	3103      	adds	r1, #3
 8000696:	0609      	lsls	r1, r1, #24
 8000698:	4311      	orrs	r1, r2
 800069a:	463a      	mov	r2, r7
 800069c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < 400; i = i + 4) {
 80006a0:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 80006a4:	3304      	adds	r3, #4
 80006a6:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 80006aa:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 80006ae:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80006b2:	dbb3      	blt.n	800061c <main+0x44>
//
//		for (int i = 0; i < 100; i++) {
//			printf("%x ", writedata[i]);
//		}

		BSP_QSPI_Init();
 80006b4:	f000 f9a2 	bl	80009fc <BSP_QSPI_Init>
		HAL_Delay(1000);
 80006b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006bc:	f000 ffe2 	bl	8001684 <HAL_Delay>
		BSP_QSPI_Erase_Block(0);
 80006c0:	2000      	movs	r0, #0
 80006c2:	f000 fac7 	bl	8000c54 <BSP_QSPI_Erase_Block>
		printf("Write REsult %d \r\n", BSP_QSPI_Write(writedata, 0, sizeof(data)));
 80006c6:	463b      	mov	r3, r7
 80006c8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 fa42 	bl	8000b58 <BSP_QSPI_Write>
 80006d4:	4603      	mov	r3, r0
 80006d6:	4619      	mov	r1, r3
 80006d8:	4820      	ldr	r0, [pc, #128]	; (800075c <main+0x184>)
 80006da:	f003 fedd 	bl	8004498 <iprintf>
		printf("\r\nWrite End \r\n");
 80006de:	4820      	ldr	r0, [pc, #128]	; (8000760 <main+0x188>)
 80006e0:	f003 ff4e 	bl	8004580 <puts>
		if (BSP_QSPI_GetStatus() == 0) {
 80006e4:	f000 fafa 	bl	8000cdc <BSP_QSPI_GetStatus>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d129      	bne.n	8000742 <main+0x16a>
			printf("Read REsult %d \r\n", BSP_QSPI_Read(data, 0, sizeof(data)));
 80006ee:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80006f2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80006f6:	2100      	movs	r1, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f000 f9d7 	bl	8000aac <BSP_QSPI_Read>
 80006fe:	4603      	mov	r3, r0
 8000700:	4619      	mov	r1, r3
 8000702:	4818      	ldr	r0, [pc, #96]	; (8000764 <main+0x18c>)
 8000704:	f003 fec8 	bl	8004498 <iprintf>
			for (int i = 0; i < 100; i++) {
 8000708:	2300      	movs	r3, #0
 800070a:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 800070e:	e010      	b.n	8000732 <main+0x15a>
				printf("%08x : %04x \r\n",i, data[i]);
 8000710:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000714:	f8d7 2360 	ldr.w	r2, [r7, #864]	; 0x360
 8000718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800071c:	461a      	mov	r2, r3
 800071e:	f8d7 1360 	ldr.w	r1, [r7, #864]	; 0x360
 8000722:	4811      	ldr	r0, [pc, #68]	; (8000768 <main+0x190>)
 8000724:	f003 feb8 	bl	8004498 <iprintf>
			for (int i = 0; i < 100; i++) {
 8000728:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 800072c:	3301      	adds	r3, #1
 800072e:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 8000732:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8000736:	2b63      	cmp	r3, #99	; 0x63
 8000738:	ddea      	ble.n	8000710 <main+0x138>
			}
			HAL_Delay(1000);
 800073a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800073e:	f000 ffa1 	bl	8001684 <HAL_Delay>
		}
		printf("SPI STATUS %d \r\n", BSP_QSPI_GetStatus());
 8000742:	f000 facb 	bl	8000cdc <BSP_QSPI_GetStatus>
 8000746:	4603      	mov	r3, r0
 8000748:	4619      	mov	r1, r3
 800074a:	4808      	ldr	r0, [pc, #32]	; (800076c <main+0x194>)
 800074c:	f003 fea4 	bl	8004498 <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000750:	e7fe      	b.n	8000750 <main+0x178>
 8000752:	bf00      	nop
 8000754:	2000000c 	.word	0x2000000c
 8000758:	080054bc 	.word	0x080054bc
 800075c:	080054c8 	.word	0x080054c8
 8000760:	080054dc 	.word	0x080054dc
 8000764:	080054ec 	.word	0x080054ec
 8000768:	08005500 	.word	0x08005500
 800076c:	08005510 	.word	0x08005510

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b0b4      	sub	sp, #208	; 0xd0
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800077a:	2230      	movs	r2, #48	; 0x30
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f003 fe82 	bl	8004488 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000794:	f107 0308 	add.w	r3, r7, #8
 8000798:	2284      	movs	r2, #132	; 0x84
 800079a:	2100      	movs	r1, #0
 800079c:	4618      	mov	r0, r3
 800079e:	f003 fe73 	bl	8004488 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007a2:	f001 fbc7 	bl	8001f34 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a6:	4b39      	ldr	r3, [pc, #228]	; (800088c <SystemClock_Config+0x11c>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007aa:	4a38      	ldr	r2, [pc, #224]	; (800088c <SystemClock_Config+0x11c>)
 80007ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b0:	6413      	str	r3, [r2, #64]	; 0x40
 80007b2:	4b36      	ldr	r3, [pc, #216]	; (800088c <SystemClock_Config+0x11c>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007be:	4b34      	ldr	r3, [pc, #208]	; (8000890 <SystemClock_Config+0x120>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a33      	ldr	r2, [pc, #204]	; (8000890 <SystemClock_Config+0x120>)
 80007c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007c8:	6013      	str	r3, [r2, #0]
 80007ca:	4b31      	ldr	r3, [pc, #196]	; (8000890 <SystemClock_Config+0x120>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d6:	2302      	movs	r3, #2
 80007d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007dc:	2301      	movs	r3, #1
 80007de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e2:	2310      	movs	r3, #16
 80007e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e8:	2302      	movs	r3, #2
 80007ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ee:	2300      	movs	r3, #0
 80007f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007f4:	2308      	movs	r3, #8
 80007f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 80007fa:	23d8      	movs	r3, #216	; 0xd8
 80007fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000800:	2302      	movs	r3, #2
 8000802:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000806:	2309      	movs	r3, #9
 8000808:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000810:	4618      	mov	r0, r3
 8000812:	f002 f8d5 	bl	80029c0 <HAL_RCC_OscConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800081c:	f000 f8ea 	bl	80009f4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000820:	f001 fb98 	bl	8001f54 <HAL_PWREx_EnableOverDrive>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800082a:	f000 f8e3 	bl	80009f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082e:	230f      	movs	r3, #15
 8000830:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000834:	2302      	movs	r3, #2
 8000836:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000840:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000844:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800084c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000850:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000854:	2107      	movs	r1, #7
 8000856:	4618      	mov	r0, r3
 8000858:	f002 fb56 	bl	8002f08 <HAL_RCC_ClockConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000862:	f000 f8c7 	bl	80009f4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000866:	2340      	movs	r3, #64	; 0x40
 8000868:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800086a:	2300      	movs	r3, #0
 800086c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800086e:	f107 0308 	add.w	r3, r7, #8
 8000872:	4618      	mov	r0, r3
 8000874:	f002 fd1a 	bl	80032ac <HAL_RCCEx_PeriphCLKConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0x112>
  {
    Error_Handler();
 800087e:	f000 f8b9 	bl	80009f4 <Error_Handler>
  }
}
 8000882:	bf00      	nop
 8000884:	37d0      	adds	r7, #208	; 0xd0
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800
 8000890:	40007000 	.word	0x40007000

08000894 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <MX_QUADSPI_Init+0x50>)
 800089a:	4a13      	ldr	r2, [pc, #76]	; (80008e8 <MX_QUADSPI_Init+0x54>)
 800089c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_QUADSPI_Init+0x50>)
 80008a0:	2202      	movs	r2, #2
 80008a2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_QUADSPI_Init+0x50>)
 80008a6:	2204      	movs	r2, #4
 80008a8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_QUADSPI_Init+0x50>)
 80008ac:	2210      	movs	r2, #16
 80008ae:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 4;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_QUADSPI_Init+0x50>)
 80008b2:	2204      	movs	r2, #4
 80008b4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_2_CYCLE;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <MX_QUADSPI_Init+0x50>)
 80008b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008bc:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_QUADSPI_Init+0x50>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80008c4:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <MX_QUADSPI_Init+0x50>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_QUADSPI_Init+0x50>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <MX_QUADSPI_Init+0x50>)
 80008d2:	f001 fb8f 	bl	8001ff4 <HAL_QSPI_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80008dc:	f000 f88a 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000210 	.word	0x20000210
 80008e8:	a0001000 	.word	0xa0001000

080008ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_USART1_UART_Init+0x58>)
 80008f2:	4a15      	ldr	r2, [pc, #84]	; (8000948 <MX_USART1_UART_Init+0x5c>)
 80008f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008f6:	4b13      	ldr	r3, [pc, #76]	; (8000944 <MX_USART1_UART_Init+0x58>)
 80008f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_USART1_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_USART1_UART_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_USART1_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_USART1_UART_Init+0x58>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <MX_USART1_UART_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_USART1_UART_Init+0x58>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <MX_USART1_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_USART1_UART_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_USART1_UART_Init+0x58>)
 8000930:	f003 f8aa 	bl	8003a88 <HAL_UART_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800093a:	f000 f85b 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	2000009c 	.word	0x2000009c
 8000948:	40011000 	.word	0x40011000

0800094c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800094c:	b480      	push	{r7}
 800094e:	b087      	sub	sp, #28
 8000950:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000952:	4b27      	ldr	r3, [pc, #156]	; (80009f0 <MX_GPIO_Init+0xa4>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a26      	ldr	r2, [pc, #152]	; (80009f0 <MX_GPIO_Init+0xa4>)
 8000958:	f043 0310 	orr.w	r3, r3, #16
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b24      	ldr	r3, [pc, #144]	; (80009f0 <MX_GPIO_Init+0xa4>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0310 	and.w	r3, r3, #16
 8000966:	617b      	str	r3, [r7, #20]
 8000968:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <MX_GPIO_Init+0xa4>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a20      	ldr	r2, [pc, #128]	; (80009f0 <MX_GPIO_Init+0xa4>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <MX_GPIO_Init+0xa4>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000982:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <MX_GPIO_Init+0xa4>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a1a      	ldr	r2, [pc, #104]	; (80009f0 <MX_GPIO_Init+0xa4>)
 8000988:	f043 0302 	orr.w	r3, r3, #2
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <MX_GPIO_Init+0xa4>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <MX_GPIO_Init+0xa4>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a14      	ldr	r2, [pc, #80]	; (80009f0 <MX_GPIO_Init+0xa4>)
 80009a0:	f043 0304 	orr.w	r3, r3, #4
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <MX_GPIO_Init+0xa4>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0304 	and.w	r3, r3, #4
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_GPIO_Init+0xa4>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <MX_GPIO_Init+0xa4>)
 80009b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_GPIO_Init+0xa4>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_GPIO_Init+0xa4>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a08      	ldr	r2, [pc, #32]	; (80009f0 <MX_GPIO_Init+0xa4>)
 80009d0:	f043 0308 	orr.w	r3, r3, #8
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_GPIO_Init+0xa4>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0308 	and.w	r3, r3, #8
 80009de:	603b      	str	r3, [r7, #0]
 80009e0:	683b      	ldr	r3, [r7, #0]

}
 80009e2:	bf00      	nop
 80009e4:	371c      	adds	r7, #28
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800

080009f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009fa:	e7fe      	b.n	80009fa <Error_Handler+0x6>

080009fc <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 8000a02:	4b28      	ldr	r3, [pc, #160]	; (8000aa4 <BSP_QSPI_Init+0xa8>)
 8000a04:	4a28      	ldr	r2, [pc, #160]	; (8000aa8 <BSP_QSPI_Init+0xac>)
 8000a06:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8000a08:	4826      	ldr	r0, [pc, #152]	; (8000aa4 <BSP_QSPI_Init+0xa8>)
 8000a0a:	f001 fb6f 	bl	80020ec <HAL_QSPI_DeInit>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8000a14:	2301      	movs	r3, #1
 8000a16:	e041      	b.n	8000a9c <BSP_QSPI_Init+0xa0>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4822      	ldr	r0, [pc, #136]	; (8000aa4 <BSP_QSPI_Init+0xa8>)
 8000a1c:	f000 f9ac 	bl	8000d78 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 1; /* QSPI freq = 216 MHz/(1+1) = 108 Mhz */
 8000a20:	4b20      	ldr	r3, [pc, #128]	; (8000aa4 <BSP_QSPI_Init+0xa8>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 8000a26:	4b1f      	ldr	r3, [pc, #124]	; (8000aa4 <BSP_QSPI_Init+0xa8>)
 8000a28:	2204      	movs	r2, #4
 8000a2a:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000a2c:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <BSP_QSPI_Init+0xa8>)
 8000a2e:	2210      	movs	r2, #16
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a36:	607b      	str	r3, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	fa93 f3a3 	rbit	r3, r3
 8000a3e:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000a40:	683b      	ldr	r3, [r7, #0]
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8000a42:	fab3 f383 	clz	r3, r3
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	3b01      	subs	r3, #1
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <BSP_QSPI_Init+0xa8>)
 8000a4e:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE; /* Min 50ns for nonRead */
 8000a50:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <BSP_QSPI_Init+0xa8>)
 8000a52:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000a56:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <BSP_QSPI_Init+0xa8>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	619a      	str	r2, [r3, #24]
  QSPIHandle.Init.FlashID            = QSPI_FLASH_ID_1;
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <BSP_QSPI_Init+0xa8>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	61da      	str	r2, [r3, #28]
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <BSP_QSPI_Init+0xa8>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	621a      	str	r2, [r3, #32]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8000a6a:	480e      	ldr	r0, [pc, #56]	; (8000aa4 <BSP_QSPI_Init+0xa8>)
 8000a6c:	f001 fac2 	bl	8001ff4 <HAL_QSPI_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <BSP_QSPI_Init+0x7e>
  {
    return QSPI_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	e010      	b.n	8000a9c <BSP_QSPI_Init+0xa0>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 8000a7a:	480a      	ldr	r0, [pc, #40]	; (8000aa4 <BSP_QSPI_Init+0xa8>)
 8000a7c:	f000 fa3c 	bl	8000ef8 <QSPI_ResetMemory>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <BSP_QSPI_Init+0x8e>
  {
    return QSPI_NOT_SUPPORTED;
 8000a86:	2304      	movs	r3, #4
 8000a88:	e008      	b.n	8000a9c <BSP_QSPI_Init+0xa0>
  }
 
  /* Configuration of the dummy cycles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&QSPIHandle) != QSPI_OK)
 8000a8a:	4806      	ldr	r0, [pc, #24]	; (8000aa4 <BSP_QSPI_Init+0xa8>)
 8000a8c:	f000 fa76 	bl	8000f7c <QSPI_DummyCyclesCfg>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <BSP_QSPI_Init+0x9e>
  {
    return QSPI_NOT_SUPPORTED;
 8000a96:	2304      	movs	r3, #4
 8000a98:	e000      	b.n	8000a9c <BSP_QSPI_Init+0xa0>
  }
  
  return QSPI_OK;
 8000a9a:	2300      	movs	r3, #0
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	2000025c 	.word	0x2000025c
 8000aa8:	a0001000 	.word	0xa0001000

08000aac <BSP_QSPI_Read>:
  * @param  ReadAddr: Read start address
  * @param  Size: Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b092      	sub	sp, #72	; 0x48
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the read command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000ab8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8000abe:	23eb      	movs	r3, #235	; 0xeb
 8000ac0:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8000ac2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8000ac8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000acc:	61fb      	str	r3, [r7, #28]
  s_command.Address           = ReadAddr;
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8000ad6:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000ada:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8000adc:	230a      	movs	r3, #10
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = Size;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000aec:	2300      	movs	r3, #0
 8000aee:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000af0:	f107 0310 	add.w	r3, r7, #16
 8000af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000af8:	4619      	mov	r1, r3
 8000afa:	4816      	ldr	r0, [pc, #88]	; (8000b54 <BSP_QSPI_Read+0xa8>)
 8000afc:	f001 fb1a 	bl	8002134 <HAL_QSPI_Command>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <BSP_QSPI_Read+0x5e>
  {
    return QSPI_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	e01f      	b.n	8000b4a <BSP_QSPI_Read+0x9e>
  }
  
  /* Set S# timing for Read command */
  MODIFY_REG(QSPIHandle.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_3_CYCLE);
 8000b0a:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <BSP_QSPI_Read+0xa8>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <BSP_QSPI_Read+0xa8>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b1c:	605a      	str	r2, [r3, #4]
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b22:	68f9      	ldr	r1, [r7, #12]
 8000b24:	480b      	ldr	r0, [pc, #44]	; (8000b54 <BSP_QSPI_Read+0xa8>)
 8000b26:	f001 fbfa 	bl	800231e <HAL_QSPI_Receive>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <BSP_QSPI_Read+0x88>
  {
    return QSPI_ERROR;
 8000b30:	2301      	movs	r3, #1
 8000b32:	e00a      	b.n	8000b4a <BSP_QSPI_Read+0x9e>
  }
  
  /* Restore S# timing for nonRead commands */
  MODIFY_REG(QSPIHandle.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_6_CYCLE);
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <BSP_QSPI_Read+0xa8>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000b3e:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <BSP_QSPI_Read+0xa8>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
 8000b46:	605a      	str	r2, [r3, #4]

  return QSPI_OK;
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3748      	adds	r7, #72	; 0x48
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	2000025c 	.word	0x2000025c

08000b58 <BSP_QSPI_Write>:
  * @param  WriteAddr: Write start address
  * @param  Size: Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b096      	sub	sp, #88	; 0x58
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = N25Q128A_PAGE_SIZE - (WriteAddr % N25Q128A_PAGE_SIZE);
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000b6c:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8000b6e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d901      	bls.n	8000b7a <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4413      	add	r3, r2
 8000b84:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000b86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.Instruction       = EXT_QUAD_IN_FAST_PROG_CMD;
 8000b8c:	2312      	movs	r3, #18
 8000b8e:	617b      	str	r3, [r7, #20]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8000b90:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b94:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8000b96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b9a:	623b      	str	r3, [r7, #32]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8000ba0:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000ba4:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DummyCycles       = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000baa:	2300      	movs	r3, #0
 8000bac:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* Perform the write page by page */
  do
  {
    s_command.Address = current_addr;
 8000bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000bb8:	61bb      	str	r3, [r7, #24]
    s_command.NbData  = current_size;
 8000bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000bbc:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8000bbe:	4824      	ldr	r0, [pc, #144]	; (8000c50 <BSP_QSPI_Write+0xf8>)
 8000bc0:	f000 fa50 	bl	8001064 <QSPI_WriteEnable>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <BSP_QSPI_Write+0x76>
    {
      return QSPI_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e03b      	b.n	8000c46 <BSP_QSPI_Write+0xee>
    }
    
    /* Configure the command */
    if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	481d      	ldr	r0, [pc, #116]	; (8000c50 <BSP_QSPI_Write+0xf8>)
 8000bda:	f001 faab 	bl	8002134 <HAL_QSPI_Command>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <BSP_QSPI_Write+0x90>
    {
      return QSPI_ERROR;
 8000be4:	2301      	movs	r3, #1
 8000be6:	e02e      	b.n	8000c46 <BSP_QSPI_Write+0xee>
    }
    
    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bec:	68f9      	ldr	r1, [r7, #12]
 8000bee:	4818      	ldr	r0, [pc, #96]	; (8000c50 <BSP_QSPI_Write+0xf8>)
 8000bf0:	f001 fafe 	bl	80021f0 <HAL_QSPI_Transmit>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <BSP_QSPI_Write+0xa6>
    {
      return QSPI_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e023      	b.n	8000c46 <BSP_QSPI_Write+0xee>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8000bfe:	f241 3188 	movw	r1, #5000	; 0x1388
 8000c02:	4813      	ldr	r0, [pc, #76]	; (8000c50 <BSP_QSPI_Write+0xf8>)
 8000c04:	f000 fa77 	bl	80010f6 <QSPI_AutoPollingMemReady>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <BSP_QSPI_Write+0xba>
    {
      return QSPI_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e019      	b.n	8000c46 <BSP_QSPI_Write+0xee>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8000c12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c16:	4413      	add	r3, r2
 8000c18:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c1e:	4413      	add	r3, r2
 8000c20:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + N25Q128A_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : N25Q128A_PAGE_SIZE;
 8000c22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c24:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000c28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d203      	bcs.n	8000c36 <BSP_QSPI_Write+0xde>
 8000c2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000c30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c32:	1ad3      	subs	r3, r2, r3
 8000c34:	e001      	b.n	8000c3a <BSP_QSPI_Write+0xe2>
 8000c36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c3a:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 8000c3c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d3b8      	bcc.n	8000bb6 <BSP_QSPI_Write+0x5e>
  
  return QSPI_OK;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3758      	adds	r7, #88	; 0x58
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	2000025c 	.word	0x2000025c

08000c54 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress: Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b090      	sub	sp, #64	; 0x40
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the erase command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000c5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c60:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = SUBSECTOR_ERASE_CMD;
 8000c62:	2320      	movs	r3, #32
 8000c64:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8000c66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8000c6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c70:	617b      	str	r3, [r7, #20]
  s_command.Address           = BlockAddress;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	60fb      	str	r3, [r7, #12]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000c82:	2300      	movs	r3, #0
 8000c84:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000c86:	2300      	movs	r3, #0
 8000c88:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8000c8e:	4812      	ldr	r0, [pc, #72]	; (8000cd8 <BSP_QSPI_Erase_Block+0x84>)
 8000c90:	f000 f9e8 	bl	8001064 <QSPI_WriteEnable>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <BSP_QSPI_Erase_Block+0x4a>
  {
    return QSPI_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e017      	b.n	8000cce <BSP_QSPI_Erase_Block+0x7a>
  }

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c9e:	f107 0308 	add.w	r3, r7, #8
 8000ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	480b      	ldr	r0, [pc, #44]	; (8000cd8 <BSP_QSPI_Erase_Block+0x84>)
 8000caa:	f001 fa43 	bl	8002134 <HAL_QSPI_Command>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <BSP_QSPI_Erase_Block+0x64>
  {
    return QSPI_ERROR;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e00a      	b.n	8000cce <BSP_QSPI_Erase_Block+0x7a>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, N25Q128A_SUBSECTOR_ERASE_MAX_TIME) != QSPI_OK)
 8000cb8:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000cbc:	4806      	ldr	r0, [pc, #24]	; (8000cd8 <BSP_QSPI_Erase_Block+0x84>)
 8000cbe:	f000 fa1a 	bl	80010f6 <QSPI_AutoPollingMemReady>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <BSP_QSPI_Erase_Block+0x78>
  {
    return QSPI_ERROR;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e000      	b.n	8000cce <BSP_QSPI_Erase_Block+0x7a>
  }

  return QSPI_OK;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3740      	adds	r7, #64	; 0x40
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	2000025c 	.word	0x2000025c

08000cdc <BSP_QSPI_GetStatus>:
/**
  * @brief  Reads current status of the QSPI memory.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_GetStatus(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b090      	sub	sp, #64	; 0x40
 8000ce0:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef s_command;
  uint8_t reg;

  /* Initialize the read flag status register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000ce2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ce6:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = READ_FLAG_STATUS_REG_CMD;
 8000ce8:	2370      	movs	r3, #112	; 0x70
 8000cea:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000cec:	2300      	movs	r3, #0
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8000cf4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
  s_command.NbData            = 1;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000d02:	2300      	movs	r3, #0
 8000d04:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000d06:	2300      	movs	r3, #0
 8000d08:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000d0e:	f107 0308 	add.w	r3, r7, #8
 8000d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d16:	4619      	mov	r1, r3
 8000d18:	4816      	ldr	r0, [pc, #88]	; (8000d74 <BSP_QSPI_GetStatus+0x98>)
 8000d1a:	f001 fa0b 	bl	8002134 <HAL_QSPI_Command>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <BSP_QSPI_GetStatus+0x4c>
  {
    return QSPI_ERROR;
 8000d24:	2301      	movs	r3, #1
 8000d26:	e020      	b.n	8000d6a <BSP_QSPI_GetStatus+0x8e>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000d28:	1dfb      	adds	r3, r7, #7
 8000d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4810      	ldr	r0, [pc, #64]	; (8000d74 <BSP_QSPI_GetStatus+0x98>)
 8000d32:	f001 faf4 	bl	800231e <HAL_QSPI_Receive>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <BSP_QSPI_GetStatus+0x64>
  {
    return QSPI_ERROR;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	e014      	b.n	8000d6a <BSP_QSPI_GetStatus+0x8e>
  }
  
  /* Check the value of the register */
  if ((reg & (N25Q128A_FSR_PRERR | N25Q128A_FSR_VPPERR | N25Q128A_FSR_PGERR | N25Q128A_FSR_ERERR)) != 0)
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <BSP_QSPI_GetStatus+0x72>
  {
    return QSPI_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e00d      	b.n	8000d6a <BSP_QSPI_GetStatus+0x8e>
  }
  else if ((reg & (N25Q128A_FSR_PGSUS | N25Q128A_FSR_ERSUS)) != 0)
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <BSP_QSPI_GetStatus+0x80>
  {
    return QSPI_SUSPENDED;
 8000d58:	2308      	movs	r3, #8
 8000d5a:	e006      	b.n	8000d6a <BSP_QSPI_GetStatus+0x8e>
  }
  else if ((reg & N25Q128A_FSR_READY) != 0)
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	b25b      	sxtb	r3, r3
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	da01      	bge.n	8000d68 <BSP_QSPI_GetStatus+0x8c>
  {
    return QSPI_OK;
 8000d64:	2300      	movs	r3, #0
 8000d66:	e000      	b.n	8000d6a <BSP_QSPI_GetStatus+0x8e>
  }
  else
  {
    return QSPI_BUSY;
 8000d68:	2302      	movs	r3, #2
  }
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3740      	adds	r7, #64	; 0x40
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	2000025c 	.word	0x2000025c

08000d78 <BSP_QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
__weak void BSP_QSPI_MspInit(QSPI_HandleTypeDef *hqspi, void *Params)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08e      	sub	sp, #56	; 0x38
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8000d82:	4b59      	ldr	r3, [pc, #356]	; (8000ee8 <BSP_QSPI_MspInit+0x170>)
 8000d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d86:	4a58      	ldr	r2, [pc, #352]	; (8000ee8 <BSP_QSPI_MspInit+0x170>)
 8000d88:	f043 0302 	orr.w	r3, r3, #2
 8000d8c:	6393      	str	r3, [r2, #56]	; 0x38
 8000d8e:	4b56      	ldr	r3, [pc, #344]	; (8000ee8 <BSP_QSPI_MspInit+0x170>)
 8000d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	623b      	str	r3, [r7, #32]
 8000d98:	6a3b      	ldr	r3, [r7, #32]
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 8000d9a:	4b53      	ldr	r3, [pc, #332]	; (8000ee8 <BSP_QSPI_MspInit+0x170>)
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	4a52      	ldr	r2, [pc, #328]	; (8000ee8 <BSP_QSPI_MspInit+0x170>)
 8000da0:	f043 0302 	orr.w	r3, r3, #2
 8000da4:	6193      	str	r3, [r2, #24]
  QSPI_RELEASE_RESET();
 8000da6:	4b50      	ldr	r3, [pc, #320]	; (8000ee8 <BSP_QSPI_MspInit+0x170>)
 8000da8:	699b      	ldr	r3, [r3, #24]
 8000daa:	4a4f      	ldr	r2, [pc, #316]	; (8000ee8 <BSP_QSPI_MspInit+0x170>)
 8000dac:	f023 0302 	bic.w	r3, r3, #2
 8000db0:	6193      	str	r3, [r2, #24]
  /* Enable GPIO clocks */
  QSPI_CS_GPIO_CLK_ENABLE();
 8000db2:	4b4d      	ldr	r3, [pc, #308]	; (8000ee8 <BSP_QSPI_MspInit+0x170>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a4c      	ldr	r2, [pc, #304]	; (8000ee8 <BSP_QSPI_MspInit+0x170>)
 8000db8:	f043 0302 	orr.w	r3, r3, #2
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b4a      	ldr	r3, [pc, #296]	; (8000ee8 <BSP_QSPI_MspInit+0x170>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	61fb      	str	r3, [r7, #28]
 8000dc8:	69fb      	ldr	r3, [r7, #28]
  QSPI_CLK_GPIO_CLK_ENABLE();
 8000dca:	4b47      	ldr	r3, [pc, #284]	; (8000ee8 <BSP_QSPI_MspInit+0x170>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a46      	ldr	r2, [pc, #280]	; (8000ee8 <BSP_QSPI_MspInit+0x170>)
 8000dd0:	f043 0302 	orr.w	r3, r3, #2
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b44      	ldr	r3, [pc, #272]	; (8000ee8 <BSP_QSPI_MspInit+0x170>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	61bb      	str	r3, [r7, #24]
 8000de0:	69bb      	ldr	r3, [r7, #24]
  QSPI_D0_GPIO_CLK_ENABLE();
 8000de2:	4b41      	ldr	r3, [pc, #260]	; (8000ee8 <BSP_QSPI_MspInit+0x170>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a40      	ldr	r2, [pc, #256]	; (8000ee8 <BSP_QSPI_MspInit+0x170>)
 8000de8:	f043 0308 	orr.w	r3, r3, #8
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b3e      	ldr	r3, [pc, #248]	; (8000ee8 <BSP_QSPI_MspInit+0x170>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0308 	and.w	r3, r3, #8
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	697b      	ldr	r3, [r7, #20]
  QSPI_D1_GPIO_CLK_ENABLE();
 8000dfa:	4b3b      	ldr	r3, [pc, #236]	; (8000ee8 <BSP_QSPI_MspInit+0x170>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a3a      	ldr	r2, [pc, #232]	; (8000ee8 <BSP_QSPI_MspInit+0x170>)
 8000e00:	f043 0308 	orr.w	r3, r3, #8
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b38      	ldr	r3, [pc, #224]	; (8000ee8 <BSP_QSPI_MspInit+0x170>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0308 	and.w	r3, r3, #8
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 8000e12:	4b35      	ldr	r3, [pc, #212]	; (8000ee8 <BSP_QSPI_MspInit+0x170>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a34      	ldr	r2, [pc, #208]	; (8000ee8 <BSP_QSPI_MspInit+0x170>)
 8000e18:	f043 0310 	orr.w	r3, r3, #16
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b32      	ldr	r3, [pc, #200]	; (8000ee8 <BSP_QSPI_MspInit+0x170>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0310 	and.w	r3, r3, #16
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
  QSPI_D3_GPIO_CLK_ENABLE();
 8000e2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ee8 <BSP_QSPI_MspInit+0x170>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a2e      	ldr	r2, [pc, #184]	; (8000ee8 <BSP_QSPI_MspInit+0x170>)
 8000e30:	f043 0308 	orr.w	r3, r3, #8
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b2c      	ldr	r3, [pc, #176]	; (8000ee8 <BSP_QSPI_MspInit+0x170>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0308 	and.w	r3, r3, #8
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CS_PIN;
 8000e42:	2340      	movs	r3, #64	; 0x40
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8000e52:	230a      	movs	r3, #10
 8000e54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8000e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4823      	ldr	r0, [pc, #140]	; (8000eec <BSP_QSPI_MspInit+0x174>)
 8000e5e:	f000 fdb5 	bl	80019cc <HAL_GPIO_Init>

  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8000e62:	2304      	movs	r3, #4
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8000e6a:	2309      	movs	r3, #9
 8000e6c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8000e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e72:	4619      	mov	r1, r3
 8000e74:	481d      	ldr	r0, [pc, #116]	; (8000eec <BSP_QSPI_MspInit+0x174>)
 8000e76:	f000 fda9 	bl	80019cc <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 8000e7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8000e80:	2309      	movs	r3, #9
 8000e82:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8000e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4819      	ldr	r0, [pc, #100]	; (8000ef0 <BSP_QSPI_MspInit+0x178>)
 8000e8c:	f000 fd9e 	bl	80019cc <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8000e90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8000e96:	2309      	movs	r3, #9
 8000e98:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 8000e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4813      	ldr	r0, [pc, #76]	; (8000ef0 <BSP_QSPI_MspInit+0x178>)
 8000ea2:	f000 fd93 	bl	80019cc <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 8000ea6:	2304      	movs	r3, #4
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8000eaa:	2309      	movs	r3, #9
 8000eac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 8000eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	480f      	ldr	r0, [pc, #60]	; (8000ef4 <BSP_QSPI_MspInit+0x17c>)
 8000eb6:	f000 fd89 	bl	80019cc <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 8000eba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8000ec0:	2309      	movs	r3, #9
 8000ec2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 8000ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4809      	ldr	r0, [pc, #36]	; (8000ef0 <BSP_QSPI_MspInit+0x178>)
 8000ecc:	f000 fd7e 	bl	80019cc <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	210f      	movs	r1, #15
 8000ed4:	205c      	movs	r0, #92	; 0x5c
 8000ed6:	f000 fcd2 	bl	800187e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8000eda:	205c      	movs	r0, #92	; 0x5c
 8000edc:	f000 fceb 	bl	80018b6 <HAL_NVIC_EnableIRQ>
}
 8000ee0:	bf00      	nop
 8000ee2:	3738      	adds	r7, #56	; 0x38
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40020400 	.word	0x40020400
 8000ef0:	40020c00 	.word	0x40020c00
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b090      	sub	sp, #64	; 0x40
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000f00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f04:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 8000f06:	2366      	movs	r3, #102	; 0x66
 8000f08:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000f22:	2300      	movs	r3, #0
 8000f24:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000f26:	f107 0308 	add.w	r3, r7, #8
 8000f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f2e:	4619      	mov	r1, r3
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f001 f8ff 	bl	8002134 <HAL_QSPI_Command>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e019      	b.n	8000f74 <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 8000f40:	2399      	movs	r3, #153	; 0x99
 8000f42:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000f44:	f107 0308 	add.w	r3, r7, #8
 8000f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f001 f8f0 	bl	8002134 <HAL_QSPI_Command>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e00a      	b.n	8000f74 <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8000f5e:	f241 3188 	movw	r1, #5000	; 0x1388
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f000 f8c7 	bl	80010f6 <QSPI_AutoPollingMemReady>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e000      	b.n	8000f74 <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 8000f72:	2300      	movs	r3, #0
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3740      	adds	r7, #64	; 0x40
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b094      	sub	sp, #80	; 0x50
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000f84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f88:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8000f8a:	2385      	movs	r3, #133	; 0x85
 8000f8c:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000f92:	2300      	movs	r3, #0
 8000f94:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8000f96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f9a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000fac:	2300      	movs	r3, #0
 8000fae:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000fb0:	f107 0310 	add.w	r3, r7, #16
 8000fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fb8:	4619      	mov	r1, r3
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f001 f8ba 	bl	8002134 <HAL_QSPI_Command>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e048      	b.n	800105c <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000fca:	f107 030f 	add.w	r3, r7, #15
 8000fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f001 f9a2 	bl	800231e <HAL_QSPI_Receive>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e03b      	b.n	800105c <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 f83d 	bl	8001064 <QSPI_WriteEnable>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <QSPI_DummyCyclesCfg+0x78>
  {
    return QSPI_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e033      	b.n	800105c <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Update volatile configuration register (with new dummy cycles) */  
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 8000ff4:	2381      	movs	r3, #129	; 0x81
 8000ff6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 8000ffa:	b25b      	sxtb	r3, r3
 8000ffc:	f003 030f 	and.w	r3, r3, #15
 8001000:	b25a      	sxtb	r2, r3
 8001002:	23f0      	movs	r3, #240	; 0xf0
 8001004:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001008:	fa93 f3a3 	rbit	r3, r3
 800100c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800100e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001010:	fab3 f383 	clz	r3, r3
 8001014:	b2db      	uxtb	r3, r3
 8001016:	4619      	mov	r1, r3
 8001018:	230a      	movs	r3, #10
 800101a:	408b      	lsls	r3, r1
 800101c:	b25b      	sxtb	r3, r3
 800101e:	4313      	orrs	r3, r2
 8001020:	b25b      	sxtb	r3, r3
 8001022:	b2db      	uxtb	r3, r3
 8001024:	73fb      	strb	r3, [r7, #15]
      
  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001026:	f107 0310 	add.w	r3, r7, #16
 800102a:	f241 3288 	movw	r2, #5000	; 0x1388
 800102e:	4619      	mov	r1, r3
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f001 f87f 	bl	8002134 <HAL_QSPI_Command>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <QSPI_DummyCyclesCfg+0xc4>
  {
    return QSPI_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e00d      	b.n	800105c <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001040:	f107 030f 	add.w	r3, r7, #15
 8001044:	f241 3288 	movw	r2, #5000	; 0x1388
 8001048:	4619      	mov	r1, r3
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f001 f8d0 	bl	80021f0 <HAL_QSPI_Transmit>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <QSPI_DummyCyclesCfg+0xde>
  {
    return QSPI_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e000      	b.n	800105c <QSPI_DummyCyclesCfg+0xe0>
  }
  
  return QSPI_OK;
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	3750      	adds	r7, #80	; 0x50
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b096      	sub	sp, #88	; 0x58
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800106c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001070:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8001072:	2306      	movs	r3, #6
 8001074:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001076:	2300      	movs	r3, #0
 8001078:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800107a:	2300      	movs	r3, #0
 800107c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 800107e:	2300      	movs	r3, #0
 8001080:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001086:	2300      	movs	r3, #0
 8001088:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800108a:	2300      	movs	r3, #0
 800108c:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800108e:	2300      	movs	r3, #0
 8001090:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001092:	f107 0320 	add.w	r3, r7, #32
 8001096:	f241 3288 	movw	r2, #5000	; 0x1388
 800109a:	4619      	mov	r1, r3
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f001 f849 	bl	8002134 <HAL_QSPI_Command>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e020      	b.n	80010ee <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  s_config.Match           = N25Q128A_SR_WREN;
 80010ac:	2302      	movs	r3, #2
 80010ae:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WREN;
 80010b0:	2302      	movs	r3, #2
 80010b2:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 80010b8:	2301      	movs	r3, #1
 80010ba:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 80010bc:	2310      	movs	r3, #16
 80010be:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80010c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010c4:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = READ_STATUS_REG_CMD;
 80010c6:	2305      	movs	r3, #5
 80010c8:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 80010ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010ce:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80010d0:	f107 0208 	add.w	r2, r7, #8
 80010d4:	f107 0120 	add.w	r1, r7, #32
 80010d8:	f241 3388 	movw	r3, #5000	; 0x1388
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f001 f9c0 	bl	8002462 <HAL_QSPI_AutoPolling>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e000      	b.n	80010ee <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3758      	adds	r7, #88	; 0x58
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b096      	sub	sp, #88	; 0x58
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001100:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001104:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8001106:	2305      	movs	r3, #5
 8001108:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800110a:	2300      	movs	r3, #0
 800110c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800110e:	2300      	movs	r3, #0
 8001110:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8001112:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001116:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800111c:	2300      	movs	r3, #0
 800111e:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001120:	2300      	movs	r3, #0
 8001122:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001124:	2300      	movs	r3, #0
 8001126:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WIP;
 800112c:	2301      	movs	r3, #1
 800112e:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8001134:	2301      	movs	r3, #1
 8001136:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8001138:	2310      	movs	r3, #16
 800113a:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800113c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001140:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8001142:	f107 0208 	add.w	r2, r7, #8
 8001146:	f107 0120 	add.w	r1, r7, #32
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f001 f988 	bl	8002462 <HAL_QSPI_AutoPolling>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e000      	b.n	800115e <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3758      	adds	r7, #88	; 0x58
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800116e:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <HAL_MspInit+0x44>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	4a0e      	ldr	r2, [pc, #56]	; (80011ac <HAL_MspInit+0x44>)
 8001174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001178:	6413      	str	r3, [r2, #64]	; 0x40
 800117a:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <HAL_MspInit+0x44>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <HAL_MspInit+0x44>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	4a08      	ldr	r2, [pc, #32]	; (80011ac <HAL_MspInit+0x44>)
 800118c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001190:	6453      	str	r3, [r2, #68]	; 0x44
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_MspInit+0x44>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800119a:	603b      	str	r3, [r7, #0]
 800119c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	40023800 	.word	0x40023800

080011b0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08c      	sub	sp, #48	; 0x30
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 031c 	add.w	r3, r7, #28
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a3b      	ldr	r2, [pc, #236]	; (80012bc <HAL_QSPI_MspInit+0x10c>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d170      	bne.n	80012b4 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80011d2:	4b3b      	ldr	r3, [pc, #236]	; (80012c0 <HAL_QSPI_MspInit+0x110>)
 80011d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011d6:	4a3a      	ldr	r2, [pc, #232]	; (80012c0 <HAL_QSPI_MspInit+0x110>)
 80011d8:	f043 0302 	orr.w	r3, r3, #2
 80011dc:	6393      	str	r3, [r2, #56]	; 0x38
 80011de:	4b38      	ldr	r3, [pc, #224]	; (80012c0 <HAL_QSPI_MspInit+0x110>)
 80011e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	61bb      	str	r3, [r7, #24]
 80011e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ea:	4b35      	ldr	r3, [pc, #212]	; (80012c0 <HAL_QSPI_MspInit+0x110>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a34      	ldr	r2, [pc, #208]	; (80012c0 <HAL_QSPI_MspInit+0x110>)
 80011f0:	f043 0310 	orr.w	r3, r3, #16
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b32      	ldr	r3, [pc, #200]	; (80012c0 <HAL_QSPI_MspInit+0x110>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0310 	and.w	r3, r3, #16
 80011fe:	617b      	str	r3, [r7, #20]
 8001200:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001202:	4b2f      	ldr	r3, [pc, #188]	; (80012c0 <HAL_QSPI_MspInit+0x110>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a2e      	ldr	r2, [pc, #184]	; (80012c0 <HAL_QSPI_MspInit+0x110>)
 8001208:	f043 0302 	orr.w	r3, r3, #2
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b2c      	ldr	r3, [pc, #176]	; (80012c0 <HAL_QSPI_MspInit+0x110>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800121a:	4b29      	ldr	r3, [pc, #164]	; (80012c0 <HAL_QSPI_MspInit+0x110>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a28      	ldr	r2, [pc, #160]	; (80012c0 <HAL_QSPI_MspInit+0x110>)
 8001220:	f043 0308 	orr.w	r3, r3, #8
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b26      	ldr	r3, [pc, #152]	; (80012c0 <HAL_QSPI_MspInit+0x110>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0308 	and.w	r3, r3, #8
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001232:	2304      	movs	r3, #4
 8001234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123e:	2303      	movs	r3, #3
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001242:	2309      	movs	r3, #9
 8001244:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001246:	f107 031c 	add.w	r3, r7, #28
 800124a:	4619      	mov	r1, r3
 800124c:	481d      	ldr	r0, [pc, #116]	; (80012c4 <HAL_QSPI_MspInit+0x114>)
 800124e:	f000 fbbd 	bl	80019cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001252:	2340      	movs	r3, #64	; 0x40
 8001254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	2302      	movs	r3, #2
 8001258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125e:	2303      	movs	r3, #3
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001262:	230a      	movs	r3, #10
 8001264:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	4619      	mov	r1, r3
 800126c:	4816      	ldr	r0, [pc, #88]	; (80012c8 <HAL_QSPI_MspInit+0x118>)
 800126e:	f000 fbad 	bl	80019cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001272:	2304      	movs	r3, #4
 8001274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001276:	2302      	movs	r3, #2
 8001278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127e:	2303      	movs	r3, #3
 8001280:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001282:	2309      	movs	r3, #9
 8001284:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001286:	f107 031c 	add.w	r3, r7, #28
 800128a:	4619      	mov	r1, r3
 800128c:	480e      	ldr	r0, [pc, #56]	; (80012c8 <HAL_QSPI_MspInit+0x118>)
 800128e:	f000 fb9d 	bl	80019cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
 8001292:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001298:	2302      	movs	r3, #2
 800129a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a0:	2303      	movs	r3, #3
 80012a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012a4:	2309      	movs	r3, #9
 80012a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012a8:	f107 031c 	add.w	r3, r7, #28
 80012ac:	4619      	mov	r1, r3
 80012ae:	4807      	ldr	r0, [pc, #28]	; (80012cc <HAL_QSPI_MspInit+0x11c>)
 80012b0:	f000 fb8c 	bl	80019cc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80012b4:	bf00      	nop
 80012b6:	3730      	adds	r7, #48	; 0x30
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	a0001000 	.word	0xa0001000
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40021000 	.word	0x40021000
 80012c8:	40020400 	.word	0x40020400
 80012cc:	40020c00 	.word	0x40020c00

080012d0 <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a0c      	ldr	r2, [pc, #48]	; (8001310 <HAL_QSPI_MspDeInit+0x40>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d112      	bne.n	8001308 <HAL_QSPI_MspDeInit+0x38>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 80012e2:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <HAL_QSPI_MspDeInit+0x44>)
 80012e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012e6:	4a0b      	ldr	r2, [pc, #44]	; (8001314 <HAL_QSPI_MspDeInit+0x44>)
 80012e8:	f023 0302 	bic.w	r3, r3, #2
 80012ec:	6393      	str	r3, [r2, #56]	; 0x38
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 80012ee:	2104      	movs	r1, #4
 80012f0:	4809      	ldr	r0, [pc, #36]	; (8001318 <HAL_QSPI_MspDeInit+0x48>)
 80012f2:	f000 fd15 	bl	8001d20 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_2);
 80012f6:	2144      	movs	r1, #68	; 0x44
 80012f8:	4808      	ldr	r0, [pc, #32]	; (800131c <HAL_QSPI_MspDeInit+0x4c>)
 80012fa:	f000 fd11 	bl	8001d20 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11);
 80012fe:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8001302:	4807      	ldr	r0, [pc, #28]	; (8001320 <HAL_QSPI_MspDeInit+0x50>)
 8001304:	f000 fd0c 	bl	8001d20 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	a0001000 	.word	0xa0001000
 8001314:	40023800 	.word	0x40023800
 8001318:	40021000 	.word	0x40021000
 800131c:	40020400 	.word	0x40020400
 8001320:	40020c00 	.word	0x40020c00

08001324 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08a      	sub	sp, #40	; 0x28
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a25      	ldr	r2, [pc, #148]	; (80013d8 <HAL_UART_MspInit+0xb4>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d144      	bne.n	80013d0 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001346:	4b25      	ldr	r3, [pc, #148]	; (80013dc <HAL_UART_MspInit+0xb8>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	4a24      	ldr	r2, [pc, #144]	; (80013dc <HAL_UART_MspInit+0xb8>)
 800134c:	f043 0310 	orr.w	r3, r3, #16
 8001350:	6453      	str	r3, [r2, #68]	; 0x44
 8001352:	4b22      	ldr	r3, [pc, #136]	; (80013dc <HAL_UART_MspInit+0xb8>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	f003 0310 	and.w	r3, r3, #16
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800135e:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <HAL_UART_MspInit+0xb8>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a1e      	ldr	r2, [pc, #120]	; (80013dc <HAL_UART_MspInit+0xb8>)
 8001364:	f043 0302 	orr.w	r3, r3, #2
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <HAL_UART_MspInit+0xb8>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	4b19      	ldr	r3, [pc, #100]	; (80013dc <HAL_UART_MspInit+0xb8>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a18      	ldr	r2, [pc, #96]	; (80013dc <HAL_UART_MspInit+0xb8>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b16      	ldr	r3, [pc, #88]	; (80013dc <HAL_UART_MspInit+0xb8>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800138e:	2380      	movs	r3, #128	; 0x80
 8001390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139a:	2303      	movs	r3, #3
 800139c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800139e:	2307      	movs	r3, #7
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	480d      	ldr	r0, [pc, #52]	; (80013e0 <HAL_UART_MspInit+0xbc>)
 80013aa:	f000 fb0f 	bl	80019cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013bc:	2303      	movs	r3, #3
 80013be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013c0:	2307      	movs	r3, #7
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	4619      	mov	r1, r3
 80013ca:	4806      	ldr	r0, [pc, #24]	; (80013e4 <HAL_UART_MspInit+0xc0>)
 80013cc:	f000 fafe 	bl	80019cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013d0:	bf00      	nop
 80013d2:	3728      	adds	r7, #40	; 0x28
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40011000 	.word	0x40011000
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40020400 	.word	0x40020400
 80013e4:	40020000 	.word	0x40020000

080013e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013ec:	e7fe      	b.n	80013ec <NMI_Handler+0x4>

080013ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f2:	e7fe      	b.n	80013f2 <HardFault_Handler+0x4>

080013f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <MemManage_Handler+0x4>

080013fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fe:	e7fe      	b.n	80013fe <BusFault_Handler+0x4>

08001400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <UsageFault_Handler+0x4>

08001406 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001434:	f000 f906 	bl	8001644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}

0800143c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	e00a      	b.n	8001464 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800144e:	f3af 8000 	nop.w
 8001452:	4601      	mov	r1, r0
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	1c5a      	adds	r2, r3, #1
 8001458:	60ba      	str	r2, [r7, #8]
 800145a:	b2ca      	uxtb	r2, r1
 800145c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	3301      	adds	r3, #1
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	429a      	cmp	r2, r3
 800146a:	dbf0      	blt.n	800144e <_read+0x12>
	}

return len;
 800146c:	687b      	ldr	r3, [r7, #4]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
	return -1;
 800147e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001482:	4618      	mov	r0, r3
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
 8001496:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800149e:	605a      	str	r2, [r3, #4]
	return 0;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <_isatty>:

int _isatty(int file)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
	return 1;
 80014b6:	2301      	movs	r3, #1
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
	return 0;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014e8:	4a14      	ldr	r2, [pc, #80]	; (800153c <_sbrk+0x5c>)
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <_sbrk+0x60>)
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014f4:	4b13      	ldr	r3, [pc, #76]	; (8001544 <_sbrk+0x64>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d102      	bne.n	8001502 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <_sbrk+0x64>)
 80014fe:	4a12      	ldr	r2, [pc, #72]	; (8001548 <_sbrk+0x68>)
 8001500:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001502:	4b10      	ldr	r3, [pc, #64]	; (8001544 <_sbrk+0x64>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4413      	add	r3, r2
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	429a      	cmp	r2, r3
 800150e:	d207      	bcs.n	8001520 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001510:	f002 ff90 	bl	8004434 <__errno>
 8001514:	4602      	mov	r2, r0
 8001516:	230c      	movs	r3, #12
 8001518:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800151a:	f04f 33ff 	mov.w	r3, #4294967295
 800151e:	e009      	b.n	8001534 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001520:	4b08      	ldr	r3, [pc, #32]	; (8001544 <_sbrk+0x64>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001526:	4b07      	ldr	r3, [pc, #28]	; (8001544 <_sbrk+0x64>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4413      	add	r3, r2
 800152e:	4a05      	ldr	r2, [pc, #20]	; (8001544 <_sbrk+0x64>)
 8001530:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001532:	68fb      	ldr	r3, [r7, #12]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20050000 	.word	0x20050000
 8001540:	00000400 	.word	0x00000400
 8001544:	2000008c 	.word	0x2000008c
 8001548:	200002b0 	.word	0x200002b0

0800154c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <SystemInit+0x28>)
 8001552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001556:	4a07      	ldr	r2, [pc, #28]	; (8001574 <SystemInit+0x28>)
 8001558:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800155c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001560:	4b04      	ldr	r3, [pc, #16]	; (8001574 <SystemInit+0x28>)
 8001562:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001566:	609a      	str	r2, [r3, #8]
#endif
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001578:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800157c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800157e:	e003      	b.n	8001588 <LoopCopyDataInit>

08001580 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001582:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001584:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001586:	3104      	adds	r1, #4

08001588 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001588:	480b      	ldr	r0, [pc, #44]	; (80015b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800158a:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800158c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800158e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001590:	d3f6      	bcc.n	8001580 <CopyDataInit>
  ldr  r2, =_sbss
 8001592:	4a0b      	ldr	r2, [pc, #44]	; (80015c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001594:	e002      	b.n	800159c <LoopFillZerobss>

08001596 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001596:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001598:	f842 3b04 	str.w	r3, [r2], #4

0800159c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800159c:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800159e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80015a0:	d3f9      	bcc.n	8001596 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015a2:	f7ff ffd3 	bl	800154c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015a6:	f002 ff4b 	bl	8004440 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015aa:	f7ff f815 	bl	80005d8 <main>
  bx  lr    
 80015ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015b0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80015b4:	080055e4 	.word	0x080055e4
  ldr  r0, =_sdata
 80015b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80015bc:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80015c0:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80015c4:	200002b0 	.word	0x200002b0

080015c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015c8:	e7fe      	b.n	80015c8 <ADC_IRQHandler>

080015ca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ce:	2003      	movs	r0, #3
 80015d0:	f000 f94a 	bl	8001868 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015d4:	2000      	movs	r0, #0
 80015d6:	f000 f805 	bl	80015e4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80015da:	f7ff fdc5 	bl	8001168 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015ec:	4b12      	ldr	r3, [pc, #72]	; (8001638 <HAL_InitTick+0x54>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_InitTick+0x58>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	4619      	mov	r1, r3
 80015f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80015fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001602:	4618      	mov	r0, r3
 8001604:	f000 f965 	bl	80018d2 <HAL_SYSTICK_Config>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e00e      	b.n	8001630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b0f      	cmp	r3, #15
 8001616:	d80a      	bhi.n	800162e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001618:	2200      	movs	r2, #0
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	f04f 30ff 	mov.w	r0, #4294967295
 8001620:	f000 f92d 	bl	800187e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001624:	4a06      	ldr	r2, [pc, #24]	; (8001640 <HAL_InitTick+0x5c>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	e000      	b.n	8001630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000000 	.word	0x20000000
 800163c:	20000008 	.word	0x20000008
 8001640:	20000004 	.word	0x20000004

08001644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_IncTick+0x20>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_IncTick+0x24>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4413      	add	r3, r2
 8001654:	4a04      	ldr	r2, [pc, #16]	; (8001668 <HAL_IncTick+0x24>)
 8001656:	6013      	str	r3, [r2, #0]
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	20000008 	.word	0x20000008
 8001668:	200002a8 	.word	0x200002a8

0800166c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return uwTick;
 8001670:	4b03      	ldr	r3, [pc, #12]	; (8001680 <HAL_GetTick+0x14>)
 8001672:	681b      	ldr	r3, [r3, #0]
}
 8001674:	4618      	mov	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	200002a8 	.word	0x200002a8

08001684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800168c:	f7ff ffee 	bl	800166c <HAL_GetTick>
 8001690:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800169c:	d005      	beq.n	80016aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <HAL_Delay+0x40>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4413      	add	r3, r2
 80016a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016aa:	bf00      	nop
 80016ac:	f7ff ffde 	bl	800166c <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d8f7      	bhi.n	80016ac <HAL_Delay+0x28>
  {
  }
}
 80016bc:	bf00      	nop
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000008 	.word	0x20000008

080016c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d8:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <__NVIC_SetPriorityGrouping+0x40>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e4:	4013      	ands	r3, r2
 80016e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <__NVIC_SetPriorityGrouping+0x44>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f6:	4a04      	ldr	r2, [pc, #16]	; (8001708 <__NVIC_SetPriorityGrouping+0x40>)
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	60d3      	str	r3, [r2, #12]
}
 80016fc:	bf00      	nop
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00
 800170c:	05fa0000 	.word	0x05fa0000

08001710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001714:	4b04      	ldr	r3, [pc, #16]	; (8001728 <__NVIC_GetPriorityGrouping+0x18>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	0a1b      	lsrs	r3, r3, #8
 800171a:	f003 0307 	and.w	r3, r3, #7
}
 800171e:	4618      	mov	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	2b00      	cmp	r3, #0
 800173c:	db0b      	blt.n	8001756 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	f003 021f 	and.w	r2, r3, #31
 8001744:	4907      	ldr	r1, [pc, #28]	; (8001764 <__NVIC_EnableIRQ+0x38>)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	095b      	lsrs	r3, r3, #5
 800174c:	2001      	movs	r0, #1
 800174e:	fa00 f202 	lsl.w	r2, r0, r2
 8001752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000e100 	.word	0xe000e100

08001768 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	6039      	str	r1, [r7, #0]
 8001772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001778:	2b00      	cmp	r3, #0
 800177a:	db0a      	blt.n	8001792 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	b2da      	uxtb	r2, r3
 8001780:	490c      	ldr	r1, [pc, #48]	; (80017b4 <__NVIC_SetPriority+0x4c>)
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	0112      	lsls	r2, r2, #4
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	440b      	add	r3, r1
 800178c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001790:	e00a      	b.n	80017a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	b2da      	uxtb	r2, r3
 8001796:	4908      	ldr	r1, [pc, #32]	; (80017b8 <__NVIC_SetPriority+0x50>)
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	3b04      	subs	r3, #4
 80017a0:	0112      	lsls	r2, r2, #4
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	440b      	add	r3, r1
 80017a6:	761a      	strb	r2, [r3, #24]
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000e100 	.word	0xe000e100
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017bc:	b480      	push	{r7}
 80017be:	b089      	sub	sp, #36	; 0x24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f1c3 0307 	rsb	r3, r3, #7
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	bf28      	it	cs
 80017da:	2304      	movcs	r3, #4
 80017dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3304      	adds	r3, #4
 80017e2:	2b06      	cmp	r3, #6
 80017e4:	d902      	bls.n	80017ec <NVIC_EncodePriority+0x30>
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3b03      	subs	r3, #3
 80017ea:	e000      	b.n	80017ee <NVIC_EncodePriority+0x32>
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f0:	f04f 32ff 	mov.w	r2, #4294967295
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43da      	mvns	r2, r3
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	401a      	ands	r2, r3
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001804:	f04f 31ff 	mov.w	r1, #4294967295
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	fa01 f303 	lsl.w	r3, r1, r3
 800180e:	43d9      	mvns	r1, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001814:	4313      	orrs	r3, r2
         );
}
 8001816:	4618      	mov	r0, r3
 8001818:	3724      	adds	r7, #36	; 0x24
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
	...

08001824 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3b01      	subs	r3, #1
 8001830:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001834:	d301      	bcc.n	800183a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001836:	2301      	movs	r3, #1
 8001838:	e00f      	b.n	800185a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800183a:	4a0a      	ldr	r2, [pc, #40]	; (8001864 <SysTick_Config+0x40>)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3b01      	subs	r3, #1
 8001840:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001842:	210f      	movs	r1, #15
 8001844:	f04f 30ff 	mov.w	r0, #4294967295
 8001848:	f7ff ff8e 	bl	8001768 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800184c:	4b05      	ldr	r3, [pc, #20]	; (8001864 <SysTick_Config+0x40>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001852:	4b04      	ldr	r3, [pc, #16]	; (8001864 <SysTick_Config+0x40>)
 8001854:	2207      	movs	r2, #7
 8001856:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	e000e010 	.word	0xe000e010

08001868 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff ff29 	bl	80016c8 <__NVIC_SetPriorityGrouping>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800187e:	b580      	push	{r7, lr}
 8001880:	b086      	sub	sp, #24
 8001882:	af00      	add	r7, sp, #0
 8001884:	4603      	mov	r3, r0
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
 800188a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001890:	f7ff ff3e 	bl	8001710 <__NVIC_GetPriorityGrouping>
 8001894:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	68b9      	ldr	r1, [r7, #8]
 800189a:	6978      	ldr	r0, [r7, #20]
 800189c:	f7ff ff8e 	bl	80017bc <NVIC_EncodePriority>
 80018a0:	4602      	mov	r2, r0
 80018a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a6:	4611      	mov	r1, r2
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ff5d 	bl	8001768 <__NVIC_SetPriority>
}
 80018ae:	bf00      	nop
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b082      	sub	sp, #8
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	4603      	mov	r3, r0
 80018be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff31 	bl	800172c <__NVIC_EnableIRQ>
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff ffa2 	bl	8001824 <SysTick_Config>
 80018e0:	4603      	mov	r3, r0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b084      	sub	sp, #16
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80018f8:	f7ff feb8 	bl	800166c <HAL_GetTick>
 80018fc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d008      	beq.n	800191c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2280      	movs	r2, #128	; 0x80
 800190e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e052      	b.n	80019c2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 0216 	bic.w	r2, r2, #22
 800192a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	695a      	ldr	r2, [r3, #20]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800193a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	2b00      	cmp	r3, #0
 8001942:	d103      	bne.n	800194c <HAL_DMA_Abort+0x62>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001948:	2b00      	cmp	r3, #0
 800194a:	d007      	beq.n	800195c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f022 0208 	bic.w	r2, r2, #8
 800195a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f022 0201 	bic.w	r2, r2, #1
 800196a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800196c:	e013      	b.n	8001996 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800196e:	f7ff fe7d 	bl	800166c <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b05      	cmp	r3, #5
 800197a:	d90c      	bls.n	8001996 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2220      	movs	r2, #32
 8001980:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2203      	movs	r2, #3
 800198e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e015      	b.n	80019c2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1e4      	bne.n	800196e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a8:	223f      	movs	r2, #63	; 0x3f
 80019aa:	409a      	lsls	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b089      	sub	sp, #36	; 0x24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80019de:	2300      	movs	r3, #0
 80019e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
 80019ea:	e175      	b.n	8001cd8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80019ec:	2201      	movs	r2, #1
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	697a      	ldr	r2, [r7, #20]
 80019fc:	4013      	ands	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	f040 8164 	bne.w	8001cd2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d00b      	beq.n	8001a2a <HAL_GPIO_Init+0x5e>
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d007      	beq.n	8001a2a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a1e:	2b11      	cmp	r3, #17
 8001a20:	d003      	beq.n	8001a2a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b12      	cmp	r3, #18
 8001a28:	d130      	bne.n	8001a8c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	2203      	movs	r2, #3
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a60:	2201      	movs	r2, #1
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	091b      	lsrs	r3, r3, #4
 8001a76:	f003 0201 	and.w	r2, r3, #1
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	2203      	movs	r2, #3
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d003      	beq.n	8001acc <HAL_GPIO_Init+0x100>
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b12      	cmp	r3, #18
 8001aca:	d123      	bne.n	8001b14 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	08da      	lsrs	r2, r3, #3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3208      	adds	r2, #8
 8001ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	220f      	movs	r2, #15
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	691a      	ldr	r2, [r3, #16]
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	08da      	lsrs	r2, r3, #3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3208      	adds	r2, #8
 8001b0e:	69b9      	ldr	r1, [r7, #24]
 8001b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	2203      	movs	r2, #3
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0203 	and.w	r2, r3, #3
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f000 80be 	beq.w	8001cd2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b56:	4b65      	ldr	r3, [pc, #404]	; (8001cec <HAL_GPIO_Init+0x320>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	4a64      	ldr	r2, [pc, #400]	; (8001cec <HAL_GPIO_Init+0x320>)
 8001b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b60:	6453      	str	r3, [r2, #68]	; 0x44
 8001b62:	4b62      	ldr	r3, [pc, #392]	; (8001cec <HAL_GPIO_Init+0x320>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b6e:	4a60      	ldr	r2, [pc, #384]	; (8001cf0 <HAL_GPIO_Init+0x324>)
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	089b      	lsrs	r3, r3, #2
 8001b74:	3302      	adds	r3, #2
 8001b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	220f      	movs	r2, #15
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a57      	ldr	r2, [pc, #348]	; (8001cf4 <HAL_GPIO_Init+0x328>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d037      	beq.n	8001c0a <HAL_GPIO_Init+0x23e>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a56      	ldr	r2, [pc, #344]	; (8001cf8 <HAL_GPIO_Init+0x32c>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d031      	beq.n	8001c06 <HAL_GPIO_Init+0x23a>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a55      	ldr	r2, [pc, #340]	; (8001cfc <HAL_GPIO_Init+0x330>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d02b      	beq.n	8001c02 <HAL_GPIO_Init+0x236>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a54      	ldr	r2, [pc, #336]	; (8001d00 <HAL_GPIO_Init+0x334>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d025      	beq.n	8001bfe <HAL_GPIO_Init+0x232>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a53      	ldr	r2, [pc, #332]	; (8001d04 <HAL_GPIO_Init+0x338>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d01f      	beq.n	8001bfa <HAL_GPIO_Init+0x22e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a52      	ldr	r2, [pc, #328]	; (8001d08 <HAL_GPIO_Init+0x33c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d019      	beq.n	8001bf6 <HAL_GPIO_Init+0x22a>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a51      	ldr	r2, [pc, #324]	; (8001d0c <HAL_GPIO_Init+0x340>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d013      	beq.n	8001bf2 <HAL_GPIO_Init+0x226>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a50      	ldr	r2, [pc, #320]	; (8001d10 <HAL_GPIO_Init+0x344>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d00d      	beq.n	8001bee <HAL_GPIO_Init+0x222>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a4f      	ldr	r2, [pc, #316]	; (8001d14 <HAL_GPIO_Init+0x348>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d007      	beq.n	8001bea <HAL_GPIO_Init+0x21e>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a4e      	ldr	r2, [pc, #312]	; (8001d18 <HAL_GPIO_Init+0x34c>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d101      	bne.n	8001be6 <HAL_GPIO_Init+0x21a>
 8001be2:	2309      	movs	r3, #9
 8001be4:	e012      	b.n	8001c0c <HAL_GPIO_Init+0x240>
 8001be6:	230a      	movs	r3, #10
 8001be8:	e010      	b.n	8001c0c <HAL_GPIO_Init+0x240>
 8001bea:	2308      	movs	r3, #8
 8001bec:	e00e      	b.n	8001c0c <HAL_GPIO_Init+0x240>
 8001bee:	2307      	movs	r3, #7
 8001bf0:	e00c      	b.n	8001c0c <HAL_GPIO_Init+0x240>
 8001bf2:	2306      	movs	r3, #6
 8001bf4:	e00a      	b.n	8001c0c <HAL_GPIO_Init+0x240>
 8001bf6:	2305      	movs	r3, #5
 8001bf8:	e008      	b.n	8001c0c <HAL_GPIO_Init+0x240>
 8001bfa:	2304      	movs	r3, #4
 8001bfc:	e006      	b.n	8001c0c <HAL_GPIO_Init+0x240>
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e004      	b.n	8001c0c <HAL_GPIO_Init+0x240>
 8001c02:	2302      	movs	r3, #2
 8001c04:	e002      	b.n	8001c0c <HAL_GPIO_Init+0x240>
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <HAL_GPIO_Init+0x240>
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	69fa      	ldr	r2, [r7, #28]
 8001c0e:	f002 0203 	and.w	r2, r2, #3
 8001c12:	0092      	lsls	r2, r2, #2
 8001c14:	4093      	lsls	r3, r2
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c1c:	4934      	ldr	r1, [pc, #208]	; (8001cf0 <HAL_GPIO_Init+0x324>)
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	089b      	lsrs	r3, r3, #2
 8001c22:	3302      	adds	r3, #2
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c2a:	4b3c      	ldr	r3, [pc, #240]	; (8001d1c <HAL_GPIO_Init+0x350>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c4e:	4a33      	ldr	r2, [pc, #204]	; (8001d1c <HAL_GPIO_Init+0x350>)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c54:	4b31      	ldr	r3, [pc, #196]	; (8001d1c <HAL_GPIO_Init+0x350>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c78:	4a28      	ldr	r2, [pc, #160]	; (8001d1c <HAL_GPIO_Init+0x350>)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c7e:	4b27      	ldr	r3, [pc, #156]	; (8001d1c <HAL_GPIO_Init+0x350>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	43db      	mvns	r3, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ca2:	4a1e      	ldr	r2, [pc, #120]	; (8001d1c <HAL_GPIO_Init+0x350>)
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ca8:	4b1c      	ldr	r3, [pc, #112]	; (8001d1c <HAL_GPIO_Init+0x350>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ccc:	4a13      	ldr	r2, [pc, #76]	; (8001d1c <HAL_GPIO_Init+0x350>)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	61fb      	str	r3, [r7, #28]
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	2b0f      	cmp	r3, #15
 8001cdc:	f67f ae86 	bls.w	80019ec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	3724      	adds	r7, #36	; 0x24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40013800 	.word	0x40013800
 8001cf4:	40020000 	.word	0x40020000
 8001cf8:	40020400 	.word	0x40020400
 8001cfc:	40020800 	.word	0x40020800
 8001d00:	40020c00 	.word	0x40020c00
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40021400 	.word	0x40021400
 8001d0c:	40021800 	.word	0x40021800
 8001d10:	40021c00 	.word	0x40021c00
 8001d14:	40022000 	.word	0x40022000
 8001d18:	40022400 	.word	0x40022400
 8001d1c:	40013c00 	.word	0x40013c00

08001d20 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b087      	sub	sp, #28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8001d32:	2300      	movs	r3, #0
 8001d34:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	e0d9      	b.n	8001ef0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	f040 80c9 	bne.w	8001eea <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8001d58:	4a6a      	ldr	r2, [pc, #424]	; (8001f04 <HAL_GPIO_DeInit+0x1e4>)
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	089b      	lsrs	r3, r3, #2
 8001d5e:	3302      	adds	r3, #2
 8001d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d64:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	220f      	movs	r2, #15
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	68ba      	ldr	r2, [r7, #8]
 8001d76:	4013      	ands	r3, r2
 8001d78:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a62      	ldr	r2, [pc, #392]	; (8001f08 <HAL_GPIO_DeInit+0x1e8>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d037      	beq.n	8001df2 <HAL_GPIO_DeInit+0xd2>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a61      	ldr	r2, [pc, #388]	; (8001f0c <HAL_GPIO_DeInit+0x1ec>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d031      	beq.n	8001dee <HAL_GPIO_DeInit+0xce>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a60      	ldr	r2, [pc, #384]	; (8001f10 <HAL_GPIO_DeInit+0x1f0>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d02b      	beq.n	8001dea <HAL_GPIO_DeInit+0xca>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a5f      	ldr	r2, [pc, #380]	; (8001f14 <HAL_GPIO_DeInit+0x1f4>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d025      	beq.n	8001de6 <HAL_GPIO_DeInit+0xc6>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a5e      	ldr	r2, [pc, #376]	; (8001f18 <HAL_GPIO_DeInit+0x1f8>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d01f      	beq.n	8001de2 <HAL_GPIO_DeInit+0xc2>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a5d      	ldr	r2, [pc, #372]	; (8001f1c <HAL_GPIO_DeInit+0x1fc>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d019      	beq.n	8001dde <HAL_GPIO_DeInit+0xbe>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a5c      	ldr	r2, [pc, #368]	; (8001f20 <HAL_GPIO_DeInit+0x200>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d013      	beq.n	8001dda <HAL_GPIO_DeInit+0xba>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a5b      	ldr	r2, [pc, #364]	; (8001f24 <HAL_GPIO_DeInit+0x204>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d00d      	beq.n	8001dd6 <HAL_GPIO_DeInit+0xb6>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a5a      	ldr	r2, [pc, #360]	; (8001f28 <HAL_GPIO_DeInit+0x208>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d007      	beq.n	8001dd2 <HAL_GPIO_DeInit+0xb2>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a59      	ldr	r2, [pc, #356]	; (8001f2c <HAL_GPIO_DeInit+0x20c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d101      	bne.n	8001dce <HAL_GPIO_DeInit+0xae>
 8001dca:	2309      	movs	r3, #9
 8001dcc:	e012      	b.n	8001df4 <HAL_GPIO_DeInit+0xd4>
 8001dce:	230a      	movs	r3, #10
 8001dd0:	e010      	b.n	8001df4 <HAL_GPIO_DeInit+0xd4>
 8001dd2:	2308      	movs	r3, #8
 8001dd4:	e00e      	b.n	8001df4 <HAL_GPIO_DeInit+0xd4>
 8001dd6:	2307      	movs	r3, #7
 8001dd8:	e00c      	b.n	8001df4 <HAL_GPIO_DeInit+0xd4>
 8001dda:	2306      	movs	r3, #6
 8001ddc:	e00a      	b.n	8001df4 <HAL_GPIO_DeInit+0xd4>
 8001dde:	2305      	movs	r3, #5
 8001de0:	e008      	b.n	8001df4 <HAL_GPIO_DeInit+0xd4>
 8001de2:	2304      	movs	r3, #4
 8001de4:	e006      	b.n	8001df4 <HAL_GPIO_DeInit+0xd4>
 8001de6:	2303      	movs	r3, #3
 8001de8:	e004      	b.n	8001df4 <HAL_GPIO_DeInit+0xd4>
 8001dea:	2302      	movs	r3, #2
 8001dec:	e002      	b.n	8001df4 <HAL_GPIO_DeInit+0xd4>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <HAL_GPIO_DeInit+0xd4>
 8001df2:	2300      	movs	r3, #0
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	f002 0203 	and.w	r2, r2, #3
 8001dfa:	0092      	lsls	r2, r2, #2
 8001dfc:	4093      	lsls	r3, r2
 8001dfe:	68ba      	ldr	r2, [r7, #8]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d132      	bne.n	8001e6a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001e04:	4b4a      	ldr	r3, [pc, #296]	; (8001f30 <HAL_GPIO_DeInit+0x210>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	4948      	ldr	r1, [pc, #288]	; (8001f30 <HAL_GPIO_DeInit+0x210>)
 8001e0e:	4013      	ands	r3, r2
 8001e10:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001e12:	4b47      	ldr	r3, [pc, #284]	; (8001f30 <HAL_GPIO_DeInit+0x210>)
 8001e14:	685a      	ldr	r2, [r3, #4]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	4945      	ldr	r1, [pc, #276]	; (8001f30 <HAL_GPIO_DeInit+0x210>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001e20:	4b43      	ldr	r3, [pc, #268]	; (8001f30 <HAL_GPIO_DeInit+0x210>)
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	43db      	mvns	r3, r3
 8001e28:	4941      	ldr	r1, [pc, #260]	; (8001f30 <HAL_GPIO_DeInit+0x210>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001e2e:	4b40      	ldr	r3, [pc, #256]	; (8001f30 <HAL_GPIO_DeInit+0x210>)
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	43db      	mvns	r3, r3
 8001e36:	493e      	ldr	r1, [pc, #248]	; (8001f30 <HAL_GPIO_DeInit+0x210>)
 8001e38:	4013      	ands	r3, r2
 8001e3a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	220f      	movs	r2, #15
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8001e4c:	4a2d      	ldr	r2, [pc, #180]	; (8001f04 <HAL_GPIO_DeInit+0x1e4>)
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	089b      	lsrs	r3, r3, #2
 8001e52:	3302      	adds	r3, #2
 8001e54:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	43da      	mvns	r2, r3
 8001e5c:	4829      	ldr	r0, [pc, #164]	; (8001f04 <HAL_GPIO_DeInit+0x1e4>)
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	089b      	lsrs	r3, r3, #2
 8001e62:	400a      	ands	r2, r1
 8001e64:	3302      	adds	r3, #2
 8001e66:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	2103      	movs	r1, #3
 8001e74:	fa01 f303 	lsl.w	r3, r1, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	401a      	ands	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	08da      	lsrs	r2, r3, #3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3208      	adds	r2, #8
 8001e88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	220f      	movs	r2, #15
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	08d2      	lsrs	r2, r2, #3
 8001ea0:	4019      	ands	r1, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3208      	adds	r2, #8
 8001ea6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	2103      	movs	r1, #3
 8001eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	401a      	ands	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	401a      	ands	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	2103      	movs	r1, #3
 8001ede:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	401a      	ands	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	3301      	adds	r3, #1
 8001eee:	617b      	str	r3, [r7, #20]
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	2b0f      	cmp	r3, #15
 8001ef4:	f67f af22 	bls.w	8001d3c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001ef8:	bf00      	nop
 8001efa:	371c      	adds	r7, #28
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	40013800 	.word	0x40013800
 8001f08:	40020000 	.word	0x40020000
 8001f0c:	40020400 	.word	0x40020400
 8001f10:	40020800 	.word	0x40020800
 8001f14:	40020c00 	.word	0x40020c00
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40021400 	.word	0x40021400
 8001f20:	40021800 	.word	0x40021800
 8001f24:	40021c00 	.word	0x40021c00
 8001f28:	40022000 	.word	0x40022000
 8001f2c:	40022400 	.word	0x40022400
 8001f30:	40013c00 	.word	0x40013c00

08001f34 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f38:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a04      	ldr	r2, [pc, #16]	; (8001f50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f42:	6013      	str	r3, [r2, #0]
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	40007000 	.word	0x40007000

08001f54 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f5e:	4b23      	ldr	r3, [pc, #140]	; (8001fec <HAL_PWREx_EnableOverDrive+0x98>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	4a22      	ldr	r2, [pc, #136]	; (8001fec <HAL_PWREx_EnableOverDrive+0x98>)
 8001f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f68:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6a:	4b20      	ldr	r3, [pc, #128]	; (8001fec <HAL_PWREx_EnableOverDrive+0x98>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f72:	603b      	str	r3, [r7, #0]
 8001f74:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001f76:	4b1e      	ldr	r3, [pc, #120]	; (8001ff0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a1d      	ldr	r2, [pc, #116]	; (8001ff0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f80:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f82:	f7ff fb73 	bl	800166c <HAL_GetTick>
 8001f86:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f88:	e009      	b.n	8001f9e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f8a:	f7ff fb6f 	bl	800166c <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f98:	d901      	bls.n	8001f9e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e022      	b.n	8001fe4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f9e:	4b14      	ldr	r3, [pc, #80]	; (8001ff0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001faa:	d1ee      	bne.n	8001f8a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001fac:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a0f      	ldr	r2, [pc, #60]	; (8001ff0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fb8:	f7ff fb58 	bl	800166c <HAL_GetTick>
 8001fbc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001fbe:	e009      	b.n	8001fd4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001fc0:	f7ff fb54 	bl	800166c <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fce:	d901      	bls.n	8001fd4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e007      	b.n	8001fe4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001fd4:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001fe0:	d1ee      	bne.n	8001fc0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	40007000 	.word	0x40007000

08001ff4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af02      	add	r7, sp, #8
 8001ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001ffc:	f7ff fb36 	bl	800166c <HAL_GetTick>
 8002000:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d101      	bne.n	800200c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e067      	b.n	80020dc <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	d10b      	bne.n	8002030 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7ff f8c5 	bl	80011b0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002026:	f241 3188 	movw	r1, #5000	; 0x1388
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 fafd 	bl	800262a <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	3b01      	subs	r3, #1
 8002040:	021a      	lsls	r2, r3, #8
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	2120      	movs	r1, #32
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 faf5 	bl	8002646 <QSPI_WaitFlagStateUntilTimeout>
 800205c:	4603      	mov	r3, r0
 800205e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002060:	7afb      	ldrb	r3, [r7, #11]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d135      	bne.n	80020d2 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	4b1d      	ldr	r3, [pc, #116]	; (80020e4 <HAL_QSPI_Init+0xf0>)
 800206e:	4013      	ands	r3, r2
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	6852      	ldr	r2, [r2, #4]
 8002074:	0611      	lsls	r1, r2, #24
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	68d2      	ldr	r2, [r2, #12]
 800207a:	4311      	orrs	r1, r2
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	69d2      	ldr	r2, [r2, #28]
 8002080:	4311      	orrs	r1, r2
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6a12      	ldr	r2, [r2, #32]
 8002086:	4311      	orrs	r1, r2
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6812      	ldr	r2, [r2, #0]
 800208c:	430b      	orrs	r3, r1
 800208e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	4b14      	ldr	r3, [pc, #80]	; (80020e8 <HAL_QSPI_Init+0xf4>)
 8002098:	4013      	ands	r3, r2
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6912      	ldr	r2, [r2, #16]
 800209e:	0411      	lsls	r1, r2, #16
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	6952      	ldr	r2, [r2, #20]
 80020a4:	4311      	orrs	r1, r2
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6992      	ldr	r2, [r2, #24]
 80020aa:	4311      	orrs	r1, r2
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	6812      	ldr	r2, [r2, #0]
 80020b0:	430b      	orrs	r3, r1
 80020b2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f042 0201 	orr.w	r2, r2, #1
 80020c2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80020da:	7afb      	ldrb	r3, [r7, #11]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	00ffff2f 	.word	0x00ffff2f
 80020e8:	ffe0f8fe 	.word	0xffe0f8fe

080020ec <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e016      	b.n	800212c <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0201 	bic.w	r2, r2, #1
 800210c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff f8de 	bl	80012d0 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b088      	sub	sp, #32
 8002138:	af02      	add	r7, sp, #8
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002140:	f7ff fa94 	bl	800166c <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b01      	cmp	r3, #1
 8002150:	d101      	bne.n	8002156 <HAL_QSPI_Command+0x22>
 8002152:	2302      	movs	r3, #2
 8002154:	e048      	b.n	80021e8 <HAL_QSPI_Command+0xb4>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b01      	cmp	r3, #1
 8002168:	d137      	bne.n	80021da <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2202      	movs	r2, #2
 8002174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	2200      	movs	r2, #0
 8002180:	2120      	movs	r1, #32
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f000 fa5f 	bl	8002646 <QSPI_WaitFlagStateUntilTimeout>
 8002188:	4603      	mov	r3, r0
 800218a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800218c:	7dfb      	ldrb	r3, [r7, #23]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d125      	bne.n	80021de <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8002192:	2200      	movs	r2, #0
 8002194:	68b9      	ldr	r1, [r7, #8]
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f000 fa8c 	bl	80026b4 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d115      	bne.n	80021d0 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	2201      	movs	r2, #1
 80021ac:	2102      	movs	r1, #2
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 fa49 	bl	8002646 <QSPI_WaitFlagStateUntilTimeout>
 80021b4:	4603      	mov	r3, r0
 80021b6:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80021b8:	7dfb      	ldrb	r3, [r7, #23]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10f      	bne.n	80021de <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2202      	movs	r2, #2
 80021c4:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80021ce:	e006      	b.n	80021de <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80021d8:	e001      	b.n	80021de <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80021da:	2302      	movs	r3, #2
 80021dc:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80021e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08a      	sub	sp, #40	; 0x28
 80021f4:	af02      	add	r7, sp, #8
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021fc:	2300      	movs	r3, #0
 80021fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8002200:	f7ff fa34 	bl	800166c <HAL_GetTick>
 8002204:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	3320      	adds	r3, #32
 800220c:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b01      	cmp	r3, #1
 8002218:	d101      	bne.n	800221e <HAL_QSPI_Transmit+0x2e>
 800221a:	2302      	movs	r3, #2
 800221c:	e07b      	b.n	8002316 <HAL_QSPI_Transmit+0x126>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b01      	cmp	r3, #1
 8002230:	d16a      	bne.n	8002308 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d05b      	beq.n	80022f6 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2212      	movs	r2, #18
 8002242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	1c5a      	adds	r2, r3, #1
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	1c5a      	adds	r2, r3, #1
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	695a      	ldr	r2, [r3, #20]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002272:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8002274:	e01b      	b.n	80022ae <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	2201      	movs	r2, #1
 800227e:	2104      	movs	r1, #4
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	f000 f9e0 	bl	8002646 <QSPI_WaitFlagStateUntilTimeout>
 8002286:	4603      	mov	r3, r0
 8002288:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800228a:	7ffb      	ldrb	r3, [r7, #31]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d113      	bne.n	80022b8 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	781a      	ldrb	r2, [r3, #0]
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	1c5a      	adds	r2, r3, #1
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a8:	1e5a      	subs	r2, r3, #1
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1df      	bne.n	8002276 <HAL_QSPI_Transmit+0x86>
 80022b6:	e000      	b.n	80022ba <HAL_QSPI_Transmit+0xca>
          break;
 80022b8:	bf00      	nop
      }

      if (status == HAL_OK)
 80022ba:	7ffb      	ldrb	r3, [r7, #31]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d115      	bne.n	80022ec <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	2201      	movs	r2, #1
 80022c8:	2102      	movs	r1, #2
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 f9bb 	bl	8002646 <QSPI_WaitFlagStateUntilTimeout>
 80022d0:	4603      	mov	r3, r0
 80022d2:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80022d4:	7ffb      	ldrb	r3, [r7, #31]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d108      	bne.n	80022ec <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2202      	movs	r2, #2
 80022e0:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f000 f934 	bl	8002550 <HAL_QSPI_Abort>
 80022e8:	4603      	mov	r3, r0
 80022ea:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80022f4:	e00a      	b.n	800230c <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fa:	f043 0208 	orr.w	r2, r3, #8
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	77fb      	strb	r3, [r7, #31]
 8002306:	e001      	b.n	800230c <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8002308:	2302      	movs	r3, #2
 800230a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8002314:	7ffb      	ldrb	r3, [r7, #31]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3720      	adds	r7, #32
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b08a      	sub	sp, #40	; 0x28
 8002322:	af02      	add	r7, sp, #8
 8002324:	60f8      	str	r0, [r7, #12]
 8002326:	60b9      	str	r1, [r7, #8]
 8002328:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800232a:	2300      	movs	r3, #0
 800232c:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800232e:	f7ff f99d 	bl	800166c <HAL_GetTick>
 8002332:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	3320      	adds	r3, #32
 8002342:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b01      	cmp	r3, #1
 800234e:	d101      	bne.n	8002354 <HAL_QSPI_Receive+0x36>
 8002350:	2302      	movs	r3, #2
 8002352:	e082      	b.n	800245a <HAL_QSPI_Receive+0x13c>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b01      	cmp	r3, #1
 8002366:	d171      	bne.n	800244c <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d062      	beq.n	800243a <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2222      	movs	r2, #34	; 0x22
 8002378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80023ac:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 80023b6:	e01c      	b.n	80023f2 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	2201      	movs	r2, #1
 80023c0:	2106      	movs	r1, #6
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 f93f 	bl	8002646 <QSPI_WaitFlagStateUntilTimeout>
 80023c8:	4603      	mov	r3, r0
 80023ca:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 80023cc:	7ffb      	ldrb	r3, [r7, #31]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d114      	bne.n	80023fc <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	7812      	ldrb	r2, [r2, #0]
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	1c5a      	adds	r2, r3, #1
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ec:	1e5a      	subs	r2, r3, #1
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1de      	bne.n	80023b8 <HAL_QSPI_Receive+0x9a>
 80023fa:	e000      	b.n	80023fe <HAL_QSPI_Receive+0xe0>
          break;
 80023fc:	bf00      	nop
      }

      if (status == HAL_OK)
 80023fe:	7ffb      	ldrb	r3, [r7, #31]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d115      	bne.n	8002430 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	2201      	movs	r2, #1
 800240c:	2102      	movs	r1, #2
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 f919 	bl	8002646 <QSPI_WaitFlagStateUntilTimeout>
 8002414:	4603      	mov	r3, r0
 8002416:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8002418:	7ffb      	ldrb	r3, [r7, #31]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d108      	bne.n	8002430 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2202      	movs	r2, #2
 8002424:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 f892 	bl	8002550 <HAL_QSPI_Abort>
 800242c:	4603      	mov	r3, r0
 800242e:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002438:	e00a      	b.n	8002450 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243e:	f043 0208 	orr.w	r2, r3, #8
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	77fb      	strb	r3, [r7, #31]
 800244a:	e001      	b.n	8002450 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 800244c:	2302      	movs	r3, #2
 800244e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8002458:	7ffb      	ldrb	r3, [r7, #31]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3720      	adds	r7, #32
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b088      	sub	sp, #32
 8002466:	af02      	add	r7, sp, #8
 8002468:	60f8      	str	r0, [r7, #12]
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	607a      	str	r2, [r7, #4]
 800246e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002470:	f7ff f8fc 	bl	800166c <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b01      	cmp	r3, #1
 8002480:	d101      	bne.n	8002486 <HAL_QSPI_AutoPolling+0x24>
 8002482:	2302      	movs	r3, #2
 8002484:	e060      	b.n	8002548 <HAL_QSPI_AutoPolling+0xe6>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b01      	cmp	r3, #1
 8002498:	d14f      	bne.n	800253a <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2242      	movs	r2, #66	; 0x42
 80024a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	2200      	movs	r2, #0
 80024b0:	2120      	movs	r1, #32
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 f8c7 	bl	8002646 <QSPI_WaitFlagStateUntilTimeout>
 80024b8:	4603      	mov	r3, r0
 80024ba:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80024bc:	7dfb      	ldrb	r3, [r7, #23]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d13d      	bne.n	800253e <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6812      	ldr	r2, [r2, #0]
 80024ca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6852      	ldr	r2, [r2, #4]
 80024d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6892      	ldr	r2, [r2, #8]
 80024de:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	431a      	orrs	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80024f8:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8002502:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002506:	68b9      	ldr	r1, [r7, #8]
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f000 f8d3 	bl	80026b4 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	2201      	movs	r2, #1
 8002516:	2108      	movs	r1, #8
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f000 f894 	bl	8002646 <QSPI_WaitFlagStateUntilTimeout>
 800251e:	4603      	mov	r3, r0
 8002520:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8002522:	7dfb      	ldrb	r3, [r7, #23]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10a      	bne.n	800253e <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2208      	movs	r2, #8
 800252e:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002538:	e001      	b.n	800253e <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800253a:	2302      	movs	r3, #2
 800253c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8002546:	7dfb      	ldrb	r3, [r7, #23]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3718      	adds	r7, #24
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af02      	add	r7, sp, #8
 8002556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002558:	2300      	movs	r3, #0
 800255a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800255c:	f7ff f886 	bl	800166c <HAL_GetTick>
 8002560:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002568:	b2db      	uxtb	r3, r3
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d056      	beq.n	8002620 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	d017      	beq.n	80025b8 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0204 	bic.w	r2, r2, #4
 8002596:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff f9a4 	bl	80018ea <HAL_DMA_Abort>
 80025a2:	4603      	mov	r3, r0
 80025a4:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b0:	f043 0204 	orr.w	r2, r3, #4
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0202 	orr.w	r2, r2, #2
 80025c6:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2201      	movs	r2, #1
 80025d2:	2102      	movs	r1, #2
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 f836 	bl	8002646 <QSPI_WaitFlagStateUntilTimeout>
 80025da:	4603      	mov	r3, r0
 80025dc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80025de:	7bfb      	ldrb	r3, [r7, #15]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10e      	bne.n	8002602 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2202      	movs	r2, #2
 80025ea:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	2200      	movs	r2, #0
 80025f6:	2120      	movs	r1, #32
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f824 	bl	8002646 <QSPI_WaitFlagStateUntilTimeout>
 80025fe:	4603      	mov	r3, r0
 8002600:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002602:	7bfb      	ldrb	r3, [r7, #15]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10b      	bne.n	8002620 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	695a      	ldr	r2, [r3, #20]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002616:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 8002620:	7bfb      	ldrb	r3, [r7, #15]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	649a      	str	r2, [r3, #72]	; 0x48
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b084      	sub	sp, #16
 800264a:	af00      	add	r7, sp, #0
 800264c:	60f8      	str	r0, [r7, #12]
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	603b      	str	r3, [r7, #0]
 8002652:	4613      	mov	r3, r2
 8002654:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002656:	e01a      	b.n	800268e <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800265e:	d016      	beq.n	800268e <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002660:	f7ff f804 	bl	800166c <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	429a      	cmp	r2, r3
 800266e:	d302      	bcc.n	8002676 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10b      	bne.n	800268e <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2204      	movs	r2, #4
 800267a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002682:	f043 0201 	orr.w	r2, r3, #1
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e00e      	b.n	80026ac <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	4013      	ands	r3, r2
 8002698:	2b00      	cmp	r3, #0
 800269a:	bf14      	ite	ne
 800269c:	2301      	movne	r3, #1
 800269e:	2300      	moveq	r3, #0
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	461a      	mov	r2, r3
 80026a4:	79fb      	ldrb	r3, [r7, #7]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d1d6      	bne.n	8002658 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d009      	beq.n	80026dc <QSPI_Config+0x28>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80026ce:	d005      	beq.n	80026dc <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	3a01      	subs	r2, #1
 80026da:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 80b9 	beq.w	8002858 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d05f      	beq.n	80027ae <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	6892      	ldr	r2, [r2, #8]
 80026f6:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d031      	beq.n	8002764 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002708:	431a      	orrs	r2, r3
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800270e:	431a      	orrs	r2, r3
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	431a      	orrs	r2, r3
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	049b      	lsls	r3, r3, #18
 800271c:	431a      	orrs	r2, r3
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	431a      	orrs	r2, r3
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	431a      	orrs	r2, r3
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	431a      	orrs	r2, r3
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	431a      	orrs	r2, r3
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	431a      	orrs	r2, r3
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	ea42 0103 	orr.w	r1, r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	430a      	orrs	r2, r1
 800274c:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002754:	f000 812e 	beq.w	80029b4 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	6852      	ldr	r2, [r2, #4]
 8002760:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8002762:	e127      	b.n	80029b4 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276c:	431a      	orrs	r2, r3
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002772:	431a      	orrs	r2, r3
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002778:	431a      	orrs	r2, r3
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	049b      	lsls	r3, r3, #18
 8002780:	431a      	orrs	r2, r3
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	431a      	orrs	r2, r3
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	431a      	orrs	r2, r3
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	431a      	orrs	r2, r3
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	431a      	orrs	r2, r3
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	ea42 0103 	orr.w	r1, r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	615a      	str	r2, [r3, #20]
}
 80027ac:	e102      	b.n	80029b4 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d02e      	beq.n	8002814 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	431a      	orrs	r2, r3
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c4:	431a      	orrs	r2, r3
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	431a      	orrs	r2, r3
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	049b      	lsls	r3, r3, #18
 80027d2:	431a      	orrs	r2, r3
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	431a      	orrs	r2, r3
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	431a      	orrs	r2, r3
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	69db      	ldr	r3, [r3, #28]
 80027e4:	431a      	orrs	r2, r3
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	431a      	orrs	r2, r3
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	ea42 0103 	orr.w	r1, r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002804:	f000 80d6 	beq.w	80029b4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	6852      	ldr	r2, [r2, #4]
 8002810:	619a      	str	r2, [r3, #24]
}
 8002812:	e0cf      	b.n	80029b4 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281c:	431a      	orrs	r2, r3
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002822:	431a      	orrs	r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	431a      	orrs	r2, r3
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	049b      	lsls	r3, r3, #18
 8002830:	431a      	orrs	r2, r3
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	431a      	orrs	r2, r3
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	69db      	ldr	r3, [r3, #28]
 800283c:	431a      	orrs	r2, r3
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	431a      	orrs	r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	ea42 0103 	orr.w	r1, r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	430a      	orrs	r2, r1
 8002854:	615a      	str	r2, [r3, #20]
}
 8002856:	e0ad      	b.n	80029b4 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d058      	beq.n	8002912 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	6892      	ldr	r2, [r2, #8]
 8002868:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d02d      	beq.n	80028ce <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	431a      	orrs	r2, r3
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002880:	431a      	orrs	r2, r3
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002886:	431a      	orrs	r2, r3
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	049b      	lsls	r3, r3, #18
 800288e:	431a      	orrs	r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	431a      	orrs	r2, r3
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	431a      	orrs	r2, r3
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	431a      	orrs	r2, r3
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	431a      	orrs	r2, r3
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	ea42 0103 	orr.w	r1, r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80028c0:	d078      	beq.n	80029b4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	6852      	ldr	r2, [r2, #4]
 80028ca:	619a      	str	r2, [r3, #24]
}
 80028cc:	e072      	b.n	80029b4 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	431a      	orrs	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028dc:	431a      	orrs	r2, r3
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	431a      	orrs	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	049b      	lsls	r3, r3, #18
 80028ea:	431a      	orrs	r2, r3
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	431a      	orrs	r2, r3
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	431a      	orrs	r2, r3
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	431a      	orrs	r2, r3
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	ea42 0103 	orr.w	r1, r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	430a      	orrs	r2, r1
 800290e:	615a      	str	r2, [r3, #20]
}
 8002910:	e050      	b.n	80029b4 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d02a      	beq.n	8002970 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	431a      	orrs	r2, r3
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002928:	431a      	orrs	r2, r3
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292e:	431a      	orrs	r2, r3
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	049b      	lsls	r3, r3, #18
 8002936:	431a      	orrs	r2, r3
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	431a      	orrs	r2, r3
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	431a      	orrs	r2, r3
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	69db      	ldr	r3, [r3, #28]
 8002948:	431a      	orrs	r2, r3
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	ea42 0103 	orr.w	r1, r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	430a      	orrs	r2, r1
 800295a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002962:	d027      	beq.n	80029b4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68ba      	ldr	r2, [r7, #8]
 800296a:	6852      	ldr	r2, [r2, #4]
 800296c:	619a      	str	r2, [r3, #24]
}
 800296e:	e021      	b.n	80029b4 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	2b00      	cmp	r3, #0
 8002976:	d01d      	beq.n	80029b4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002980:	431a      	orrs	r2, r3
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002986:	431a      	orrs	r2, r3
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298c:	431a      	orrs	r2, r3
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	049b      	lsls	r3, r3, #18
 8002994:	431a      	orrs	r2, r3
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	431a      	orrs	r2, r3
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	431a      	orrs	r2, r3
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	ea42 0103 	orr.w	r1, r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	615a      	str	r2, [r3, #20]
}
 80029b4:	bf00      	nop
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80029c8:	2300      	movs	r3, #0
 80029ca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e291      	b.n	8002efa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f000 8087 	beq.w	8002af2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029e4:	4b96      	ldr	r3, [pc, #600]	; (8002c40 <HAL_RCC_OscConfig+0x280>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 030c 	and.w	r3, r3, #12
 80029ec:	2b04      	cmp	r3, #4
 80029ee:	d00c      	beq.n	8002a0a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029f0:	4b93      	ldr	r3, [pc, #588]	; (8002c40 <HAL_RCC_OscConfig+0x280>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f003 030c 	and.w	r3, r3, #12
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	d112      	bne.n	8002a22 <HAL_RCC_OscConfig+0x62>
 80029fc:	4b90      	ldr	r3, [pc, #576]	; (8002c40 <HAL_RCC_OscConfig+0x280>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a08:	d10b      	bne.n	8002a22 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a0a:	4b8d      	ldr	r3, [pc, #564]	; (8002c40 <HAL_RCC_OscConfig+0x280>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d06c      	beq.n	8002af0 <HAL_RCC_OscConfig+0x130>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d168      	bne.n	8002af0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e26b      	b.n	8002efa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a2a:	d106      	bne.n	8002a3a <HAL_RCC_OscConfig+0x7a>
 8002a2c:	4b84      	ldr	r3, [pc, #528]	; (8002c40 <HAL_RCC_OscConfig+0x280>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a83      	ldr	r2, [pc, #524]	; (8002c40 <HAL_RCC_OscConfig+0x280>)
 8002a32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a36:	6013      	str	r3, [r2, #0]
 8002a38:	e02e      	b.n	8002a98 <HAL_RCC_OscConfig+0xd8>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10c      	bne.n	8002a5c <HAL_RCC_OscConfig+0x9c>
 8002a42:	4b7f      	ldr	r3, [pc, #508]	; (8002c40 <HAL_RCC_OscConfig+0x280>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a7e      	ldr	r2, [pc, #504]	; (8002c40 <HAL_RCC_OscConfig+0x280>)
 8002a48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a4c:	6013      	str	r3, [r2, #0]
 8002a4e:	4b7c      	ldr	r3, [pc, #496]	; (8002c40 <HAL_RCC_OscConfig+0x280>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a7b      	ldr	r2, [pc, #492]	; (8002c40 <HAL_RCC_OscConfig+0x280>)
 8002a54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	e01d      	b.n	8002a98 <HAL_RCC_OscConfig+0xd8>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a64:	d10c      	bne.n	8002a80 <HAL_RCC_OscConfig+0xc0>
 8002a66:	4b76      	ldr	r3, [pc, #472]	; (8002c40 <HAL_RCC_OscConfig+0x280>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a75      	ldr	r2, [pc, #468]	; (8002c40 <HAL_RCC_OscConfig+0x280>)
 8002a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a70:	6013      	str	r3, [r2, #0]
 8002a72:	4b73      	ldr	r3, [pc, #460]	; (8002c40 <HAL_RCC_OscConfig+0x280>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a72      	ldr	r2, [pc, #456]	; (8002c40 <HAL_RCC_OscConfig+0x280>)
 8002a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	e00b      	b.n	8002a98 <HAL_RCC_OscConfig+0xd8>
 8002a80:	4b6f      	ldr	r3, [pc, #444]	; (8002c40 <HAL_RCC_OscConfig+0x280>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a6e      	ldr	r2, [pc, #440]	; (8002c40 <HAL_RCC_OscConfig+0x280>)
 8002a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a8a:	6013      	str	r3, [r2, #0]
 8002a8c:	4b6c      	ldr	r3, [pc, #432]	; (8002c40 <HAL_RCC_OscConfig+0x280>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a6b      	ldr	r2, [pc, #428]	; (8002c40 <HAL_RCC_OscConfig+0x280>)
 8002a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d013      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa0:	f7fe fde4 	bl	800166c <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa8:	f7fe fde0 	bl	800166c <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b64      	cmp	r3, #100	; 0x64
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e21f      	b.n	8002efa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aba:	4b61      	ldr	r3, [pc, #388]	; (8002c40 <HAL_RCC_OscConfig+0x280>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0xe8>
 8002ac6:	e014      	b.n	8002af2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac8:	f7fe fdd0 	bl	800166c <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ad0:	f7fe fdcc 	bl	800166c <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b64      	cmp	r3, #100	; 0x64
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e20b      	b.n	8002efa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ae2:	4b57      	ldr	r3, [pc, #348]	; (8002c40 <HAL_RCC_OscConfig+0x280>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f0      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x110>
 8002aee:	e000      	b.n	8002af2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d069      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002afe:	4b50      	ldr	r3, [pc, #320]	; (8002c40 <HAL_RCC_OscConfig+0x280>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 030c 	and.w	r3, r3, #12
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00b      	beq.n	8002b22 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b0a:	4b4d      	ldr	r3, [pc, #308]	; (8002c40 <HAL_RCC_OscConfig+0x280>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 030c 	and.w	r3, r3, #12
 8002b12:	2b08      	cmp	r3, #8
 8002b14:	d11c      	bne.n	8002b50 <HAL_RCC_OscConfig+0x190>
 8002b16:	4b4a      	ldr	r3, [pc, #296]	; (8002c40 <HAL_RCC_OscConfig+0x280>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d116      	bne.n	8002b50 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b22:	4b47      	ldr	r3, [pc, #284]	; (8002c40 <HAL_RCC_OscConfig+0x280>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d005      	beq.n	8002b3a <HAL_RCC_OscConfig+0x17a>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d001      	beq.n	8002b3a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e1df      	b.n	8002efa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b3a:	4b41      	ldr	r3, [pc, #260]	; (8002c40 <HAL_RCC_OscConfig+0x280>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	493d      	ldr	r1, [pc, #244]	; (8002c40 <HAL_RCC_OscConfig+0x280>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b4e:	e040      	b.n	8002bd2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d023      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b58:	4b39      	ldr	r3, [pc, #228]	; (8002c40 <HAL_RCC_OscConfig+0x280>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a38      	ldr	r2, [pc, #224]	; (8002c40 <HAL_RCC_OscConfig+0x280>)
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b64:	f7fe fd82 	bl	800166c <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b6c:	f7fe fd7e 	bl	800166c <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e1bd      	b.n	8002efa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b7e:	4b30      	ldr	r3, [pc, #192]	; (8002c40 <HAL_RCC_OscConfig+0x280>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b8a:	4b2d      	ldr	r3, [pc, #180]	; (8002c40 <HAL_RCC_OscConfig+0x280>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	4929      	ldr	r1, [pc, #164]	; (8002c40 <HAL_RCC_OscConfig+0x280>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	600b      	str	r3, [r1, #0]
 8002b9e:	e018      	b.n	8002bd2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ba0:	4b27      	ldr	r3, [pc, #156]	; (8002c40 <HAL_RCC_OscConfig+0x280>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a26      	ldr	r2, [pc, #152]	; (8002c40 <HAL_RCC_OscConfig+0x280>)
 8002ba6:	f023 0301 	bic.w	r3, r3, #1
 8002baa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bac:	f7fe fd5e 	bl	800166c <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb4:	f7fe fd5a 	bl	800166c <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e199      	b.n	8002efa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bc6:	4b1e      	ldr	r3, [pc, #120]	; (8002c40 <HAL_RCC_OscConfig+0x280>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f0      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d038      	beq.n	8002c50 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d019      	beq.n	8002c1a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002be6:	4b16      	ldr	r3, [pc, #88]	; (8002c40 <HAL_RCC_OscConfig+0x280>)
 8002be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bea:	4a15      	ldr	r2, [pc, #84]	; (8002c40 <HAL_RCC_OscConfig+0x280>)
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf2:	f7fe fd3b 	bl	800166c <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bfa:	f7fe fd37 	bl	800166c <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e176      	b.n	8002efa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <HAL_RCC_OscConfig+0x280>)
 8002c0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0f0      	beq.n	8002bfa <HAL_RCC_OscConfig+0x23a>
 8002c18:	e01a      	b.n	8002c50 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c1a:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <HAL_RCC_OscConfig+0x280>)
 8002c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c1e:	4a08      	ldr	r2, [pc, #32]	; (8002c40 <HAL_RCC_OscConfig+0x280>)
 8002c20:	f023 0301 	bic.w	r3, r3, #1
 8002c24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c26:	f7fe fd21 	bl	800166c <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c2c:	e00a      	b.n	8002c44 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c2e:	f7fe fd1d 	bl	800166c <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d903      	bls.n	8002c44 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e15c      	b.n	8002efa <HAL_RCC_OscConfig+0x53a>
 8002c40:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c44:	4b91      	ldr	r3, [pc, #580]	; (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1ee      	bne.n	8002c2e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 80a4 	beq.w	8002da6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c5e:	4b8b      	ldr	r3, [pc, #556]	; (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10d      	bne.n	8002c86 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c6a:	4b88      	ldr	r3, [pc, #544]	; (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	4a87      	ldr	r2, [pc, #540]	; (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c74:	6413      	str	r3, [r2, #64]	; 0x40
 8002c76:	4b85      	ldr	r3, [pc, #532]	; (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7e:	60bb      	str	r3, [r7, #8]
 8002c80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c82:	2301      	movs	r3, #1
 8002c84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c86:	4b82      	ldr	r3, [pc, #520]	; (8002e90 <HAL_RCC_OscConfig+0x4d0>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d118      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002c92:	4b7f      	ldr	r3, [pc, #508]	; (8002e90 <HAL_RCC_OscConfig+0x4d0>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a7e      	ldr	r2, [pc, #504]	; (8002e90 <HAL_RCC_OscConfig+0x4d0>)
 8002c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c9e:	f7fe fce5 	bl	800166c <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca6:	f7fe fce1 	bl	800166c <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b64      	cmp	r3, #100	; 0x64
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e120      	b.n	8002efa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cb8:	4b75      	ldr	r3, [pc, #468]	; (8002e90 <HAL_RCC_OscConfig+0x4d0>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0f0      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d106      	bne.n	8002cda <HAL_RCC_OscConfig+0x31a>
 8002ccc:	4b6f      	ldr	r3, [pc, #444]	; (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd0:	4a6e      	ldr	r2, [pc, #440]	; (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002cd2:	f043 0301 	orr.w	r3, r3, #1
 8002cd6:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd8:	e02d      	b.n	8002d36 <HAL_RCC_OscConfig+0x376>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10c      	bne.n	8002cfc <HAL_RCC_OscConfig+0x33c>
 8002ce2:	4b6a      	ldr	r3, [pc, #424]	; (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce6:	4a69      	ldr	r2, [pc, #420]	; (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002ce8:	f023 0301 	bic.w	r3, r3, #1
 8002cec:	6713      	str	r3, [r2, #112]	; 0x70
 8002cee:	4b67      	ldr	r3, [pc, #412]	; (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf2:	4a66      	ldr	r2, [pc, #408]	; (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002cf4:	f023 0304 	bic.w	r3, r3, #4
 8002cf8:	6713      	str	r3, [r2, #112]	; 0x70
 8002cfa:	e01c      	b.n	8002d36 <HAL_RCC_OscConfig+0x376>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	2b05      	cmp	r3, #5
 8002d02:	d10c      	bne.n	8002d1e <HAL_RCC_OscConfig+0x35e>
 8002d04:	4b61      	ldr	r3, [pc, #388]	; (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d08:	4a60      	ldr	r2, [pc, #384]	; (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002d0a:	f043 0304 	orr.w	r3, r3, #4
 8002d0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d10:	4b5e      	ldr	r3, [pc, #376]	; (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d14:	4a5d      	ldr	r2, [pc, #372]	; (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002d16:	f043 0301 	orr.w	r3, r3, #1
 8002d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d1c:	e00b      	b.n	8002d36 <HAL_RCC_OscConfig+0x376>
 8002d1e:	4b5b      	ldr	r3, [pc, #364]	; (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d22:	4a5a      	ldr	r2, [pc, #360]	; (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002d24:	f023 0301 	bic.w	r3, r3, #1
 8002d28:	6713      	str	r3, [r2, #112]	; 0x70
 8002d2a:	4b58      	ldr	r3, [pc, #352]	; (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2e:	4a57      	ldr	r2, [pc, #348]	; (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002d30:	f023 0304 	bic.w	r3, r3, #4
 8002d34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d015      	beq.n	8002d6a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d3e:	f7fe fc95 	bl	800166c <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d44:	e00a      	b.n	8002d5c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d46:	f7fe fc91 	bl	800166c <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e0ce      	b.n	8002efa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d5c:	4b4b      	ldr	r3, [pc, #300]	; (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0ee      	beq.n	8002d46 <HAL_RCC_OscConfig+0x386>
 8002d68:	e014      	b.n	8002d94 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d6a:	f7fe fc7f 	bl	800166c <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d70:	e00a      	b.n	8002d88 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d72:	f7fe fc7b 	bl	800166c <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e0b8      	b.n	8002efa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d88:	4b40      	ldr	r3, [pc, #256]	; (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1ee      	bne.n	8002d72 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d94:	7dfb      	ldrb	r3, [r7, #23]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d105      	bne.n	8002da6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d9a:	4b3c      	ldr	r3, [pc, #240]	; (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	4a3b      	ldr	r2, [pc, #236]	; (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002da0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002da4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 80a4 	beq.w	8002ef8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002db0:	4b36      	ldr	r3, [pc, #216]	; (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 030c 	and.w	r3, r3, #12
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d06b      	beq.n	8002e94 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d149      	bne.n	8002e58 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc4:	4b31      	ldr	r3, [pc, #196]	; (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a30      	ldr	r2, [pc, #192]	; (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002dca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd0:	f7fe fc4c 	bl	800166c <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd8:	f7fe fc48 	bl	800166c <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e087      	b.n	8002efa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dea:	4b28      	ldr	r3, [pc, #160]	; (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f0      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69da      	ldr	r2, [r3, #28]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	019b      	lsls	r3, r3, #6
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0c:	085b      	lsrs	r3, r3, #1
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	041b      	lsls	r3, r3, #16
 8002e12:	431a      	orrs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e18:	061b      	lsls	r3, r3, #24
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	4a1b      	ldr	r2, [pc, #108]	; (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002e1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e22:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e24:	4b19      	ldr	r3, [pc, #100]	; (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a18      	ldr	r2, [pc, #96]	; (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002e2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e30:	f7fe fc1c 	bl	800166c <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e38:	f7fe fc18 	bl	800166c <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e057      	b.n	8002efa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e4a:	4b10      	ldr	r3, [pc, #64]	; (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0f0      	beq.n	8002e38 <HAL_RCC_OscConfig+0x478>
 8002e56:	e04f      	b.n	8002ef8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e58:	4b0c      	ldr	r3, [pc, #48]	; (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a0b      	ldr	r2, [pc, #44]	; (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002e5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e64:	f7fe fc02 	bl	800166c <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e6c:	f7fe fbfe 	bl	800166c <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e03d      	b.n	8002efa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e7e:	4b03      	ldr	r3, [pc, #12]	; (8002e8c <HAL_RCC_OscConfig+0x4cc>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x4ac>
 8002e8a:	e035      	b.n	8002ef8 <HAL_RCC_OscConfig+0x538>
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002e94:	4b1b      	ldr	r3, [pc, #108]	; (8002f04 <HAL_RCC_OscConfig+0x544>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d028      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d121      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d11a      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002eca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d111      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eda:	085b      	lsrs	r3, r3, #1
 8002edc:	3b01      	subs	r3, #1
 8002ede:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d107      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d001      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e000      	b.n	8002efa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40023800 	.word	0x40023800

08002f08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f12:	2300      	movs	r3, #0
 8002f14:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e0d0      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f20:	4b6a      	ldr	r3, [pc, #424]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 030f 	and.w	r3, r3, #15
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d910      	bls.n	8002f50 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2e:	4b67      	ldr	r3, [pc, #412]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f023 020f 	bic.w	r2, r3, #15
 8002f36:	4965      	ldr	r1, [pc, #404]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3e:	4b63      	ldr	r3, [pc, #396]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d001      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e0b8      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d020      	beq.n	8002f9e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d005      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f68:	4b59      	ldr	r3, [pc, #356]	; (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	4a58      	ldr	r2, [pc, #352]	; (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f72:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d005      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f80:	4b53      	ldr	r3, [pc, #332]	; (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	4a52      	ldr	r2, [pc, #328]	; (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f8a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f8c:	4b50      	ldr	r3, [pc, #320]	; (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	494d      	ldr	r1, [pc, #308]	; (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d040      	beq.n	800302c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d107      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb2:	4b47      	ldr	r3, [pc, #284]	; (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d115      	bne.n	8002fea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e07f      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d107      	bne.n	8002fda <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fca:	4b41      	ldr	r3, [pc, #260]	; (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d109      	bne.n	8002fea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e073      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fda:	4b3d      	ldr	r3, [pc, #244]	; (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e06b      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fea:	4b39      	ldr	r3, [pc, #228]	; (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f023 0203 	bic.w	r2, r3, #3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	4936      	ldr	r1, [pc, #216]	; (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ffc:	f7fe fb36 	bl	800166c <HAL_GetTick>
 8003000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003002:	e00a      	b.n	800301a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003004:	f7fe fb32 	bl	800166c <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003012:	4293      	cmp	r3, r2
 8003014:	d901      	bls.n	800301a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e053      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301a:	4b2d      	ldr	r3, [pc, #180]	; (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 020c 	and.w	r2, r3, #12
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	429a      	cmp	r2, r3
 800302a:	d1eb      	bne.n	8003004 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800302c:	4b27      	ldr	r3, [pc, #156]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 030f 	and.w	r3, r3, #15
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d210      	bcs.n	800305c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800303a:	4b24      	ldr	r3, [pc, #144]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f023 020f 	bic.w	r2, r3, #15
 8003042:	4922      	ldr	r1, [pc, #136]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	4313      	orrs	r3, r2
 8003048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800304a:	4b20      	ldr	r3, [pc, #128]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	429a      	cmp	r2, r3
 8003056:	d001      	beq.n	800305c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e032      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b00      	cmp	r3, #0
 8003066:	d008      	beq.n	800307a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003068:	4b19      	ldr	r3, [pc, #100]	; (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	4916      	ldr	r1, [pc, #88]	; (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 8003076:	4313      	orrs	r3, r2
 8003078:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b00      	cmp	r3, #0
 8003084:	d009      	beq.n	800309a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003086:	4b12      	ldr	r3, [pc, #72]	; (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	490e      	ldr	r1, [pc, #56]	; (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 8003096:	4313      	orrs	r3, r2
 8003098:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800309a:	f000 f821 	bl	80030e0 <HAL_RCC_GetSysClockFreq>
 800309e:	4601      	mov	r1, r0
 80030a0:	4b0b      	ldr	r3, [pc, #44]	; (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	091b      	lsrs	r3, r3, #4
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	4a0a      	ldr	r2, [pc, #40]	; (80030d4 <HAL_RCC_ClockConfig+0x1cc>)
 80030ac:	5cd3      	ldrb	r3, [r2, r3]
 80030ae:	fa21 f303 	lsr.w	r3, r1, r3
 80030b2:	4a09      	ldr	r2, [pc, #36]	; (80030d8 <HAL_RCC_ClockConfig+0x1d0>)
 80030b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030b6:	4b09      	ldr	r3, [pc, #36]	; (80030dc <HAL_RCC_ClockConfig+0x1d4>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fe fa92 	bl	80015e4 <HAL_InitTick>

  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40023c00 	.word	0x40023c00
 80030d0:	40023800 	.word	0x40023800
 80030d4:	08005524 	.word	0x08005524
 80030d8:	20000000 	.word	0x20000000
 80030dc:	20000004 	.word	0x20000004

080030e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80030e6:	2300      	movs	r3, #0
 80030e8:	607b      	str	r3, [r7, #4]
 80030ea:	2300      	movs	r3, #0
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	2300      	movs	r3, #0
 80030f0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80030f2:	2300      	movs	r3, #0
 80030f4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030f6:	4b50      	ldr	r3, [pc, #320]	; (8003238 <HAL_RCC_GetSysClockFreq+0x158>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 030c 	and.w	r3, r3, #12
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d007      	beq.n	8003112 <HAL_RCC_GetSysClockFreq+0x32>
 8003102:	2b08      	cmp	r3, #8
 8003104:	d008      	beq.n	8003118 <HAL_RCC_GetSysClockFreq+0x38>
 8003106:	2b00      	cmp	r3, #0
 8003108:	f040 808d 	bne.w	8003226 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800310c:	4b4b      	ldr	r3, [pc, #300]	; (800323c <HAL_RCC_GetSysClockFreq+0x15c>)
 800310e:	60bb      	str	r3, [r7, #8]
      break;
 8003110:	e08c      	b.n	800322c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003112:	4b4b      	ldr	r3, [pc, #300]	; (8003240 <HAL_RCC_GetSysClockFreq+0x160>)
 8003114:	60bb      	str	r3, [r7, #8]
      break;
 8003116:	e089      	b.n	800322c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003118:	4b47      	ldr	r3, [pc, #284]	; (8003238 <HAL_RCC_GetSysClockFreq+0x158>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003120:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003122:	4b45      	ldr	r3, [pc, #276]	; (8003238 <HAL_RCC_GetSysClockFreq+0x158>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d023      	beq.n	8003176 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800312e:	4b42      	ldr	r3, [pc, #264]	; (8003238 <HAL_RCC_GetSysClockFreq+0x158>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	099b      	lsrs	r3, r3, #6
 8003134:	f04f 0400 	mov.w	r4, #0
 8003138:	f240 11ff 	movw	r1, #511	; 0x1ff
 800313c:	f04f 0200 	mov.w	r2, #0
 8003140:	ea03 0501 	and.w	r5, r3, r1
 8003144:	ea04 0602 	and.w	r6, r4, r2
 8003148:	4a3d      	ldr	r2, [pc, #244]	; (8003240 <HAL_RCC_GetSysClockFreq+0x160>)
 800314a:	fb02 f106 	mul.w	r1, r2, r6
 800314e:	2200      	movs	r2, #0
 8003150:	fb02 f205 	mul.w	r2, r2, r5
 8003154:	440a      	add	r2, r1
 8003156:	493a      	ldr	r1, [pc, #232]	; (8003240 <HAL_RCC_GetSysClockFreq+0x160>)
 8003158:	fba5 0101 	umull	r0, r1, r5, r1
 800315c:	1853      	adds	r3, r2, r1
 800315e:	4619      	mov	r1, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f04f 0400 	mov.w	r4, #0
 8003166:	461a      	mov	r2, r3
 8003168:	4623      	mov	r3, r4
 800316a:	f7fd f8a1 	bl	80002b0 <__aeabi_uldivmod>
 800316e:	4603      	mov	r3, r0
 8003170:	460c      	mov	r4, r1
 8003172:	60fb      	str	r3, [r7, #12]
 8003174:	e049      	b.n	800320a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003176:	4b30      	ldr	r3, [pc, #192]	; (8003238 <HAL_RCC_GetSysClockFreq+0x158>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	099b      	lsrs	r3, r3, #6
 800317c:	f04f 0400 	mov.w	r4, #0
 8003180:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003184:	f04f 0200 	mov.w	r2, #0
 8003188:	ea03 0501 	and.w	r5, r3, r1
 800318c:	ea04 0602 	and.w	r6, r4, r2
 8003190:	4629      	mov	r1, r5
 8003192:	4632      	mov	r2, r6
 8003194:	f04f 0300 	mov.w	r3, #0
 8003198:	f04f 0400 	mov.w	r4, #0
 800319c:	0154      	lsls	r4, r2, #5
 800319e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80031a2:	014b      	lsls	r3, r1, #5
 80031a4:	4619      	mov	r1, r3
 80031a6:	4622      	mov	r2, r4
 80031a8:	1b49      	subs	r1, r1, r5
 80031aa:	eb62 0206 	sbc.w	r2, r2, r6
 80031ae:	f04f 0300 	mov.w	r3, #0
 80031b2:	f04f 0400 	mov.w	r4, #0
 80031b6:	0194      	lsls	r4, r2, #6
 80031b8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80031bc:	018b      	lsls	r3, r1, #6
 80031be:	1a5b      	subs	r3, r3, r1
 80031c0:	eb64 0402 	sbc.w	r4, r4, r2
 80031c4:	f04f 0100 	mov.w	r1, #0
 80031c8:	f04f 0200 	mov.w	r2, #0
 80031cc:	00e2      	lsls	r2, r4, #3
 80031ce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80031d2:	00d9      	lsls	r1, r3, #3
 80031d4:	460b      	mov	r3, r1
 80031d6:	4614      	mov	r4, r2
 80031d8:	195b      	adds	r3, r3, r5
 80031da:	eb44 0406 	adc.w	r4, r4, r6
 80031de:	f04f 0100 	mov.w	r1, #0
 80031e2:	f04f 0200 	mov.w	r2, #0
 80031e6:	02a2      	lsls	r2, r4, #10
 80031e8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80031ec:	0299      	lsls	r1, r3, #10
 80031ee:	460b      	mov	r3, r1
 80031f0:	4614      	mov	r4, r2
 80031f2:	4618      	mov	r0, r3
 80031f4:	4621      	mov	r1, r4
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f04f 0400 	mov.w	r4, #0
 80031fc:	461a      	mov	r2, r3
 80031fe:	4623      	mov	r3, r4
 8003200:	f7fd f856 	bl	80002b0 <__aeabi_uldivmod>
 8003204:	4603      	mov	r3, r0
 8003206:	460c      	mov	r4, r1
 8003208:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800320a:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <HAL_RCC_GetSysClockFreq+0x158>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	0c1b      	lsrs	r3, r3, #16
 8003210:	f003 0303 	and.w	r3, r3, #3
 8003214:	3301      	adds	r3, #1
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003222:	60bb      	str	r3, [r7, #8]
      break;
 8003224:	e002      	b.n	800322c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003226:	4b05      	ldr	r3, [pc, #20]	; (800323c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003228:	60bb      	str	r3, [r7, #8]
      break;
 800322a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800322c:	68bb      	ldr	r3, [r7, #8]
}
 800322e:	4618      	mov	r0, r3
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003236:	bf00      	nop
 8003238:	40023800 	.word	0x40023800
 800323c:	00f42400 	.word	0x00f42400
 8003240:	017d7840 	.word	0x017d7840

08003244 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003248:	4b03      	ldr	r3, [pc, #12]	; (8003258 <HAL_RCC_GetHCLKFreq+0x14>)
 800324a:	681b      	ldr	r3, [r3, #0]
}
 800324c:	4618      	mov	r0, r3
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	20000000 	.word	0x20000000

0800325c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003260:	f7ff fff0 	bl	8003244 <HAL_RCC_GetHCLKFreq>
 8003264:	4601      	mov	r1, r0
 8003266:	4b05      	ldr	r3, [pc, #20]	; (800327c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	0a9b      	lsrs	r3, r3, #10
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	4a03      	ldr	r2, [pc, #12]	; (8003280 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003272:	5cd3      	ldrb	r3, [r2, r3]
 8003274:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003278:	4618      	mov	r0, r3
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40023800 	.word	0x40023800
 8003280:	08005534 	.word	0x08005534

08003284 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003288:	f7ff ffdc 	bl	8003244 <HAL_RCC_GetHCLKFreq>
 800328c:	4601      	mov	r1, r0
 800328e:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	0b5b      	lsrs	r3, r3, #13
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	4a03      	ldr	r2, [pc, #12]	; (80032a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800329a:	5cd3      	ldrb	r3, [r2, r3]
 800329c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	40023800 	.word	0x40023800
 80032a8:	08005534 	.word	0x08005534

080032ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b088      	sub	sp, #32
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80032b4:	2300      	movs	r3, #0
 80032b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80032b8:	2300      	movs	r3, #0
 80032ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80032bc:	2300      	movs	r3, #0
 80032be:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80032c0:	2300      	movs	r3, #0
 80032c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80032c4:	2300      	movs	r3, #0
 80032c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d012      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80032d4:	4b69      	ldr	r3, [pc, #420]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	4a68      	ldr	r2, [pc, #416]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032da:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80032de:	6093      	str	r3, [r2, #8]
 80032e0:	4b66      	ldr	r3, [pc, #408]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e8:	4964      	ldr	r1, [pc, #400]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80032f6:	2301      	movs	r3, #1
 80032f8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d017      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003306:	4b5d      	ldr	r3, [pc, #372]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003308:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800330c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003314:	4959      	ldr	r1, [pc, #356]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003316:	4313      	orrs	r3, r2
 8003318:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003320:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003324:	d101      	bne.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003326:	2301      	movs	r3, #1
 8003328:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003332:	2301      	movs	r3, #1
 8003334:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d017      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003342:	4b4e      	ldr	r3, [pc, #312]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003348:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003350:	494a      	ldr	r1, [pc, #296]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003352:	4313      	orrs	r3, r2
 8003354:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003360:	d101      	bne.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003362:	2301      	movs	r3, #1
 8003364:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800336e:	2301      	movs	r3, #1
 8003370:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800337e:	2301      	movs	r3, #1
 8003380:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0320 	and.w	r3, r3, #32
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 808b 	beq.w	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003390:	4b3a      	ldr	r3, [pc, #232]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	4a39      	ldr	r2, [pc, #228]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800339a:	6413      	str	r3, [r2, #64]	; 0x40
 800339c:	4b37      	ldr	r3, [pc, #220]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800339e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a4:	60bb      	str	r3, [r7, #8]
 80033a6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80033a8:	4b35      	ldr	r3, [pc, #212]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a34      	ldr	r2, [pc, #208]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033b4:	f7fe f95a 	bl	800166c <HAL_GetTick>
 80033b8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033bc:	f7fe f956 	bl	800166c <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b64      	cmp	r3, #100	; 0x64
 80033c8:	d901      	bls.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e355      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80033ce:	4b2c      	ldr	r3, [pc, #176]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0f0      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033da:	4b28      	ldr	r3, [pc, #160]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033e2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d035      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d02e      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033f8:	4b20      	ldr	r3, [pc, #128]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003400:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003402:	4b1e      	ldr	r3, [pc, #120]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003406:	4a1d      	ldr	r2, [pc, #116]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800340c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800340e:	4b1b      	ldr	r3, [pc, #108]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003412:	4a1a      	ldr	r2, [pc, #104]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003418:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800341a:	4a18      	ldr	r2, [pc, #96]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003420:	4b16      	ldr	r3, [pc, #88]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b01      	cmp	r3, #1
 800342a:	d114      	bne.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342c:	f7fe f91e 	bl	800166c <HAL_GetTick>
 8003430:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003432:	e00a      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003434:	f7fe f91a 	bl	800166c <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003442:	4293      	cmp	r3, r2
 8003444:	d901      	bls.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e317      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800344a:	4b0c      	ldr	r3, [pc, #48]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800344c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0ee      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800345e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003462:	d111      	bne.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003464:	4b05      	ldr	r3, [pc, #20]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003470:	4b04      	ldr	r3, [pc, #16]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003472:	400b      	ands	r3, r1
 8003474:	4901      	ldr	r1, [pc, #4]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003476:	4313      	orrs	r3, r2
 8003478:	608b      	str	r3, [r1, #8]
 800347a:	e00b      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800347c:	40023800 	.word	0x40023800
 8003480:	40007000 	.word	0x40007000
 8003484:	0ffffcff 	.word	0x0ffffcff
 8003488:	4bb0      	ldr	r3, [pc, #704]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	4aaf      	ldr	r2, [pc, #700]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800348e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003492:	6093      	str	r3, [r2, #8]
 8003494:	4bad      	ldr	r3, [pc, #692]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003496:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034a0:	49aa      	ldr	r1, [pc, #680]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0310 	and.w	r3, r3, #16
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d010      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80034b2:	4ba6      	ldr	r3, [pc, #664]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034b8:	4aa4      	ldr	r2, [pc, #656]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80034c2:	4ba2      	ldr	r3, [pc, #648]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034cc:	499f      	ldr	r1, [pc, #636]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00a      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034e0:	4b9a      	ldr	r3, [pc, #616]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034ee:	4997      	ldr	r1, [pc, #604]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003502:	4b92      	ldr	r3, [pc, #584]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003508:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003510:	498e      	ldr	r1, [pc, #568]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003512:	4313      	orrs	r3, r2
 8003514:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00a      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003524:	4b89      	ldr	r3, [pc, #548]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003532:	4986      	ldr	r1, [pc, #536]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00a      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003546:	4b81      	ldr	r3, [pc, #516]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003554:	497d      	ldr	r1, [pc, #500]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003556:	4313      	orrs	r3, r2
 8003558:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00a      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003568:	4b78      	ldr	r3, [pc, #480]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800356a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356e:	f023 0203 	bic.w	r2, r3, #3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003576:	4975      	ldr	r1, [pc, #468]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003578:	4313      	orrs	r3, r2
 800357a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00a      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800358a:	4b70      	ldr	r3, [pc, #448]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800358c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003590:	f023 020c 	bic.w	r2, r3, #12
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003598:	496c      	ldr	r1, [pc, #432]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800359a:	4313      	orrs	r3, r2
 800359c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00a      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035ac:	4b67      	ldr	r3, [pc, #412]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ba:	4964      	ldr	r1, [pc, #400]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00a      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035ce:	4b5f      	ldr	r3, [pc, #380]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035dc:	495b      	ldr	r1, [pc, #364]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00a      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035f0:	4b56      	ldr	r3, [pc, #344]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035fe:	4953      	ldr	r1, [pc, #332]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003600:	4313      	orrs	r3, r2
 8003602:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003612:	4b4e      	ldr	r3, [pc, #312]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003618:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003620:	494a      	ldr	r1, [pc, #296]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003622:	4313      	orrs	r3, r2
 8003624:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00a      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003634:	4b45      	ldr	r3, [pc, #276]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003642:	4942      	ldr	r1, [pc, #264]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003644:	4313      	orrs	r3, r2
 8003646:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00a      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003656:	4b3d      	ldr	r3, [pc, #244]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003664:	4939      	ldr	r1, [pc, #228]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003666:	4313      	orrs	r3, r2
 8003668:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00a      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003678:	4b34      	ldr	r3, [pc, #208]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800367a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003686:	4931      	ldr	r1, [pc, #196]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003688:	4313      	orrs	r3, r2
 800368a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d011      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800369a:	4b2c      	ldr	r3, [pc, #176]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800369c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036a8:	4928      	ldr	r1, [pc, #160]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036b8:	d101      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80036ba:	2301      	movs	r3, #1
 80036bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80036ca:	2301      	movs	r3, #1
 80036cc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00a      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036da:	4b1c      	ldr	r3, [pc, #112]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036e8:	4918      	ldr	r1, [pc, #96]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00b      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036fc:	4b13      	ldr	r3, [pc, #76]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003702:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800370c:	490f      	ldr	r1, [pc, #60]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800370e:	4313      	orrs	r3, r2
 8003710:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d005      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003722:	f040 80d8 	bne.w	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003726:	4b09      	ldr	r3, [pc, #36]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a08      	ldr	r2, [pc, #32]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800372c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003730:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003732:	f7fd ff9b 	bl	800166c <HAL_GetTick>
 8003736:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003738:	e00a      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800373a:	f7fd ff97 	bl	800166c <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b64      	cmp	r3, #100	; 0x64
 8003746:	d903      	bls.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e196      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800374c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003750:	4b6c      	ldr	r3, [pc, #432]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1ee      	bne.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b00      	cmp	r3, #0
 8003766:	d021      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x500>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800376c:	2b00      	cmp	r3, #0
 800376e:	d11d      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003770:	4b64      	ldr	r3, [pc, #400]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003772:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003776:	0c1b      	lsrs	r3, r3, #16
 8003778:	f003 0303 	and.w	r3, r3, #3
 800377c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800377e:	4b61      	ldr	r3, [pc, #388]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003780:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003784:	0e1b      	lsrs	r3, r3, #24
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	019a      	lsls	r2, r3, #6
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	041b      	lsls	r3, r3, #16
 8003796:	431a      	orrs	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	061b      	lsls	r3, r3, #24
 800379c:	431a      	orrs	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	071b      	lsls	r3, r3, #28
 80037a4:	4957      	ldr	r1, [pc, #348]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d004      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x516>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037c0:	d00a      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d02e      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037d6:	d129      	bne.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80037d8:	4b4a      	ldr	r3, [pc, #296]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80037da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037de:	0c1b      	lsrs	r3, r3, #16
 80037e0:	f003 0303 	and.w	r3, r3, #3
 80037e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037e6:	4b47      	ldr	r3, [pc, #284]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80037e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ec:	0f1b      	lsrs	r3, r3, #28
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	019a      	lsls	r2, r3, #6
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	041b      	lsls	r3, r3, #16
 80037fe:	431a      	orrs	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	061b      	lsls	r3, r3, #24
 8003806:	431a      	orrs	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	071b      	lsls	r3, r3, #28
 800380c:	493d      	ldr	r1, [pc, #244]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800380e:	4313      	orrs	r3, r2
 8003810:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003814:	4b3b      	ldr	r3, [pc, #236]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003816:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800381a:	f023 021f 	bic.w	r2, r3, #31
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	3b01      	subs	r3, #1
 8003824:	4937      	ldr	r1, [pc, #220]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003826:	4313      	orrs	r3, r2
 8003828:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d01d      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003838:	4b32      	ldr	r3, [pc, #200]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800383a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800383e:	0e1b      	lsrs	r3, r3, #24
 8003840:	f003 030f 	and.w	r3, r3, #15
 8003844:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003846:	4b2f      	ldr	r3, [pc, #188]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800384c:	0f1b      	lsrs	r3, r3, #28
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	019a      	lsls	r2, r3, #6
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	041b      	lsls	r3, r3, #16
 8003860:	431a      	orrs	r2, r3
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	061b      	lsls	r3, r3, #24
 8003866:	431a      	orrs	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	071b      	lsls	r3, r3, #28
 800386c:	4925      	ldr	r1, [pc, #148]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800386e:	4313      	orrs	r3, r2
 8003870:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d011      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	019a      	lsls	r2, r3, #6
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	041b      	lsls	r3, r3, #16
 800388c:	431a      	orrs	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	061b      	lsls	r3, r3, #24
 8003894:	431a      	orrs	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	071b      	lsls	r3, r3, #28
 800389c:	4919      	ldr	r1, [pc, #100]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80038a4:	4b17      	ldr	r3, [pc, #92]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a16      	ldr	r2, [pc, #88]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80038aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038b0:	f7fd fedc 	bl	800166c <HAL_GetTick>
 80038b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038b6:	e008      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80038b8:	f7fd fed8 	bl	800166c <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b64      	cmp	r3, #100	; 0x64
 80038c4:	d901      	bls.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e0d7      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038ca:	4b0e      	ldr	r3, [pc, #56]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0f0      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	f040 80cd 	bne.w	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80038de:	4b09      	ldr	r3, [pc, #36]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a08      	ldr	r2, [pc, #32]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80038e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038ea:	f7fd febf 	bl	800166c <HAL_GetTick>
 80038ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038f0:	e00a      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80038f2:	f7fd febb 	bl	800166c <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b64      	cmp	r3, #100	; 0x64
 80038fe:	d903      	bls.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e0ba      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8003904:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003908:	4b5e      	ldr	r3, [pc, #376]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003910:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003914:	d0ed      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003926:	2b00      	cmp	r3, #0
 8003928:	d009      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003932:	2b00      	cmp	r3, #0
 8003934:	d02e      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	2b00      	cmp	r3, #0
 800393c:	d12a      	bne.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800393e:	4b51      	ldr	r3, [pc, #324]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003944:	0c1b      	lsrs	r3, r3, #16
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800394c:	4b4d      	ldr	r3, [pc, #308]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800394e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003952:	0f1b      	lsrs	r3, r3, #28
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	019a      	lsls	r2, r3, #6
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	041b      	lsls	r3, r3, #16
 8003964:	431a      	orrs	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	061b      	lsls	r3, r3, #24
 800396c:	431a      	orrs	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	071b      	lsls	r3, r3, #28
 8003972:	4944      	ldr	r1, [pc, #272]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800397a:	4b42      	ldr	r3, [pc, #264]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800397c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003980:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003988:	3b01      	subs	r3, #1
 800398a:	021b      	lsls	r3, r3, #8
 800398c:	493d      	ldr	r1, [pc, #244]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800398e:	4313      	orrs	r3, r2
 8003990:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d022      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039a8:	d11d      	bne.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80039aa:	4b36      	ldr	r3, [pc, #216]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80039ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b0:	0e1b      	lsrs	r3, r3, #24
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80039b8:	4b32      	ldr	r3, [pc, #200]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80039ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039be:	0f1b      	lsrs	r3, r3, #28
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	019a      	lsls	r2, r3, #6
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	041b      	lsls	r3, r3, #16
 80039d2:	431a      	orrs	r2, r3
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	061b      	lsls	r3, r3, #24
 80039d8:	431a      	orrs	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	071b      	lsls	r3, r3, #28
 80039de:	4929      	ldr	r1, [pc, #164]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0308 	and.w	r3, r3, #8
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d028      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80039f2:	4b24      	ldr	r3, [pc, #144]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80039f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f8:	0e1b      	lsrs	r3, r3, #24
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a00:	4b20      	ldr	r3, [pc, #128]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a06:	0c1b      	lsrs	r3, r3, #16
 8003a08:	f003 0303 	and.w	r3, r3, #3
 8003a0c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	019a      	lsls	r2, r3, #6
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	041b      	lsls	r3, r3, #16
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	061b      	lsls	r3, r3, #24
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	071b      	lsls	r3, r3, #28
 8003a26:	4917      	ldr	r1, [pc, #92]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003a2e:	4b15      	ldr	r3, [pc, #84]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3c:	4911      	ldr	r1, [pc, #68]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003a44:	4b0f      	ldr	r3, [pc, #60]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a0e      	ldr	r2, [pc, #56]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003a4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a50:	f7fd fe0c 	bl	800166c <HAL_GetTick>
 8003a54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a56:	e008      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a58:	f7fd fe08 	bl	800166c <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b64      	cmp	r3, #100	; 0x64
 8003a64:	d901      	bls.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e007      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a6a:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a76:	d1ef      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3720      	adds	r7, #32
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	40023800 	.word	0x40023800

08003a88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e040      	b.n	8003b1c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d106      	bne.n	8003ab0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7fd fc3a 	bl	8001324 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2224      	movs	r2, #36	; 0x24
 8003ab4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 0201 	bic.w	r2, r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f8be 	bl	8003c48 <UART_SetConfig>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d101      	bne.n	8003ad6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e022      	b.n	8003b1c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d002      	beq.n	8003ae4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 fb5c 	bl	800419c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003af2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689a      	ldr	r2, [r3, #8]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f042 0201 	orr.w	r2, r2, #1
 8003b12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 fbe3 	bl	80042e0 <UART_CheckIdleState>
 8003b1a:	4603      	mov	r3, r0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08a      	sub	sp, #40	; 0x28
 8003b28:	af02      	add	r7, sp, #8
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	603b      	str	r3, [r7, #0]
 8003b30:	4613      	mov	r3, r2
 8003b32:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b38:	2b20      	cmp	r3, #32
 8003b3a:	d17f      	bne.n	8003c3c <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <HAL_UART_Transmit+0x24>
 8003b42:	88fb      	ldrh	r3, [r7, #6]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e078      	b.n	8003c3e <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d101      	bne.n	8003b5a <HAL_UART_Transmit+0x36>
 8003b56:	2302      	movs	r3, #2
 8003b58:	e071      	b.n	8003c3e <HAL_UART_Transmit+0x11a>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2221      	movs	r2, #33	; 0x21
 8003b6c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003b6e:	f7fd fd7d 	bl	800166c <HAL_GetTick>
 8003b72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	88fa      	ldrh	r2, [r7, #6]
 8003b78:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	88fa      	ldrh	r2, [r7, #6]
 8003b80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b8c:	d108      	bne.n	8003ba0 <HAL_UART_Transmit+0x7c>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d104      	bne.n	8003ba0 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8003b96:	2300      	movs	r3, #0
 8003b98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	61bb      	str	r3, [r7, #24]
 8003b9e:	e003      	b.n	8003ba8 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003bb0:	e02c      	b.n	8003c0c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	2180      	movs	r1, #128	; 0x80
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f000 fbbe 	bl	800433e <UART_WaitOnFlagUntilTimeout>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e038      	b.n	8003c3e <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10b      	bne.n	8003bea <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	881b      	ldrh	r3, [r3, #0]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003be0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	3302      	adds	r3, #2
 8003be6:	61bb      	str	r3, [r7, #24]
 8003be8:	e007      	b.n	8003bfa <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	781a      	ldrb	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	3b01      	subs	r3, #1
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1cc      	bne.n	8003bb2 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	2140      	movs	r1, #64	; 0x40
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 fb8b 	bl	800433e <UART_WaitOnFlagUntilTimeout>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e005      	b.n	8003c3e <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2220      	movs	r2, #32
 8003c36:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	e000      	b.n	8003c3e <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8003c3c:	2302      	movs	r3, #2
  }
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3720      	adds	r7, #32
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
	...

08003c48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b088      	sub	sp, #32
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c54:	2300      	movs	r3, #0
 8003c56:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	431a      	orrs	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	431a      	orrs	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	4bb1      	ldr	r3, [pc, #708]	; (8003f3c <UART_SetConfig+0x2f4>)
 8003c78:	4013      	ands	r3, r2
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	6812      	ldr	r2, [r2, #0]
 8003c7e:	6939      	ldr	r1, [r7, #16]
 8003c80:	430b      	orrs	r3, r1
 8003c82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68da      	ldr	r2, [r3, #12]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a9f      	ldr	r2, [pc, #636]	; (8003f40 <UART_SetConfig+0x2f8>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d121      	bne.n	8003d0c <UART_SetConfig+0xc4>
 8003cc8:	4b9e      	ldr	r3, [pc, #632]	; (8003f44 <UART_SetConfig+0x2fc>)
 8003cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cce:	f003 0303 	and.w	r3, r3, #3
 8003cd2:	2b03      	cmp	r3, #3
 8003cd4:	d816      	bhi.n	8003d04 <UART_SetConfig+0xbc>
 8003cd6:	a201      	add	r2, pc, #4	; (adr r2, 8003cdc <UART_SetConfig+0x94>)
 8003cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cdc:	08003ced 	.word	0x08003ced
 8003ce0:	08003cf9 	.word	0x08003cf9
 8003ce4:	08003cf3 	.word	0x08003cf3
 8003ce8:	08003cff 	.word	0x08003cff
 8003cec:	2301      	movs	r3, #1
 8003cee:	77fb      	strb	r3, [r7, #31]
 8003cf0:	e151      	b.n	8003f96 <UART_SetConfig+0x34e>
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	77fb      	strb	r3, [r7, #31]
 8003cf6:	e14e      	b.n	8003f96 <UART_SetConfig+0x34e>
 8003cf8:	2304      	movs	r3, #4
 8003cfa:	77fb      	strb	r3, [r7, #31]
 8003cfc:	e14b      	b.n	8003f96 <UART_SetConfig+0x34e>
 8003cfe:	2308      	movs	r3, #8
 8003d00:	77fb      	strb	r3, [r7, #31]
 8003d02:	e148      	b.n	8003f96 <UART_SetConfig+0x34e>
 8003d04:	2310      	movs	r3, #16
 8003d06:	77fb      	strb	r3, [r7, #31]
 8003d08:	bf00      	nop
 8003d0a:	e144      	b.n	8003f96 <UART_SetConfig+0x34e>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a8d      	ldr	r2, [pc, #564]	; (8003f48 <UART_SetConfig+0x300>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d134      	bne.n	8003d80 <UART_SetConfig+0x138>
 8003d16:	4b8b      	ldr	r3, [pc, #556]	; (8003f44 <UART_SetConfig+0x2fc>)
 8003d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1c:	f003 030c 	and.w	r3, r3, #12
 8003d20:	2b0c      	cmp	r3, #12
 8003d22:	d829      	bhi.n	8003d78 <UART_SetConfig+0x130>
 8003d24:	a201      	add	r2, pc, #4	; (adr r2, 8003d2c <UART_SetConfig+0xe4>)
 8003d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2a:	bf00      	nop
 8003d2c:	08003d61 	.word	0x08003d61
 8003d30:	08003d79 	.word	0x08003d79
 8003d34:	08003d79 	.word	0x08003d79
 8003d38:	08003d79 	.word	0x08003d79
 8003d3c:	08003d6d 	.word	0x08003d6d
 8003d40:	08003d79 	.word	0x08003d79
 8003d44:	08003d79 	.word	0x08003d79
 8003d48:	08003d79 	.word	0x08003d79
 8003d4c:	08003d67 	.word	0x08003d67
 8003d50:	08003d79 	.word	0x08003d79
 8003d54:	08003d79 	.word	0x08003d79
 8003d58:	08003d79 	.word	0x08003d79
 8003d5c:	08003d73 	.word	0x08003d73
 8003d60:	2300      	movs	r3, #0
 8003d62:	77fb      	strb	r3, [r7, #31]
 8003d64:	e117      	b.n	8003f96 <UART_SetConfig+0x34e>
 8003d66:	2302      	movs	r3, #2
 8003d68:	77fb      	strb	r3, [r7, #31]
 8003d6a:	e114      	b.n	8003f96 <UART_SetConfig+0x34e>
 8003d6c:	2304      	movs	r3, #4
 8003d6e:	77fb      	strb	r3, [r7, #31]
 8003d70:	e111      	b.n	8003f96 <UART_SetConfig+0x34e>
 8003d72:	2308      	movs	r3, #8
 8003d74:	77fb      	strb	r3, [r7, #31]
 8003d76:	e10e      	b.n	8003f96 <UART_SetConfig+0x34e>
 8003d78:	2310      	movs	r3, #16
 8003d7a:	77fb      	strb	r3, [r7, #31]
 8003d7c:	bf00      	nop
 8003d7e:	e10a      	b.n	8003f96 <UART_SetConfig+0x34e>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a71      	ldr	r2, [pc, #452]	; (8003f4c <UART_SetConfig+0x304>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d120      	bne.n	8003dcc <UART_SetConfig+0x184>
 8003d8a:	4b6e      	ldr	r3, [pc, #440]	; (8003f44 <UART_SetConfig+0x2fc>)
 8003d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d90:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d94:	2b10      	cmp	r3, #16
 8003d96:	d00f      	beq.n	8003db8 <UART_SetConfig+0x170>
 8003d98:	2b10      	cmp	r3, #16
 8003d9a:	d802      	bhi.n	8003da2 <UART_SetConfig+0x15a>
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d005      	beq.n	8003dac <UART_SetConfig+0x164>
 8003da0:	e010      	b.n	8003dc4 <UART_SetConfig+0x17c>
 8003da2:	2b20      	cmp	r3, #32
 8003da4:	d005      	beq.n	8003db2 <UART_SetConfig+0x16a>
 8003da6:	2b30      	cmp	r3, #48	; 0x30
 8003da8:	d009      	beq.n	8003dbe <UART_SetConfig+0x176>
 8003daa:	e00b      	b.n	8003dc4 <UART_SetConfig+0x17c>
 8003dac:	2300      	movs	r3, #0
 8003dae:	77fb      	strb	r3, [r7, #31]
 8003db0:	e0f1      	b.n	8003f96 <UART_SetConfig+0x34e>
 8003db2:	2302      	movs	r3, #2
 8003db4:	77fb      	strb	r3, [r7, #31]
 8003db6:	e0ee      	b.n	8003f96 <UART_SetConfig+0x34e>
 8003db8:	2304      	movs	r3, #4
 8003dba:	77fb      	strb	r3, [r7, #31]
 8003dbc:	e0eb      	b.n	8003f96 <UART_SetConfig+0x34e>
 8003dbe:	2308      	movs	r3, #8
 8003dc0:	77fb      	strb	r3, [r7, #31]
 8003dc2:	e0e8      	b.n	8003f96 <UART_SetConfig+0x34e>
 8003dc4:	2310      	movs	r3, #16
 8003dc6:	77fb      	strb	r3, [r7, #31]
 8003dc8:	bf00      	nop
 8003dca:	e0e4      	b.n	8003f96 <UART_SetConfig+0x34e>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a5f      	ldr	r2, [pc, #380]	; (8003f50 <UART_SetConfig+0x308>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d120      	bne.n	8003e18 <UART_SetConfig+0x1d0>
 8003dd6:	4b5b      	ldr	r3, [pc, #364]	; (8003f44 <UART_SetConfig+0x2fc>)
 8003dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ddc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003de0:	2b40      	cmp	r3, #64	; 0x40
 8003de2:	d00f      	beq.n	8003e04 <UART_SetConfig+0x1bc>
 8003de4:	2b40      	cmp	r3, #64	; 0x40
 8003de6:	d802      	bhi.n	8003dee <UART_SetConfig+0x1a6>
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d005      	beq.n	8003df8 <UART_SetConfig+0x1b0>
 8003dec:	e010      	b.n	8003e10 <UART_SetConfig+0x1c8>
 8003dee:	2b80      	cmp	r3, #128	; 0x80
 8003df0:	d005      	beq.n	8003dfe <UART_SetConfig+0x1b6>
 8003df2:	2bc0      	cmp	r3, #192	; 0xc0
 8003df4:	d009      	beq.n	8003e0a <UART_SetConfig+0x1c2>
 8003df6:	e00b      	b.n	8003e10 <UART_SetConfig+0x1c8>
 8003df8:	2300      	movs	r3, #0
 8003dfa:	77fb      	strb	r3, [r7, #31]
 8003dfc:	e0cb      	b.n	8003f96 <UART_SetConfig+0x34e>
 8003dfe:	2302      	movs	r3, #2
 8003e00:	77fb      	strb	r3, [r7, #31]
 8003e02:	e0c8      	b.n	8003f96 <UART_SetConfig+0x34e>
 8003e04:	2304      	movs	r3, #4
 8003e06:	77fb      	strb	r3, [r7, #31]
 8003e08:	e0c5      	b.n	8003f96 <UART_SetConfig+0x34e>
 8003e0a:	2308      	movs	r3, #8
 8003e0c:	77fb      	strb	r3, [r7, #31]
 8003e0e:	e0c2      	b.n	8003f96 <UART_SetConfig+0x34e>
 8003e10:	2310      	movs	r3, #16
 8003e12:	77fb      	strb	r3, [r7, #31]
 8003e14:	bf00      	nop
 8003e16:	e0be      	b.n	8003f96 <UART_SetConfig+0x34e>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a4d      	ldr	r2, [pc, #308]	; (8003f54 <UART_SetConfig+0x30c>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d124      	bne.n	8003e6c <UART_SetConfig+0x224>
 8003e22:	4b48      	ldr	r3, [pc, #288]	; (8003f44 <UART_SetConfig+0x2fc>)
 8003e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e30:	d012      	beq.n	8003e58 <UART_SetConfig+0x210>
 8003e32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e36:	d802      	bhi.n	8003e3e <UART_SetConfig+0x1f6>
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d007      	beq.n	8003e4c <UART_SetConfig+0x204>
 8003e3c:	e012      	b.n	8003e64 <UART_SetConfig+0x21c>
 8003e3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e42:	d006      	beq.n	8003e52 <UART_SetConfig+0x20a>
 8003e44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e48:	d009      	beq.n	8003e5e <UART_SetConfig+0x216>
 8003e4a:	e00b      	b.n	8003e64 <UART_SetConfig+0x21c>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	77fb      	strb	r3, [r7, #31]
 8003e50:	e0a1      	b.n	8003f96 <UART_SetConfig+0x34e>
 8003e52:	2302      	movs	r3, #2
 8003e54:	77fb      	strb	r3, [r7, #31]
 8003e56:	e09e      	b.n	8003f96 <UART_SetConfig+0x34e>
 8003e58:	2304      	movs	r3, #4
 8003e5a:	77fb      	strb	r3, [r7, #31]
 8003e5c:	e09b      	b.n	8003f96 <UART_SetConfig+0x34e>
 8003e5e:	2308      	movs	r3, #8
 8003e60:	77fb      	strb	r3, [r7, #31]
 8003e62:	e098      	b.n	8003f96 <UART_SetConfig+0x34e>
 8003e64:	2310      	movs	r3, #16
 8003e66:	77fb      	strb	r3, [r7, #31]
 8003e68:	bf00      	nop
 8003e6a:	e094      	b.n	8003f96 <UART_SetConfig+0x34e>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a39      	ldr	r2, [pc, #228]	; (8003f58 <UART_SetConfig+0x310>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d124      	bne.n	8003ec0 <UART_SetConfig+0x278>
 8003e76:	4b33      	ldr	r3, [pc, #204]	; (8003f44 <UART_SetConfig+0x2fc>)
 8003e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e84:	d012      	beq.n	8003eac <UART_SetConfig+0x264>
 8003e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e8a:	d802      	bhi.n	8003e92 <UART_SetConfig+0x24a>
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d007      	beq.n	8003ea0 <UART_SetConfig+0x258>
 8003e90:	e012      	b.n	8003eb8 <UART_SetConfig+0x270>
 8003e92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e96:	d006      	beq.n	8003ea6 <UART_SetConfig+0x25e>
 8003e98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e9c:	d009      	beq.n	8003eb2 <UART_SetConfig+0x26a>
 8003e9e:	e00b      	b.n	8003eb8 <UART_SetConfig+0x270>
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	77fb      	strb	r3, [r7, #31]
 8003ea4:	e077      	b.n	8003f96 <UART_SetConfig+0x34e>
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	77fb      	strb	r3, [r7, #31]
 8003eaa:	e074      	b.n	8003f96 <UART_SetConfig+0x34e>
 8003eac:	2304      	movs	r3, #4
 8003eae:	77fb      	strb	r3, [r7, #31]
 8003eb0:	e071      	b.n	8003f96 <UART_SetConfig+0x34e>
 8003eb2:	2308      	movs	r3, #8
 8003eb4:	77fb      	strb	r3, [r7, #31]
 8003eb6:	e06e      	b.n	8003f96 <UART_SetConfig+0x34e>
 8003eb8:	2310      	movs	r3, #16
 8003eba:	77fb      	strb	r3, [r7, #31]
 8003ebc:	bf00      	nop
 8003ebe:	e06a      	b.n	8003f96 <UART_SetConfig+0x34e>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a25      	ldr	r2, [pc, #148]	; (8003f5c <UART_SetConfig+0x314>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d124      	bne.n	8003f14 <UART_SetConfig+0x2cc>
 8003eca:	4b1e      	ldr	r3, [pc, #120]	; (8003f44 <UART_SetConfig+0x2fc>)
 8003ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ed8:	d012      	beq.n	8003f00 <UART_SetConfig+0x2b8>
 8003eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ede:	d802      	bhi.n	8003ee6 <UART_SetConfig+0x29e>
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d007      	beq.n	8003ef4 <UART_SetConfig+0x2ac>
 8003ee4:	e012      	b.n	8003f0c <UART_SetConfig+0x2c4>
 8003ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eea:	d006      	beq.n	8003efa <UART_SetConfig+0x2b2>
 8003eec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ef0:	d009      	beq.n	8003f06 <UART_SetConfig+0x2be>
 8003ef2:	e00b      	b.n	8003f0c <UART_SetConfig+0x2c4>
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	77fb      	strb	r3, [r7, #31]
 8003ef8:	e04d      	b.n	8003f96 <UART_SetConfig+0x34e>
 8003efa:	2302      	movs	r3, #2
 8003efc:	77fb      	strb	r3, [r7, #31]
 8003efe:	e04a      	b.n	8003f96 <UART_SetConfig+0x34e>
 8003f00:	2304      	movs	r3, #4
 8003f02:	77fb      	strb	r3, [r7, #31]
 8003f04:	e047      	b.n	8003f96 <UART_SetConfig+0x34e>
 8003f06:	2308      	movs	r3, #8
 8003f08:	77fb      	strb	r3, [r7, #31]
 8003f0a:	e044      	b.n	8003f96 <UART_SetConfig+0x34e>
 8003f0c:	2310      	movs	r3, #16
 8003f0e:	77fb      	strb	r3, [r7, #31]
 8003f10:	bf00      	nop
 8003f12:	e040      	b.n	8003f96 <UART_SetConfig+0x34e>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a11      	ldr	r2, [pc, #68]	; (8003f60 <UART_SetConfig+0x318>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d139      	bne.n	8003f92 <UART_SetConfig+0x34a>
 8003f1e:	4b09      	ldr	r3, [pc, #36]	; (8003f44 <UART_SetConfig+0x2fc>)
 8003f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003f28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f2c:	d027      	beq.n	8003f7e <UART_SetConfig+0x336>
 8003f2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f32:	d817      	bhi.n	8003f64 <UART_SetConfig+0x31c>
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d01c      	beq.n	8003f72 <UART_SetConfig+0x32a>
 8003f38:	e027      	b.n	8003f8a <UART_SetConfig+0x342>
 8003f3a:	bf00      	nop
 8003f3c:	efff69f3 	.word	0xefff69f3
 8003f40:	40011000 	.word	0x40011000
 8003f44:	40023800 	.word	0x40023800
 8003f48:	40004400 	.word	0x40004400
 8003f4c:	40004800 	.word	0x40004800
 8003f50:	40004c00 	.word	0x40004c00
 8003f54:	40005000 	.word	0x40005000
 8003f58:	40011400 	.word	0x40011400
 8003f5c:	40007800 	.word	0x40007800
 8003f60:	40007c00 	.word	0x40007c00
 8003f64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f68:	d006      	beq.n	8003f78 <UART_SetConfig+0x330>
 8003f6a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f6e:	d009      	beq.n	8003f84 <UART_SetConfig+0x33c>
 8003f70:	e00b      	b.n	8003f8a <UART_SetConfig+0x342>
 8003f72:	2300      	movs	r3, #0
 8003f74:	77fb      	strb	r3, [r7, #31]
 8003f76:	e00e      	b.n	8003f96 <UART_SetConfig+0x34e>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	77fb      	strb	r3, [r7, #31]
 8003f7c:	e00b      	b.n	8003f96 <UART_SetConfig+0x34e>
 8003f7e:	2304      	movs	r3, #4
 8003f80:	77fb      	strb	r3, [r7, #31]
 8003f82:	e008      	b.n	8003f96 <UART_SetConfig+0x34e>
 8003f84:	2308      	movs	r3, #8
 8003f86:	77fb      	strb	r3, [r7, #31]
 8003f88:	e005      	b.n	8003f96 <UART_SetConfig+0x34e>
 8003f8a:	2310      	movs	r3, #16
 8003f8c:	77fb      	strb	r3, [r7, #31]
 8003f8e:	bf00      	nop
 8003f90:	e001      	b.n	8003f96 <UART_SetConfig+0x34e>
 8003f92:	2310      	movs	r3, #16
 8003f94:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f9e:	d17f      	bne.n	80040a0 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8003fa0:	7ffb      	ldrb	r3, [r7, #31]
 8003fa2:	2b08      	cmp	r3, #8
 8003fa4:	d85c      	bhi.n	8004060 <UART_SetConfig+0x418>
 8003fa6:	a201      	add	r2, pc, #4	; (adr r2, 8003fac <UART_SetConfig+0x364>)
 8003fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fac:	08003fd1 	.word	0x08003fd1
 8003fb0:	08003ff1 	.word	0x08003ff1
 8003fb4:	08004011 	.word	0x08004011
 8003fb8:	08004061 	.word	0x08004061
 8003fbc:	08004029 	.word	0x08004029
 8003fc0:	08004061 	.word	0x08004061
 8003fc4:	08004061 	.word	0x08004061
 8003fc8:	08004061 	.word	0x08004061
 8003fcc:	08004049 	.word	0x08004049
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fd0:	f7ff f944 	bl	800325c <HAL_RCC_GetPCLK1Freq>
 8003fd4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	005a      	lsls	r2, r3, #1
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	085b      	lsrs	r3, r3, #1
 8003fe0:	441a      	add	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	61bb      	str	r3, [r7, #24]
        break;
 8003fee:	e03a      	b.n	8004066 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ff0:	f7ff f948 	bl	8003284 <HAL_RCC_GetPCLK2Freq>
 8003ff4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	005a      	lsls	r2, r3, #1
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	085b      	lsrs	r3, r3, #1
 8004000:	441a      	add	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	fbb2 f3f3 	udiv	r3, r2, r3
 800400a:	b29b      	uxth	r3, r3
 800400c:	61bb      	str	r3, [r7, #24]
        break;
 800400e:	e02a      	b.n	8004066 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	085a      	lsrs	r2, r3, #1
 8004016:	4b5f      	ldr	r3, [pc, #380]	; (8004194 <UART_SetConfig+0x54c>)
 8004018:	4413      	add	r3, r2
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	6852      	ldr	r2, [r2, #4]
 800401e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004022:	b29b      	uxth	r3, r3
 8004024:	61bb      	str	r3, [r7, #24]
        break;
 8004026:	e01e      	b.n	8004066 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004028:	f7ff f85a 	bl	80030e0 <HAL_RCC_GetSysClockFreq>
 800402c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	005a      	lsls	r2, r3, #1
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	085b      	lsrs	r3, r3, #1
 8004038:	441a      	add	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004042:	b29b      	uxth	r3, r3
 8004044:	61bb      	str	r3, [r7, #24]
        break;
 8004046:	e00e      	b.n	8004066 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	085b      	lsrs	r3, r3, #1
 800404e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	fbb2 f3f3 	udiv	r3, r2, r3
 800405a:	b29b      	uxth	r3, r3
 800405c:	61bb      	str	r3, [r7, #24]
        break;
 800405e:	e002      	b.n	8004066 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	75fb      	strb	r3, [r7, #23]
        break;
 8004064:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	2b0f      	cmp	r3, #15
 800406a:	d916      	bls.n	800409a <UART_SetConfig+0x452>
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004072:	d212      	bcs.n	800409a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	b29b      	uxth	r3, r3
 8004078:	f023 030f 	bic.w	r3, r3, #15
 800407c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	085b      	lsrs	r3, r3, #1
 8004082:	b29b      	uxth	r3, r3
 8004084:	f003 0307 	and.w	r3, r3, #7
 8004088:	b29a      	uxth	r2, r3
 800408a:	897b      	ldrh	r3, [r7, #10]
 800408c:	4313      	orrs	r3, r2
 800408e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	897a      	ldrh	r2, [r7, #10]
 8004096:	60da      	str	r2, [r3, #12]
 8004098:	e070      	b.n	800417c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	75fb      	strb	r3, [r7, #23]
 800409e:	e06d      	b.n	800417c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80040a0:	7ffb      	ldrb	r3, [r7, #31]
 80040a2:	2b08      	cmp	r3, #8
 80040a4:	d859      	bhi.n	800415a <UART_SetConfig+0x512>
 80040a6:	a201      	add	r2, pc, #4	; (adr r2, 80040ac <UART_SetConfig+0x464>)
 80040a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ac:	080040d1 	.word	0x080040d1
 80040b0:	080040ef 	.word	0x080040ef
 80040b4:	0800410d 	.word	0x0800410d
 80040b8:	0800415b 	.word	0x0800415b
 80040bc:	08004125 	.word	0x08004125
 80040c0:	0800415b 	.word	0x0800415b
 80040c4:	0800415b 	.word	0x0800415b
 80040c8:	0800415b 	.word	0x0800415b
 80040cc:	08004143 	.word	0x08004143
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040d0:	f7ff f8c4 	bl	800325c <HAL_RCC_GetPCLK1Freq>
 80040d4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	085a      	lsrs	r2, r3, #1
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	441a      	add	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	61bb      	str	r3, [r7, #24]
        break;
 80040ec:	e038      	b.n	8004160 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040ee:	f7ff f8c9 	bl	8003284 <HAL_RCC_GetPCLK2Freq>
 80040f2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	085a      	lsrs	r2, r3, #1
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	441a      	add	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	fbb2 f3f3 	udiv	r3, r2, r3
 8004106:	b29b      	uxth	r3, r3
 8004108:	61bb      	str	r3, [r7, #24]
        break;
 800410a:	e029      	b.n	8004160 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	085a      	lsrs	r2, r3, #1
 8004112:	4b21      	ldr	r3, [pc, #132]	; (8004198 <UART_SetConfig+0x550>)
 8004114:	4413      	add	r3, r2
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	6852      	ldr	r2, [r2, #4]
 800411a:	fbb3 f3f2 	udiv	r3, r3, r2
 800411e:	b29b      	uxth	r3, r3
 8004120:	61bb      	str	r3, [r7, #24]
        break;
 8004122:	e01d      	b.n	8004160 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004124:	f7fe ffdc 	bl	80030e0 <HAL_RCC_GetSysClockFreq>
 8004128:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	085a      	lsrs	r2, r3, #1
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	441a      	add	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	fbb2 f3f3 	udiv	r3, r2, r3
 800413c:	b29b      	uxth	r3, r3
 800413e:	61bb      	str	r3, [r7, #24]
        break;
 8004140:	e00e      	b.n	8004160 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	085b      	lsrs	r3, r3, #1
 8004148:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	fbb2 f3f3 	udiv	r3, r2, r3
 8004154:	b29b      	uxth	r3, r3
 8004156:	61bb      	str	r3, [r7, #24]
        break;
 8004158:	e002      	b.n	8004160 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	75fb      	strb	r3, [r7, #23]
        break;
 800415e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	2b0f      	cmp	r3, #15
 8004164:	d908      	bls.n	8004178 <UART_SetConfig+0x530>
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800416c:	d204      	bcs.n	8004178 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	69ba      	ldr	r2, [r7, #24]
 8004174:	60da      	str	r2, [r3, #12]
 8004176:	e001      	b.n	800417c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004188:	7dfb      	ldrb	r3, [r7, #23]
}
 800418a:	4618      	mov	r0, r3
 800418c:	3720      	adds	r7, #32
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	01e84800 	.word	0x01e84800
 8004198:	00f42400 	.word	0x00f42400

0800419c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00a      	beq.n	800420a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	f003 0308 	and.w	r3, r3, #8
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	430a      	orrs	r2, r1
 800422a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	f003 0310 	and.w	r3, r3, #16
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00a      	beq.n	800424e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	f003 0320 	and.w	r3, r3, #32
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	430a      	orrs	r2, r1
 800426e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004278:	2b00      	cmp	r3, #0
 800427a:	d01a      	beq.n	80042b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800429a:	d10a      	bne.n	80042b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00a      	beq.n	80042d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	605a      	str	r2, [r3, #4]
  }
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af02      	add	r7, sp, #8
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80042ee:	f7fd f9bd 	bl	800166c <HAL_GetTick>
 80042f2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0308 	and.w	r3, r3, #8
 80042fe:	2b08      	cmp	r3, #8
 8004300:	d10e      	bne.n	8004320 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004302:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 f814 	bl	800433e <UART_WaitOnFlagUntilTimeout>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e00a      	b.n	8004336 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2220      	movs	r2, #32
 8004324:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2220      	movs	r2, #32
 800432a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b084      	sub	sp, #16
 8004342:	af00      	add	r7, sp, #0
 8004344:	60f8      	str	r0, [r7, #12]
 8004346:	60b9      	str	r1, [r7, #8]
 8004348:	603b      	str	r3, [r7, #0]
 800434a:	4613      	mov	r3, r2
 800434c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800434e:	e05d      	b.n	800440c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004356:	d059      	beq.n	800440c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004358:	f7fd f988 	bl	800166c <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	429a      	cmp	r2, r3
 8004366:	d302      	bcc.n	800436e <UART_WaitOnFlagUntilTimeout+0x30>
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d11b      	bne.n	80043a6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800437c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689a      	ldr	r2, [r3, #8]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 0201 	bic.w	r2, r2, #1
 800438c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2220      	movs	r2, #32
 8004392:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2220      	movs	r2, #32
 8004398:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e042      	b.n	800442c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d02b      	beq.n	800440c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043c2:	d123      	bne.n	800440c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043cc:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043dc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 0201 	bic.w	r2, r2, #1
 80043ec:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2220      	movs	r2, #32
 80043f2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2220      	movs	r2, #32
 80043f8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2220      	movs	r2, #32
 80043fe:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e00f      	b.n	800442c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	69da      	ldr	r2, [r3, #28]
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	4013      	ands	r3, r2
 8004416:	68ba      	ldr	r2, [r7, #8]
 8004418:	429a      	cmp	r2, r3
 800441a:	bf0c      	ite	eq
 800441c:	2301      	moveq	r3, #1
 800441e:	2300      	movne	r3, #0
 8004420:	b2db      	uxtb	r3, r3
 8004422:	461a      	mov	r2, r3
 8004424:	79fb      	ldrb	r3, [r7, #7]
 8004426:	429a      	cmp	r2, r3
 8004428:	d092      	beq.n	8004350 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <__errno>:
 8004434:	4b01      	ldr	r3, [pc, #4]	; (800443c <__errno+0x8>)
 8004436:	6818      	ldr	r0, [r3, #0]
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	2000000c 	.word	0x2000000c

08004440 <__libc_init_array>:
 8004440:	b570      	push	{r4, r5, r6, lr}
 8004442:	4e0d      	ldr	r6, [pc, #52]	; (8004478 <__libc_init_array+0x38>)
 8004444:	4c0d      	ldr	r4, [pc, #52]	; (800447c <__libc_init_array+0x3c>)
 8004446:	1ba4      	subs	r4, r4, r6
 8004448:	10a4      	asrs	r4, r4, #2
 800444a:	2500      	movs	r5, #0
 800444c:	42a5      	cmp	r5, r4
 800444e:	d109      	bne.n	8004464 <__libc_init_array+0x24>
 8004450:	4e0b      	ldr	r6, [pc, #44]	; (8004480 <__libc_init_array+0x40>)
 8004452:	4c0c      	ldr	r4, [pc, #48]	; (8004484 <__libc_init_array+0x44>)
 8004454:	f001 f826 	bl	80054a4 <_init>
 8004458:	1ba4      	subs	r4, r4, r6
 800445a:	10a4      	asrs	r4, r4, #2
 800445c:	2500      	movs	r5, #0
 800445e:	42a5      	cmp	r5, r4
 8004460:	d105      	bne.n	800446e <__libc_init_array+0x2e>
 8004462:	bd70      	pop	{r4, r5, r6, pc}
 8004464:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004468:	4798      	blx	r3
 800446a:	3501      	adds	r5, #1
 800446c:	e7ee      	b.n	800444c <__libc_init_array+0xc>
 800446e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004472:	4798      	blx	r3
 8004474:	3501      	adds	r5, #1
 8004476:	e7f2      	b.n	800445e <__libc_init_array+0x1e>
 8004478:	080055dc 	.word	0x080055dc
 800447c:	080055dc 	.word	0x080055dc
 8004480:	080055dc 	.word	0x080055dc
 8004484:	080055e0 	.word	0x080055e0

08004488 <memset>:
 8004488:	4402      	add	r2, r0
 800448a:	4603      	mov	r3, r0
 800448c:	4293      	cmp	r3, r2
 800448e:	d100      	bne.n	8004492 <memset+0xa>
 8004490:	4770      	bx	lr
 8004492:	f803 1b01 	strb.w	r1, [r3], #1
 8004496:	e7f9      	b.n	800448c <memset+0x4>

08004498 <iprintf>:
 8004498:	b40f      	push	{r0, r1, r2, r3}
 800449a:	4b0a      	ldr	r3, [pc, #40]	; (80044c4 <iprintf+0x2c>)
 800449c:	b513      	push	{r0, r1, r4, lr}
 800449e:	681c      	ldr	r4, [r3, #0]
 80044a0:	b124      	cbz	r4, 80044ac <iprintf+0x14>
 80044a2:	69a3      	ldr	r3, [r4, #24]
 80044a4:	b913      	cbnz	r3, 80044ac <iprintf+0x14>
 80044a6:	4620      	mov	r0, r4
 80044a8:	f000 fad8 	bl	8004a5c <__sinit>
 80044ac:	ab05      	add	r3, sp, #20
 80044ae:	9a04      	ldr	r2, [sp, #16]
 80044b0:	68a1      	ldr	r1, [r4, #8]
 80044b2:	9301      	str	r3, [sp, #4]
 80044b4:	4620      	mov	r0, r4
 80044b6:	f000 fc99 	bl	8004dec <_vfiprintf_r>
 80044ba:	b002      	add	sp, #8
 80044bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044c0:	b004      	add	sp, #16
 80044c2:	4770      	bx	lr
 80044c4:	2000000c 	.word	0x2000000c

080044c8 <_puts_r>:
 80044c8:	b570      	push	{r4, r5, r6, lr}
 80044ca:	460e      	mov	r6, r1
 80044cc:	4605      	mov	r5, r0
 80044ce:	b118      	cbz	r0, 80044d8 <_puts_r+0x10>
 80044d0:	6983      	ldr	r3, [r0, #24]
 80044d2:	b90b      	cbnz	r3, 80044d8 <_puts_r+0x10>
 80044d4:	f000 fac2 	bl	8004a5c <__sinit>
 80044d8:	69ab      	ldr	r3, [r5, #24]
 80044da:	68ac      	ldr	r4, [r5, #8]
 80044dc:	b913      	cbnz	r3, 80044e4 <_puts_r+0x1c>
 80044de:	4628      	mov	r0, r5
 80044e0:	f000 fabc 	bl	8004a5c <__sinit>
 80044e4:	4b23      	ldr	r3, [pc, #140]	; (8004574 <_puts_r+0xac>)
 80044e6:	429c      	cmp	r4, r3
 80044e8:	d117      	bne.n	800451a <_puts_r+0x52>
 80044ea:	686c      	ldr	r4, [r5, #4]
 80044ec:	89a3      	ldrh	r3, [r4, #12]
 80044ee:	071b      	lsls	r3, r3, #28
 80044f0:	d51d      	bpl.n	800452e <_puts_r+0x66>
 80044f2:	6923      	ldr	r3, [r4, #16]
 80044f4:	b1db      	cbz	r3, 800452e <_puts_r+0x66>
 80044f6:	3e01      	subs	r6, #1
 80044f8:	68a3      	ldr	r3, [r4, #8]
 80044fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80044fe:	3b01      	subs	r3, #1
 8004500:	60a3      	str	r3, [r4, #8]
 8004502:	b9e9      	cbnz	r1, 8004540 <_puts_r+0x78>
 8004504:	2b00      	cmp	r3, #0
 8004506:	da2e      	bge.n	8004566 <_puts_r+0x9e>
 8004508:	4622      	mov	r2, r4
 800450a:	210a      	movs	r1, #10
 800450c:	4628      	mov	r0, r5
 800450e:	f000 f8f5 	bl	80046fc <__swbuf_r>
 8004512:	3001      	adds	r0, #1
 8004514:	d011      	beq.n	800453a <_puts_r+0x72>
 8004516:	200a      	movs	r0, #10
 8004518:	e011      	b.n	800453e <_puts_r+0x76>
 800451a:	4b17      	ldr	r3, [pc, #92]	; (8004578 <_puts_r+0xb0>)
 800451c:	429c      	cmp	r4, r3
 800451e:	d101      	bne.n	8004524 <_puts_r+0x5c>
 8004520:	68ac      	ldr	r4, [r5, #8]
 8004522:	e7e3      	b.n	80044ec <_puts_r+0x24>
 8004524:	4b15      	ldr	r3, [pc, #84]	; (800457c <_puts_r+0xb4>)
 8004526:	429c      	cmp	r4, r3
 8004528:	bf08      	it	eq
 800452a:	68ec      	ldreq	r4, [r5, #12]
 800452c:	e7de      	b.n	80044ec <_puts_r+0x24>
 800452e:	4621      	mov	r1, r4
 8004530:	4628      	mov	r0, r5
 8004532:	f000 f935 	bl	80047a0 <__swsetup_r>
 8004536:	2800      	cmp	r0, #0
 8004538:	d0dd      	beq.n	80044f6 <_puts_r+0x2e>
 800453a:	f04f 30ff 	mov.w	r0, #4294967295
 800453e:	bd70      	pop	{r4, r5, r6, pc}
 8004540:	2b00      	cmp	r3, #0
 8004542:	da04      	bge.n	800454e <_puts_r+0x86>
 8004544:	69a2      	ldr	r2, [r4, #24]
 8004546:	429a      	cmp	r2, r3
 8004548:	dc06      	bgt.n	8004558 <_puts_r+0x90>
 800454a:	290a      	cmp	r1, #10
 800454c:	d004      	beq.n	8004558 <_puts_r+0x90>
 800454e:	6823      	ldr	r3, [r4, #0]
 8004550:	1c5a      	adds	r2, r3, #1
 8004552:	6022      	str	r2, [r4, #0]
 8004554:	7019      	strb	r1, [r3, #0]
 8004556:	e7cf      	b.n	80044f8 <_puts_r+0x30>
 8004558:	4622      	mov	r2, r4
 800455a:	4628      	mov	r0, r5
 800455c:	f000 f8ce 	bl	80046fc <__swbuf_r>
 8004560:	3001      	adds	r0, #1
 8004562:	d1c9      	bne.n	80044f8 <_puts_r+0x30>
 8004564:	e7e9      	b.n	800453a <_puts_r+0x72>
 8004566:	6823      	ldr	r3, [r4, #0]
 8004568:	200a      	movs	r0, #10
 800456a:	1c5a      	adds	r2, r3, #1
 800456c:	6022      	str	r2, [r4, #0]
 800456e:	7018      	strb	r0, [r3, #0]
 8004570:	e7e5      	b.n	800453e <_puts_r+0x76>
 8004572:	bf00      	nop
 8004574:	08005560 	.word	0x08005560
 8004578:	08005580 	.word	0x08005580
 800457c:	08005540 	.word	0x08005540

08004580 <puts>:
 8004580:	4b02      	ldr	r3, [pc, #8]	; (800458c <puts+0xc>)
 8004582:	4601      	mov	r1, r0
 8004584:	6818      	ldr	r0, [r3, #0]
 8004586:	f7ff bf9f 	b.w	80044c8 <_puts_r>
 800458a:	bf00      	nop
 800458c:	2000000c 	.word	0x2000000c

08004590 <setbuf>:
 8004590:	2900      	cmp	r1, #0
 8004592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004596:	bf0c      	ite	eq
 8004598:	2202      	moveq	r2, #2
 800459a:	2200      	movne	r2, #0
 800459c:	f000 b800 	b.w	80045a0 <setvbuf>

080045a0 <setvbuf>:
 80045a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80045a4:	461d      	mov	r5, r3
 80045a6:	4b51      	ldr	r3, [pc, #324]	; (80046ec <setvbuf+0x14c>)
 80045a8:	681e      	ldr	r6, [r3, #0]
 80045aa:	4604      	mov	r4, r0
 80045ac:	460f      	mov	r7, r1
 80045ae:	4690      	mov	r8, r2
 80045b0:	b126      	cbz	r6, 80045bc <setvbuf+0x1c>
 80045b2:	69b3      	ldr	r3, [r6, #24]
 80045b4:	b913      	cbnz	r3, 80045bc <setvbuf+0x1c>
 80045b6:	4630      	mov	r0, r6
 80045b8:	f000 fa50 	bl	8004a5c <__sinit>
 80045bc:	4b4c      	ldr	r3, [pc, #304]	; (80046f0 <setvbuf+0x150>)
 80045be:	429c      	cmp	r4, r3
 80045c0:	d152      	bne.n	8004668 <setvbuf+0xc8>
 80045c2:	6874      	ldr	r4, [r6, #4]
 80045c4:	f1b8 0f02 	cmp.w	r8, #2
 80045c8:	d006      	beq.n	80045d8 <setvbuf+0x38>
 80045ca:	f1b8 0f01 	cmp.w	r8, #1
 80045ce:	f200 8089 	bhi.w	80046e4 <setvbuf+0x144>
 80045d2:	2d00      	cmp	r5, #0
 80045d4:	f2c0 8086 	blt.w	80046e4 <setvbuf+0x144>
 80045d8:	4621      	mov	r1, r4
 80045da:	4630      	mov	r0, r6
 80045dc:	f000 f9d4 	bl	8004988 <_fflush_r>
 80045e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045e2:	b141      	cbz	r1, 80045f6 <setvbuf+0x56>
 80045e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045e8:	4299      	cmp	r1, r3
 80045ea:	d002      	beq.n	80045f2 <setvbuf+0x52>
 80045ec:	4630      	mov	r0, r6
 80045ee:	f000 fb2b 	bl	8004c48 <_free_r>
 80045f2:	2300      	movs	r3, #0
 80045f4:	6363      	str	r3, [r4, #52]	; 0x34
 80045f6:	2300      	movs	r3, #0
 80045f8:	61a3      	str	r3, [r4, #24]
 80045fa:	6063      	str	r3, [r4, #4]
 80045fc:	89a3      	ldrh	r3, [r4, #12]
 80045fe:	061b      	lsls	r3, r3, #24
 8004600:	d503      	bpl.n	800460a <setvbuf+0x6a>
 8004602:	6921      	ldr	r1, [r4, #16]
 8004604:	4630      	mov	r0, r6
 8004606:	f000 fb1f 	bl	8004c48 <_free_r>
 800460a:	89a3      	ldrh	r3, [r4, #12]
 800460c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004610:	f023 0303 	bic.w	r3, r3, #3
 8004614:	f1b8 0f02 	cmp.w	r8, #2
 8004618:	81a3      	strh	r3, [r4, #12]
 800461a:	d05d      	beq.n	80046d8 <setvbuf+0x138>
 800461c:	ab01      	add	r3, sp, #4
 800461e:	466a      	mov	r2, sp
 8004620:	4621      	mov	r1, r4
 8004622:	4630      	mov	r0, r6
 8004624:	f000 faa4 	bl	8004b70 <__swhatbuf_r>
 8004628:	89a3      	ldrh	r3, [r4, #12]
 800462a:	4318      	orrs	r0, r3
 800462c:	81a0      	strh	r0, [r4, #12]
 800462e:	bb2d      	cbnz	r5, 800467c <setvbuf+0xdc>
 8004630:	9d00      	ldr	r5, [sp, #0]
 8004632:	4628      	mov	r0, r5
 8004634:	f000 fb00 	bl	8004c38 <malloc>
 8004638:	4607      	mov	r7, r0
 800463a:	2800      	cmp	r0, #0
 800463c:	d14e      	bne.n	80046dc <setvbuf+0x13c>
 800463e:	f8dd 9000 	ldr.w	r9, [sp]
 8004642:	45a9      	cmp	r9, r5
 8004644:	d13c      	bne.n	80046c0 <setvbuf+0x120>
 8004646:	f04f 30ff 	mov.w	r0, #4294967295
 800464a:	89a3      	ldrh	r3, [r4, #12]
 800464c:	f043 0302 	orr.w	r3, r3, #2
 8004650:	81a3      	strh	r3, [r4, #12]
 8004652:	2300      	movs	r3, #0
 8004654:	60a3      	str	r3, [r4, #8]
 8004656:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800465a:	6023      	str	r3, [r4, #0]
 800465c:	6123      	str	r3, [r4, #16]
 800465e:	2301      	movs	r3, #1
 8004660:	6163      	str	r3, [r4, #20]
 8004662:	b003      	add	sp, #12
 8004664:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004668:	4b22      	ldr	r3, [pc, #136]	; (80046f4 <setvbuf+0x154>)
 800466a:	429c      	cmp	r4, r3
 800466c:	d101      	bne.n	8004672 <setvbuf+0xd2>
 800466e:	68b4      	ldr	r4, [r6, #8]
 8004670:	e7a8      	b.n	80045c4 <setvbuf+0x24>
 8004672:	4b21      	ldr	r3, [pc, #132]	; (80046f8 <setvbuf+0x158>)
 8004674:	429c      	cmp	r4, r3
 8004676:	bf08      	it	eq
 8004678:	68f4      	ldreq	r4, [r6, #12]
 800467a:	e7a3      	b.n	80045c4 <setvbuf+0x24>
 800467c:	2f00      	cmp	r7, #0
 800467e:	d0d8      	beq.n	8004632 <setvbuf+0x92>
 8004680:	69b3      	ldr	r3, [r6, #24]
 8004682:	b913      	cbnz	r3, 800468a <setvbuf+0xea>
 8004684:	4630      	mov	r0, r6
 8004686:	f000 f9e9 	bl	8004a5c <__sinit>
 800468a:	f1b8 0f01 	cmp.w	r8, #1
 800468e:	bf08      	it	eq
 8004690:	89a3      	ldrheq	r3, [r4, #12]
 8004692:	6027      	str	r7, [r4, #0]
 8004694:	bf04      	itt	eq
 8004696:	f043 0301 	orreq.w	r3, r3, #1
 800469a:	81a3      	strheq	r3, [r4, #12]
 800469c:	89a3      	ldrh	r3, [r4, #12]
 800469e:	f013 0008 	ands.w	r0, r3, #8
 80046a2:	e9c4 7504 	strd	r7, r5, [r4, #16]
 80046a6:	d01b      	beq.n	80046e0 <setvbuf+0x140>
 80046a8:	f013 0001 	ands.w	r0, r3, #1
 80046ac:	bf18      	it	ne
 80046ae:	426d      	negne	r5, r5
 80046b0:	f04f 0300 	mov.w	r3, #0
 80046b4:	bf1d      	ittte	ne
 80046b6:	60a3      	strne	r3, [r4, #8]
 80046b8:	61a5      	strne	r5, [r4, #24]
 80046ba:	4618      	movne	r0, r3
 80046bc:	60a5      	streq	r5, [r4, #8]
 80046be:	e7d0      	b.n	8004662 <setvbuf+0xc2>
 80046c0:	4648      	mov	r0, r9
 80046c2:	f000 fab9 	bl	8004c38 <malloc>
 80046c6:	4607      	mov	r7, r0
 80046c8:	2800      	cmp	r0, #0
 80046ca:	d0bc      	beq.n	8004646 <setvbuf+0xa6>
 80046cc:	89a3      	ldrh	r3, [r4, #12]
 80046ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046d2:	81a3      	strh	r3, [r4, #12]
 80046d4:	464d      	mov	r5, r9
 80046d6:	e7d3      	b.n	8004680 <setvbuf+0xe0>
 80046d8:	2000      	movs	r0, #0
 80046da:	e7b6      	b.n	800464a <setvbuf+0xaa>
 80046dc:	46a9      	mov	r9, r5
 80046de:	e7f5      	b.n	80046cc <setvbuf+0x12c>
 80046e0:	60a0      	str	r0, [r4, #8]
 80046e2:	e7be      	b.n	8004662 <setvbuf+0xc2>
 80046e4:	f04f 30ff 	mov.w	r0, #4294967295
 80046e8:	e7bb      	b.n	8004662 <setvbuf+0xc2>
 80046ea:	bf00      	nop
 80046ec:	2000000c 	.word	0x2000000c
 80046f0:	08005560 	.word	0x08005560
 80046f4:	08005580 	.word	0x08005580
 80046f8:	08005540 	.word	0x08005540

080046fc <__swbuf_r>:
 80046fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fe:	460e      	mov	r6, r1
 8004700:	4614      	mov	r4, r2
 8004702:	4605      	mov	r5, r0
 8004704:	b118      	cbz	r0, 800470e <__swbuf_r+0x12>
 8004706:	6983      	ldr	r3, [r0, #24]
 8004708:	b90b      	cbnz	r3, 800470e <__swbuf_r+0x12>
 800470a:	f000 f9a7 	bl	8004a5c <__sinit>
 800470e:	4b21      	ldr	r3, [pc, #132]	; (8004794 <__swbuf_r+0x98>)
 8004710:	429c      	cmp	r4, r3
 8004712:	d12a      	bne.n	800476a <__swbuf_r+0x6e>
 8004714:	686c      	ldr	r4, [r5, #4]
 8004716:	69a3      	ldr	r3, [r4, #24]
 8004718:	60a3      	str	r3, [r4, #8]
 800471a:	89a3      	ldrh	r3, [r4, #12]
 800471c:	071a      	lsls	r2, r3, #28
 800471e:	d52e      	bpl.n	800477e <__swbuf_r+0x82>
 8004720:	6923      	ldr	r3, [r4, #16]
 8004722:	b363      	cbz	r3, 800477e <__swbuf_r+0x82>
 8004724:	6923      	ldr	r3, [r4, #16]
 8004726:	6820      	ldr	r0, [r4, #0]
 8004728:	1ac0      	subs	r0, r0, r3
 800472a:	6963      	ldr	r3, [r4, #20]
 800472c:	b2f6      	uxtb	r6, r6
 800472e:	4283      	cmp	r3, r0
 8004730:	4637      	mov	r7, r6
 8004732:	dc04      	bgt.n	800473e <__swbuf_r+0x42>
 8004734:	4621      	mov	r1, r4
 8004736:	4628      	mov	r0, r5
 8004738:	f000 f926 	bl	8004988 <_fflush_r>
 800473c:	bb28      	cbnz	r0, 800478a <__swbuf_r+0x8e>
 800473e:	68a3      	ldr	r3, [r4, #8]
 8004740:	3b01      	subs	r3, #1
 8004742:	60a3      	str	r3, [r4, #8]
 8004744:	6823      	ldr	r3, [r4, #0]
 8004746:	1c5a      	adds	r2, r3, #1
 8004748:	6022      	str	r2, [r4, #0]
 800474a:	701e      	strb	r6, [r3, #0]
 800474c:	6963      	ldr	r3, [r4, #20]
 800474e:	3001      	adds	r0, #1
 8004750:	4283      	cmp	r3, r0
 8004752:	d004      	beq.n	800475e <__swbuf_r+0x62>
 8004754:	89a3      	ldrh	r3, [r4, #12]
 8004756:	07db      	lsls	r3, r3, #31
 8004758:	d519      	bpl.n	800478e <__swbuf_r+0x92>
 800475a:	2e0a      	cmp	r6, #10
 800475c:	d117      	bne.n	800478e <__swbuf_r+0x92>
 800475e:	4621      	mov	r1, r4
 8004760:	4628      	mov	r0, r5
 8004762:	f000 f911 	bl	8004988 <_fflush_r>
 8004766:	b190      	cbz	r0, 800478e <__swbuf_r+0x92>
 8004768:	e00f      	b.n	800478a <__swbuf_r+0x8e>
 800476a:	4b0b      	ldr	r3, [pc, #44]	; (8004798 <__swbuf_r+0x9c>)
 800476c:	429c      	cmp	r4, r3
 800476e:	d101      	bne.n	8004774 <__swbuf_r+0x78>
 8004770:	68ac      	ldr	r4, [r5, #8]
 8004772:	e7d0      	b.n	8004716 <__swbuf_r+0x1a>
 8004774:	4b09      	ldr	r3, [pc, #36]	; (800479c <__swbuf_r+0xa0>)
 8004776:	429c      	cmp	r4, r3
 8004778:	bf08      	it	eq
 800477a:	68ec      	ldreq	r4, [r5, #12]
 800477c:	e7cb      	b.n	8004716 <__swbuf_r+0x1a>
 800477e:	4621      	mov	r1, r4
 8004780:	4628      	mov	r0, r5
 8004782:	f000 f80d 	bl	80047a0 <__swsetup_r>
 8004786:	2800      	cmp	r0, #0
 8004788:	d0cc      	beq.n	8004724 <__swbuf_r+0x28>
 800478a:	f04f 37ff 	mov.w	r7, #4294967295
 800478e:	4638      	mov	r0, r7
 8004790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004792:	bf00      	nop
 8004794:	08005560 	.word	0x08005560
 8004798:	08005580 	.word	0x08005580
 800479c:	08005540 	.word	0x08005540

080047a0 <__swsetup_r>:
 80047a0:	4b32      	ldr	r3, [pc, #200]	; (800486c <__swsetup_r+0xcc>)
 80047a2:	b570      	push	{r4, r5, r6, lr}
 80047a4:	681d      	ldr	r5, [r3, #0]
 80047a6:	4606      	mov	r6, r0
 80047a8:	460c      	mov	r4, r1
 80047aa:	b125      	cbz	r5, 80047b6 <__swsetup_r+0x16>
 80047ac:	69ab      	ldr	r3, [r5, #24]
 80047ae:	b913      	cbnz	r3, 80047b6 <__swsetup_r+0x16>
 80047b0:	4628      	mov	r0, r5
 80047b2:	f000 f953 	bl	8004a5c <__sinit>
 80047b6:	4b2e      	ldr	r3, [pc, #184]	; (8004870 <__swsetup_r+0xd0>)
 80047b8:	429c      	cmp	r4, r3
 80047ba:	d10f      	bne.n	80047dc <__swsetup_r+0x3c>
 80047bc:	686c      	ldr	r4, [r5, #4]
 80047be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	0715      	lsls	r5, r2, #28
 80047c6:	d42c      	bmi.n	8004822 <__swsetup_r+0x82>
 80047c8:	06d0      	lsls	r0, r2, #27
 80047ca:	d411      	bmi.n	80047f0 <__swsetup_r+0x50>
 80047cc:	2209      	movs	r2, #9
 80047ce:	6032      	str	r2, [r6, #0]
 80047d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047d4:	81a3      	strh	r3, [r4, #12]
 80047d6:	f04f 30ff 	mov.w	r0, #4294967295
 80047da:	e03e      	b.n	800485a <__swsetup_r+0xba>
 80047dc:	4b25      	ldr	r3, [pc, #148]	; (8004874 <__swsetup_r+0xd4>)
 80047de:	429c      	cmp	r4, r3
 80047e0:	d101      	bne.n	80047e6 <__swsetup_r+0x46>
 80047e2:	68ac      	ldr	r4, [r5, #8]
 80047e4:	e7eb      	b.n	80047be <__swsetup_r+0x1e>
 80047e6:	4b24      	ldr	r3, [pc, #144]	; (8004878 <__swsetup_r+0xd8>)
 80047e8:	429c      	cmp	r4, r3
 80047ea:	bf08      	it	eq
 80047ec:	68ec      	ldreq	r4, [r5, #12]
 80047ee:	e7e6      	b.n	80047be <__swsetup_r+0x1e>
 80047f0:	0751      	lsls	r1, r2, #29
 80047f2:	d512      	bpl.n	800481a <__swsetup_r+0x7a>
 80047f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047f6:	b141      	cbz	r1, 800480a <__swsetup_r+0x6a>
 80047f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047fc:	4299      	cmp	r1, r3
 80047fe:	d002      	beq.n	8004806 <__swsetup_r+0x66>
 8004800:	4630      	mov	r0, r6
 8004802:	f000 fa21 	bl	8004c48 <_free_r>
 8004806:	2300      	movs	r3, #0
 8004808:	6363      	str	r3, [r4, #52]	; 0x34
 800480a:	89a3      	ldrh	r3, [r4, #12]
 800480c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004810:	81a3      	strh	r3, [r4, #12]
 8004812:	2300      	movs	r3, #0
 8004814:	6063      	str	r3, [r4, #4]
 8004816:	6923      	ldr	r3, [r4, #16]
 8004818:	6023      	str	r3, [r4, #0]
 800481a:	89a3      	ldrh	r3, [r4, #12]
 800481c:	f043 0308 	orr.w	r3, r3, #8
 8004820:	81a3      	strh	r3, [r4, #12]
 8004822:	6923      	ldr	r3, [r4, #16]
 8004824:	b94b      	cbnz	r3, 800483a <__swsetup_r+0x9a>
 8004826:	89a3      	ldrh	r3, [r4, #12]
 8004828:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800482c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004830:	d003      	beq.n	800483a <__swsetup_r+0x9a>
 8004832:	4621      	mov	r1, r4
 8004834:	4630      	mov	r0, r6
 8004836:	f000 f9bf 	bl	8004bb8 <__smakebuf_r>
 800483a:	89a2      	ldrh	r2, [r4, #12]
 800483c:	f012 0301 	ands.w	r3, r2, #1
 8004840:	d00c      	beq.n	800485c <__swsetup_r+0xbc>
 8004842:	2300      	movs	r3, #0
 8004844:	60a3      	str	r3, [r4, #8]
 8004846:	6963      	ldr	r3, [r4, #20]
 8004848:	425b      	negs	r3, r3
 800484a:	61a3      	str	r3, [r4, #24]
 800484c:	6923      	ldr	r3, [r4, #16]
 800484e:	b953      	cbnz	r3, 8004866 <__swsetup_r+0xc6>
 8004850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004854:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004858:	d1ba      	bne.n	80047d0 <__swsetup_r+0x30>
 800485a:	bd70      	pop	{r4, r5, r6, pc}
 800485c:	0792      	lsls	r2, r2, #30
 800485e:	bf58      	it	pl
 8004860:	6963      	ldrpl	r3, [r4, #20]
 8004862:	60a3      	str	r3, [r4, #8]
 8004864:	e7f2      	b.n	800484c <__swsetup_r+0xac>
 8004866:	2000      	movs	r0, #0
 8004868:	e7f7      	b.n	800485a <__swsetup_r+0xba>
 800486a:	bf00      	nop
 800486c:	2000000c 	.word	0x2000000c
 8004870:	08005560 	.word	0x08005560
 8004874:	08005580 	.word	0x08005580
 8004878:	08005540 	.word	0x08005540

0800487c <__sflush_r>:
 800487c:	898a      	ldrh	r2, [r1, #12]
 800487e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004882:	4605      	mov	r5, r0
 8004884:	0710      	lsls	r0, r2, #28
 8004886:	460c      	mov	r4, r1
 8004888:	d458      	bmi.n	800493c <__sflush_r+0xc0>
 800488a:	684b      	ldr	r3, [r1, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	dc05      	bgt.n	800489c <__sflush_r+0x20>
 8004890:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004892:	2b00      	cmp	r3, #0
 8004894:	dc02      	bgt.n	800489c <__sflush_r+0x20>
 8004896:	2000      	movs	r0, #0
 8004898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800489c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800489e:	2e00      	cmp	r6, #0
 80048a0:	d0f9      	beq.n	8004896 <__sflush_r+0x1a>
 80048a2:	2300      	movs	r3, #0
 80048a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048a8:	682f      	ldr	r7, [r5, #0]
 80048aa:	6a21      	ldr	r1, [r4, #32]
 80048ac:	602b      	str	r3, [r5, #0]
 80048ae:	d032      	beq.n	8004916 <__sflush_r+0x9a>
 80048b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048b2:	89a3      	ldrh	r3, [r4, #12]
 80048b4:	075a      	lsls	r2, r3, #29
 80048b6:	d505      	bpl.n	80048c4 <__sflush_r+0x48>
 80048b8:	6863      	ldr	r3, [r4, #4]
 80048ba:	1ac0      	subs	r0, r0, r3
 80048bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048be:	b10b      	cbz	r3, 80048c4 <__sflush_r+0x48>
 80048c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048c2:	1ac0      	subs	r0, r0, r3
 80048c4:	2300      	movs	r3, #0
 80048c6:	4602      	mov	r2, r0
 80048c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048ca:	6a21      	ldr	r1, [r4, #32]
 80048cc:	4628      	mov	r0, r5
 80048ce:	47b0      	blx	r6
 80048d0:	1c43      	adds	r3, r0, #1
 80048d2:	89a3      	ldrh	r3, [r4, #12]
 80048d4:	d106      	bne.n	80048e4 <__sflush_r+0x68>
 80048d6:	6829      	ldr	r1, [r5, #0]
 80048d8:	291d      	cmp	r1, #29
 80048da:	d848      	bhi.n	800496e <__sflush_r+0xf2>
 80048dc:	4a29      	ldr	r2, [pc, #164]	; (8004984 <__sflush_r+0x108>)
 80048de:	40ca      	lsrs	r2, r1
 80048e0:	07d6      	lsls	r6, r2, #31
 80048e2:	d544      	bpl.n	800496e <__sflush_r+0xf2>
 80048e4:	2200      	movs	r2, #0
 80048e6:	6062      	str	r2, [r4, #4]
 80048e8:	04d9      	lsls	r1, r3, #19
 80048ea:	6922      	ldr	r2, [r4, #16]
 80048ec:	6022      	str	r2, [r4, #0]
 80048ee:	d504      	bpl.n	80048fa <__sflush_r+0x7e>
 80048f0:	1c42      	adds	r2, r0, #1
 80048f2:	d101      	bne.n	80048f8 <__sflush_r+0x7c>
 80048f4:	682b      	ldr	r3, [r5, #0]
 80048f6:	b903      	cbnz	r3, 80048fa <__sflush_r+0x7e>
 80048f8:	6560      	str	r0, [r4, #84]	; 0x54
 80048fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048fc:	602f      	str	r7, [r5, #0]
 80048fe:	2900      	cmp	r1, #0
 8004900:	d0c9      	beq.n	8004896 <__sflush_r+0x1a>
 8004902:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004906:	4299      	cmp	r1, r3
 8004908:	d002      	beq.n	8004910 <__sflush_r+0x94>
 800490a:	4628      	mov	r0, r5
 800490c:	f000 f99c 	bl	8004c48 <_free_r>
 8004910:	2000      	movs	r0, #0
 8004912:	6360      	str	r0, [r4, #52]	; 0x34
 8004914:	e7c0      	b.n	8004898 <__sflush_r+0x1c>
 8004916:	2301      	movs	r3, #1
 8004918:	4628      	mov	r0, r5
 800491a:	47b0      	blx	r6
 800491c:	1c41      	adds	r1, r0, #1
 800491e:	d1c8      	bne.n	80048b2 <__sflush_r+0x36>
 8004920:	682b      	ldr	r3, [r5, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d0c5      	beq.n	80048b2 <__sflush_r+0x36>
 8004926:	2b1d      	cmp	r3, #29
 8004928:	d001      	beq.n	800492e <__sflush_r+0xb2>
 800492a:	2b16      	cmp	r3, #22
 800492c:	d101      	bne.n	8004932 <__sflush_r+0xb6>
 800492e:	602f      	str	r7, [r5, #0]
 8004930:	e7b1      	b.n	8004896 <__sflush_r+0x1a>
 8004932:	89a3      	ldrh	r3, [r4, #12]
 8004934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004938:	81a3      	strh	r3, [r4, #12]
 800493a:	e7ad      	b.n	8004898 <__sflush_r+0x1c>
 800493c:	690f      	ldr	r7, [r1, #16]
 800493e:	2f00      	cmp	r7, #0
 8004940:	d0a9      	beq.n	8004896 <__sflush_r+0x1a>
 8004942:	0793      	lsls	r3, r2, #30
 8004944:	680e      	ldr	r6, [r1, #0]
 8004946:	bf08      	it	eq
 8004948:	694b      	ldreq	r3, [r1, #20]
 800494a:	600f      	str	r7, [r1, #0]
 800494c:	bf18      	it	ne
 800494e:	2300      	movne	r3, #0
 8004950:	eba6 0807 	sub.w	r8, r6, r7
 8004954:	608b      	str	r3, [r1, #8]
 8004956:	f1b8 0f00 	cmp.w	r8, #0
 800495a:	dd9c      	ble.n	8004896 <__sflush_r+0x1a>
 800495c:	4643      	mov	r3, r8
 800495e:	463a      	mov	r2, r7
 8004960:	6a21      	ldr	r1, [r4, #32]
 8004962:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004964:	4628      	mov	r0, r5
 8004966:	47b0      	blx	r6
 8004968:	2800      	cmp	r0, #0
 800496a:	dc06      	bgt.n	800497a <__sflush_r+0xfe>
 800496c:	89a3      	ldrh	r3, [r4, #12]
 800496e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004972:	81a3      	strh	r3, [r4, #12]
 8004974:	f04f 30ff 	mov.w	r0, #4294967295
 8004978:	e78e      	b.n	8004898 <__sflush_r+0x1c>
 800497a:	4407      	add	r7, r0
 800497c:	eba8 0800 	sub.w	r8, r8, r0
 8004980:	e7e9      	b.n	8004956 <__sflush_r+0xda>
 8004982:	bf00      	nop
 8004984:	20400001 	.word	0x20400001

08004988 <_fflush_r>:
 8004988:	b538      	push	{r3, r4, r5, lr}
 800498a:	690b      	ldr	r3, [r1, #16]
 800498c:	4605      	mov	r5, r0
 800498e:	460c      	mov	r4, r1
 8004990:	b1db      	cbz	r3, 80049ca <_fflush_r+0x42>
 8004992:	b118      	cbz	r0, 800499c <_fflush_r+0x14>
 8004994:	6983      	ldr	r3, [r0, #24]
 8004996:	b90b      	cbnz	r3, 800499c <_fflush_r+0x14>
 8004998:	f000 f860 	bl	8004a5c <__sinit>
 800499c:	4b0c      	ldr	r3, [pc, #48]	; (80049d0 <_fflush_r+0x48>)
 800499e:	429c      	cmp	r4, r3
 80049a0:	d109      	bne.n	80049b6 <_fflush_r+0x2e>
 80049a2:	686c      	ldr	r4, [r5, #4]
 80049a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049a8:	b17b      	cbz	r3, 80049ca <_fflush_r+0x42>
 80049aa:	4621      	mov	r1, r4
 80049ac:	4628      	mov	r0, r5
 80049ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049b2:	f7ff bf63 	b.w	800487c <__sflush_r>
 80049b6:	4b07      	ldr	r3, [pc, #28]	; (80049d4 <_fflush_r+0x4c>)
 80049b8:	429c      	cmp	r4, r3
 80049ba:	d101      	bne.n	80049c0 <_fflush_r+0x38>
 80049bc:	68ac      	ldr	r4, [r5, #8]
 80049be:	e7f1      	b.n	80049a4 <_fflush_r+0x1c>
 80049c0:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <_fflush_r+0x50>)
 80049c2:	429c      	cmp	r4, r3
 80049c4:	bf08      	it	eq
 80049c6:	68ec      	ldreq	r4, [r5, #12]
 80049c8:	e7ec      	b.n	80049a4 <_fflush_r+0x1c>
 80049ca:	2000      	movs	r0, #0
 80049cc:	bd38      	pop	{r3, r4, r5, pc}
 80049ce:	bf00      	nop
 80049d0:	08005560 	.word	0x08005560
 80049d4:	08005580 	.word	0x08005580
 80049d8:	08005540 	.word	0x08005540

080049dc <std>:
 80049dc:	2300      	movs	r3, #0
 80049de:	b510      	push	{r4, lr}
 80049e0:	4604      	mov	r4, r0
 80049e2:	e9c0 3300 	strd	r3, r3, [r0]
 80049e6:	6083      	str	r3, [r0, #8]
 80049e8:	8181      	strh	r1, [r0, #12]
 80049ea:	6643      	str	r3, [r0, #100]	; 0x64
 80049ec:	81c2      	strh	r2, [r0, #14]
 80049ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049f2:	6183      	str	r3, [r0, #24]
 80049f4:	4619      	mov	r1, r3
 80049f6:	2208      	movs	r2, #8
 80049f8:	305c      	adds	r0, #92	; 0x5c
 80049fa:	f7ff fd45 	bl	8004488 <memset>
 80049fe:	4b05      	ldr	r3, [pc, #20]	; (8004a14 <std+0x38>)
 8004a00:	6263      	str	r3, [r4, #36]	; 0x24
 8004a02:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <std+0x3c>)
 8004a04:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a06:	4b05      	ldr	r3, [pc, #20]	; (8004a1c <std+0x40>)
 8004a08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a0a:	4b05      	ldr	r3, [pc, #20]	; (8004a20 <std+0x44>)
 8004a0c:	6224      	str	r4, [r4, #32]
 8004a0e:	6323      	str	r3, [r4, #48]	; 0x30
 8004a10:	bd10      	pop	{r4, pc}
 8004a12:	bf00      	nop
 8004a14:	08005349 	.word	0x08005349
 8004a18:	0800536b 	.word	0x0800536b
 8004a1c:	080053a3 	.word	0x080053a3
 8004a20:	080053c7 	.word	0x080053c7

08004a24 <_cleanup_r>:
 8004a24:	4901      	ldr	r1, [pc, #4]	; (8004a2c <_cleanup_r+0x8>)
 8004a26:	f000 b885 	b.w	8004b34 <_fwalk_reent>
 8004a2a:	bf00      	nop
 8004a2c:	08004989 	.word	0x08004989

08004a30 <__sfmoreglue>:
 8004a30:	b570      	push	{r4, r5, r6, lr}
 8004a32:	1e4a      	subs	r2, r1, #1
 8004a34:	2568      	movs	r5, #104	; 0x68
 8004a36:	4355      	muls	r5, r2
 8004a38:	460e      	mov	r6, r1
 8004a3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a3e:	f000 f951 	bl	8004ce4 <_malloc_r>
 8004a42:	4604      	mov	r4, r0
 8004a44:	b140      	cbz	r0, 8004a58 <__sfmoreglue+0x28>
 8004a46:	2100      	movs	r1, #0
 8004a48:	e9c0 1600 	strd	r1, r6, [r0]
 8004a4c:	300c      	adds	r0, #12
 8004a4e:	60a0      	str	r0, [r4, #8]
 8004a50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a54:	f7ff fd18 	bl	8004488 <memset>
 8004a58:	4620      	mov	r0, r4
 8004a5a:	bd70      	pop	{r4, r5, r6, pc}

08004a5c <__sinit>:
 8004a5c:	6983      	ldr	r3, [r0, #24]
 8004a5e:	b510      	push	{r4, lr}
 8004a60:	4604      	mov	r4, r0
 8004a62:	bb33      	cbnz	r3, 8004ab2 <__sinit+0x56>
 8004a64:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004a68:	6503      	str	r3, [r0, #80]	; 0x50
 8004a6a:	4b12      	ldr	r3, [pc, #72]	; (8004ab4 <__sinit+0x58>)
 8004a6c:	4a12      	ldr	r2, [pc, #72]	; (8004ab8 <__sinit+0x5c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6282      	str	r2, [r0, #40]	; 0x28
 8004a72:	4298      	cmp	r0, r3
 8004a74:	bf04      	itt	eq
 8004a76:	2301      	moveq	r3, #1
 8004a78:	6183      	streq	r3, [r0, #24]
 8004a7a:	f000 f81f 	bl	8004abc <__sfp>
 8004a7e:	6060      	str	r0, [r4, #4]
 8004a80:	4620      	mov	r0, r4
 8004a82:	f000 f81b 	bl	8004abc <__sfp>
 8004a86:	60a0      	str	r0, [r4, #8]
 8004a88:	4620      	mov	r0, r4
 8004a8a:	f000 f817 	bl	8004abc <__sfp>
 8004a8e:	2200      	movs	r2, #0
 8004a90:	60e0      	str	r0, [r4, #12]
 8004a92:	2104      	movs	r1, #4
 8004a94:	6860      	ldr	r0, [r4, #4]
 8004a96:	f7ff ffa1 	bl	80049dc <std>
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	2109      	movs	r1, #9
 8004a9e:	68a0      	ldr	r0, [r4, #8]
 8004aa0:	f7ff ff9c 	bl	80049dc <std>
 8004aa4:	2202      	movs	r2, #2
 8004aa6:	2112      	movs	r1, #18
 8004aa8:	68e0      	ldr	r0, [r4, #12]
 8004aaa:	f7ff ff97 	bl	80049dc <std>
 8004aae:	2301      	movs	r3, #1
 8004ab0:	61a3      	str	r3, [r4, #24]
 8004ab2:	bd10      	pop	{r4, pc}
 8004ab4:	0800553c 	.word	0x0800553c
 8004ab8:	08004a25 	.word	0x08004a25

08004abc <__sfp>:
 8004abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004abe:	4b1b      	ldr	r3, [pc, #108]	; (8004b2c <__sfp+0x70>)
 8004ac0:	681e      	ldr	r6, [r3, #0]
 8004ac2:	69b3      	ldr	r3, [r6, #24]
 8004ac4:	4607      	mov	r7, r0
 8004ac6:	b913      	cbnz	r3, 8004ace <__sfp+0x12>
 8004ac8:	4630      	mov	r0, r6
 8004aca:	f7ff ffc7 	bl	8004a5c <__sinit>
 8004ace:	3648      	adds	r6, #72	; 0x48
 8004ad0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	d503      	bpl.n	8004ae0 <__sfp+0x24>
 8004ad8:	6833      	ldr	r3, [r6, #0]
 8004ada:	b133      	cbz	r3, 8004aea <__sfp+0x2e>
 8004adc:	6836      	ldr	r6, [r6, #0]
 8004ade:	e7f7      	b.n	8004ad0 <__sfp+0x14>
 8004ae0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004ae4:	b16d      	cbz	r5, 8004b02 <__sfp+0x46>
 8004ae6:	3468      	adds	r4, #104	; 0x68
 8004ae8:	e7f4      	b.n	8004ad4 <__sfp+0x18>
 8004aea:	2104      	movs	r1, #4
 8004aec:	4638      	mov	r0, r7
 8004aee:	f7ff ff9f 	bl	8004a30 <__sfmoreglue>
 8004af2:	6030      	str	r0, [r6, #0]
 8004af4:	2800      	cmp	r0, #0
 8004af6:	d1f1      	bne.n	8004adc <__sfp+0x20>
 8004af8:	230c      	movs	r3, #12
 8004afa:	603b      	str	r3, [r7, #0]
 8004afc:	4604      	mov	r4, r0
 8004afe:	4620      	mov	r0, r4
 8004b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b02:	4b0b      	ldr	r3, [pc, #44]	; (8004b30 <__sfp+0x74>)
 8004b04:	6665      	str	r5, [r4, #100]	; 0x64
 8004b06:	e9c4 5500 	strd	r5, r5, [r4]
 8004b0a:	60a5      	str	r5, [r4, #8]
 8004b0c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004b10:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004b14:	2208      	movs	r2, #8
 8004b16:	4629      	mov	r1, r5
 8004b18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b1c:	f7ff fcb4 	bl	8004488 <memset>
 8004b20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b28:	e7e9      	b.n	8004afe <__sfp+0x42>
 8004b2a:	bf00      	nop
 8004b2c:	0800553c 	.word	0x0800553c
 8004b30:	ffff0001 	.word	0xffff0001

08004b34 <_fwalk_reent>:
 8004b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b38:	4680      	mov	r8, r0
 8004b3a:	4689      	mov	r9, r1
 8004b3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004b40:	2600      	movs	r6, #0
 8004b42:	b914      	cbnz	r4, 8004b4a <_fwalk_reent+0x16>
 8004b44:	4630      	mov	r0, r6
 8004b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b4a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004b4e:	3f01      	subs	r7, #1
 8004b50:	d501      	bpl.n	8004b56 <_fwalk_reent+0x22>
 8004b52:	6824      	ldr	r4, [r4, #0]
 8004b54:	e7f5      	b.n	8004b42 <_fwalk_reent+0xe>
 8004b56:	89ab      	ldrh	r3, [r5, #12]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d907      	bls.n	8004b6c <_fwalk_reent+0x38>
 8004b5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b60:	3301      	adds	r3, #1
 8004b62:	d003      	beq.n	8004b6c <_fwalk_reent+0x38>
 8004b64:	4629      	mov	r1, r5
 8004b66:	4640      	mov	r0, r8
 8004b68:	47c8      	blx	r9
 8004b6a:	4306      	orrs	r6, r0
 8004b6c:	3568      	adds	r5, #104	; 0x68
 8004b6e:	e7ee      	b.n	8004b4e <_fwalk_reent+0x1a>

08004b70 <__swhatbuf_r>:
 8004b70:	b570      	push	{r4, r5, r6, lr}
 8004b72:	460e      	mov	r6, r1
 8004b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b78:	2900      	cmp	r1, #0
 8004b7a:	b096      	sub	sp, #88	; 0x58
 8004b7c:	4614      	mov	r4, r2
 8004b7e:	461d      	mov	r5, r3
 8004b80:	da07      	bge.n	8004b92 <__swhatbuf_r+0x22>
 8004b82:	2300      	movs	r3, #0
 8004b84:	602b      	str	r3, [r5, #0]
 8004b86:	89b3      	ldrh	r3, [r6, #12]
 8004b88:	061a      	lsls	r2, r3, #24
 8004b8a:	d410      	bmi.n	8004bae <__swhatbuf_r+0x3e>
 8004b8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b90:	e00e      	b.n	8004bb0 <__swhatbuf_r+0x40>
 8004b92:	466a      	mov	r2, sp
 8004b94:	f000 fc3e 	bl	8005414 <_fstat_r>
 8004b98:	2800      	cmp	r0, #0
 8004b9a:	dbf2      	blt.n	8004b82 <__swhatbuf_r+0x12>
 8004b9c:	9a01      	ldr	r2, [sp, #4]
 8004b9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004ba2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004ba6:	425a      	negs	r2, r3
 8004ba8:	415a      	adcs	r2, r3
 8004baa:	602a      	str	r2, [r5, #0]
 8004bac:	e7ee      	b.n	8004b8c <__swhatbuf_r+0x1c>
 8004bae:	2340      	movs	r3, #64	; 0x40
 8004bb0:	2000      	movs	r0, #0
 8004bb2:	6023      	str	r3, [r4, #0]
 8004bb4:	b016      	add	sp, #88	; 0x58
 8004bb6:	bd70      	pop	{r4, r5, r6, pc}

08004bb8 <__smakebuf_r>:
 8004bb8:	898b      	ldrh	r3, [r1, #12]
 8004bba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004bbc:	079d      	lsls	r5, r3, #30
 8004bbe:	4606      	mov	r6, r0
 8004bc0:	460c      	mov	r4, r1
 8004bc2:	d507      	bpl.n	8004bd4 <__smakebuf_r+0x1c>
 8004bc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004bc8:	6023      	str	r3, [r4, #0]
 8004bca:	6123      	str	r3, [r4, #16]
 8004bcc:	2301      	movs	r3, #1
 8004bce:	6163      	str	r3, [r4, #20]
 8004bd0:	b002      	add	sp, #8
 8004bd2:	bd70      	pop	{r4, r5, r6, pc}
 8004bd4:	ab01      	add	r3, sp, #4
 8004bd6:	466a      	mov	r2, sp
 8004bd8:	f7ff ffca 	bl	8004b70 <__swhatbuf_r>
 8004bdc:	9900      	ldr	r1, [sp, #0]
 8004bde:	4605      	mov	r5, r0
 8004be0:	4630      	mov	r0, r6
 8004be2:	f000 f87f 	bl	8004ce4 <_malloc_r>
 8004be6:	b948      	cbnz	r0, 8004bfc <__smakebuf_r+0x44>
 8004be8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bec:	059a      	lsls	r2, r3, #22
 8004bee:	d4ef      	bmi.n	8004bd0 <__smakebuf_r+0x18>
 8004bf0:	f023 0303 	bic.w	r3, r3, #3
 8004bf4:	f043 0302 	orr.w	r3, r3, #2
 8004bf8:	81a3      	strh	r3, [r4, #12]
 8004bfa:	e7e3      	b.n	8004bc4 <__smakebuf_r+0xc>
 8004bfc:	4b0d      	ldr	r3, [pc, #52]	; (8004c34 <__smakebuf_r+0x7c>)
 8004bfe:	62b3      	str	r3, [r6, #40]	; 0x28
 8004c00:	89a3      	ldrh	r3, [r4, #12]
 8004c02:	6020      	str	r0, [r4, #0]
 8004c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c08:	81a3      	strh	r3, [r4, #12]
 8004c0a:	9b00      	ldr	r3, [sp, #0]
 8004c0c:	6163      	str	r3, [r4, #20]
 8004c0e:	9b01      	ldr	r3, [sp, #4]
 8004c10:	6120      	str	r0, [r4, #16]
 8004c12:	b15b      	cbz	r3, 8004c2c <__smakebuf_r+0x74>
 8004c14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c18:	4630      	mov	r0, r6
 8004c1a:	f000 fc0d 	bl	8005438 <_isatty_r>
 8004c1e:	b128      	cbz	r0, 8004c2c <__smakebuf_r+0x74>
 8004c20:	89a3      	ldrh	r3, [r4, #12]
 8004c22:	f023 0303 	bic.w	r3, r3, #3
 8004c26:	f043 0301 	orr.w	r3, r3, #1
 8004c2a:	81a3      	strh	r3, [r4, #12]
 8004c2c:	89a3      	ldrh	r3, [r4, #12]
 8004c2e:	431d      	orrs	r5, r3
 8004c30:	81a5      	strh	r5, [r4, #12]
 8004c32:	e7cd      	b.n	8004bd0 <__smakebuf_r+0x18>
 8004c34:	08004a25 	.word	0x08004a25

08004c38 <malloc>:
 8004c38:	4b02      	ldr	r3, [pc, #8]	; (8004c44 <malloc+0xc>)
 8004c3a:	4601      	mov	r1, r0
 8004c3c:	6818      	ldr	r0, [r3, #0]
 8004c3e:	f000 b851 	b.w	8004ce4 <_malloc_r>
 8004c42:	bf00      	nop
 8004c44:	2000000c 	.word	0x2000000c

08004c48 <_free_r>:
 8004c48:	b538      	push	{r3, r4, r5, lr}
 8004c4a:	4605      	mov	r5, r0
 8004c4c:	2900      	cmp	r1, #0
 8004c4e:	d045      	beq.n	8004cdc <_free_r+0x94>
 8004c50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c54:	1f0c      	subs	r4, r1, #4
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	bfb8      	it	lt
 8004c5a:	18e4      	addlt	r4, r4, r3
 8004c5c:	f000 fc0e 	bl	800547c <__malloc_lock>
 8004c60:	4a1f      	ldr	r2, [pc, #124]	; (8004ce0 <_free_r+0x98>)
 8004c62:	6813      	ldr	r3, [r2, #0]
 8004c64:	4610      	mov	r0, r2
 8004c66:	b933      	cbnz	r3, 8004c76 <_free_r+0x2e>
 8004c68:	6063      	str	r3, [r4, #4]
 8004c6a:	6014      	str	r4, [r2, #0]
 8004c6c:	4628      	mov	r0, r5
 8004c6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c72:	f000 bc04 	b.w	800547e <__malloc_unlock>
 8004c76:	42a3      	cmp	r3, r4
 8004c78:	d90c      	bls.n	8004c94 <_free_r+0x4c>
 8004c7a:	6821      	ldr	r1, [r4, #0]
 8004c7c:	1862      	adds	r2, r4, r1
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	bf04      	itt	eq
 8004c82:	681a      	ldreq	r2, [r3, #0]
 8004c84:	685b      	ldreq	r3, [r3, #4]
 8004c86:	6063      	str	r3, [r4, #4]
 8004c88:	bf04      	itt	eq
 8004c8a:	1852      	addeq	r2, r2, r1
 8004c8c:	6022      	streq	r2, [r4, #0]
 8004c8e:	6004      	str	r4, [r0, #0]
 8004c90:	e7ec      	b.n	8004c6c <_free_r+0x24>
 8004c92:	4613      	mov	r3, r2
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	b10a      	cbz	r2, 8004c9c <_free_r+0x54>
 8004c98:	42a2      	cmp	r2, r4
 8004c9a:	d9fa      	bls.n	8004c92 <_free_r+0x4a>
 8004c9c:	6819      	ldr	r1, [r3, #0]
 8004c9e:	1858      	adds	r0, r3, r1
 8004ca0:	42a0      	cmp	r0, r4
 8004ca2:	d10b      	bne.n	8004cbc <_free_r+0x74>
 8004ca4:	6820      	ldr	r0, [r4, #0]
 8004ca6:	4401      	add	r1, r0
 8004ca8:	1858      	adds	r0, r3, r1
 8004caa:	4282      	cmp	r2, r0
 8004cac:	6019      	str	r1, [r3, #0]
 8004cae:	d1dd      	bne.n	8004c6c <_free_r+0x24>
 8004cb0:	6810      	ldr	r0, [r2, #0]
 8004cb2:	6852      	ldr	r2, [r2, #4]
 8004cb4:	605a      	str	r2, [r3, #4]
 8004cb6:	4401      	add	r1, r0
 8004cb8:	6019      	str	r1, [r3, #0]
 8004cba:	e7d7      	b.n	8004c6c <_free_r+0x24>
 8004cbc:	d902      	bls.n	8004cc4 <_free_r+0x7c>
 8004cbe:	230c      	movs	r3, #12
 8004cc0:	602b      	str	r3, [r5, #0]
 8004cc2:	e7d3      	b.n	8004c6c <_free_r+0x24>
 8004cc4:	6820      	ldr	r0, [r4, #0]
 8004cc6:	1821      	adds	r1, r4, r0
 8004cc8:	428a      	cmp	r2, r1
 8004cca:	bf04      	itt	eq
 8004ccc:	6811      	ldreq	r1, [r2, #0]
 8004cce:	6852      	ldreq	r2, [r2, #4]
 8004cd0:	6062      	str	r2, [r4, #4]
 8004cd2:	bf04      	itt	eq
 8004cd4:	1809      	addeq	r1, r1, r0
 8004cd6:	6021      	streq	r1, [r4, #0]
 8004cd8:	605c      	str	r4, [r3, #4]
 8004cda:	e7c7      	b.n	8004c6c <_free_r+0x24>
 8004cdc:	bd38      	pop	{r3, r4, r5, pc}
 8004cde:	bf00      	nop
 8004ce0:	20000090 	.word	0x20000090

08004ce4 <_malloc_r>:
 8004ce4:	b570      	push	{r4, r5, r6, lr}
 8004ce6:	1ccd      	adds	r5, r1, #3
 8004ce8:	f025 0503 	bic.w	r5, r5, #3
 8004cec:	3508      	adds	r5, #8
 8004cee:	2d0c      	cmp	r5, #12
 8004cf0:	bf38      	it	cc
 8004cf2:	250c      	movcc	r5, #12
 8004cf4:	2d00      	cmp	r5, #0
 8004cf6:	4606      	mov	r6, r0
 8004cf8:	db01      	blt.n	8004cfe <_malloc_r+0x1a>
 8004cfa:	42a9      	cmp	r1, r5
 8004cfc:	d903      	bls.n	8004d06 <_malloc_r+0x22>
 8004cfe:	230c      	movs	r3, #12
 8004d00:	6033      	str	r3, [r6, #0]
 8004d02:	2000      	movs	r0, #0
 8004d04:	bd70      	pop	{r4, r5, r6, pc}
 8004d06:	f000 fbb9 	bl	800547c <__malloc_lock>
 8004d0a:	4a21      	ldr	r2, [pc, #132]	; (8004d90 <_malloc_r+0xac>)
 8004d0c:	6814      	ldr	r4, [r2, #0]
 8004d0e:	4621      	mov	r1, r4
 8004d10:	b991      	cbnz	r1, 8004d38 <_malloc_r+0x54>
 8004d12:	4c20      	ldr	r4, [pc, #128]	; (8004d94 <_malloc_r+0xb0>)
 8004d14:	6823      	ldr	r3, [r4, #0]
 8004d16:	b91b      	cbnz	r3, 8004d20 <_malloc_r+0x3c>
 8004d18:	4630      	mov	r0, r6
 8004d1a:	f000 fb05 	bl	8005328 <_sbrk_r>
 8004d1e:	6020      	str	r0, [r4, #0]
 8004d20:	4629      	mov	r1, r5
 8004d22:	4630      	mov	r0, r6
 8004d24:	f000 fb00 	bl	8005328 <_sbrk_r>
 8004d28:	1c43      	adds	r3, r0, #1
 8004d2a:	d124      	bne.n	8004d76 <_malloc_r+0x92>
 8004d2c:	230c      	movs	r3, #12
 8004d2e:	6033      	str	r3, [r6, #0]
 8004d30:	4630      	mov	r0, r6
 8004d32:	f000 fba4 	bl	800547e <__malloc_unlock>
 8004d36:	e7e4      	b.n	8004d02 <_malloc_r+0x1e>
 8004d38:	680b      	ldr	r3, [r1, #0]
 8004d3a:	1b5b      	subs	r3, r3, r5
 8004d3c:	d418      	bmi.n	8004d70 <_malloc_r+0x8c>
 8004d3e:	2b0b      	cmp	r3, #11
 8004d40:	d90f      	bls.n	8004d62 <_malloc_r+0x7e>
 8004d42:	600b      	str	r3, [r1, #0]
 8004d44:	50cd      	str	r5, [r1, r3]
 8004d46:	18cc      	adds	r4, r1, r3
 8004d48:	4630      	mov	r0, r6
 8004d4a:	f000 fb98 	bl	800547e <__malloc_unlock>
 8004d4e:	f104 000b 	add.w	r0, r4, #11
 8004d52:	1d23      	adds	r3, r4, #4
 8004d54:	f020 0007 	bic.w	r0, r0, #7
 8004d58:	1ac3      	subs	r3, r0, r3
 8004d5a:	d0d3      	beq.n	8004d04 <_malloc_r+0x20>
 8004d5c:	425a      	negs	r2, r3
 8004d5e:	50e2      	str	r2, [r4, r3]
 8004d60:	e7d0      	b.n	8004d04 <_malloc_r+0x20>
 8004d62:	428c      	cmp	r4, r1
 8004d64:	684b      	ldr	r3, [r1, #4]
 8004d66:	bf16      	itet	ne
 8004d68:	6063      	strne	r3, [r4, #4]
 8004d6a:	6013      	streq	r3, [r2, #0]
 8004d6c:	460c      	movne	r4, r1
 8004d6e:	e7eb      	b.n	8004d48 <_malloc_r+0x64>
 8004d70:	460c      	mov	r4, r1
 8004d72:	6849      	ldr	r1, [r1, #4]
 8004d74:	e7cc      	b.n	8004d10 <_malloc_r+0x2c>
 8004d76:	1cc4      	adds	r4, r0, #3
 8004d78:	f024 0403 	bic.w	r4, r4, #3
 8004d7c:	42a0      	cmp	r0, r4
 8004d7e:	d005      	beq.n	8004d8c <_malloc_r+0xa8>
 8004d80:	1a21      	subs	r1, r4, r0
 8004d82:	4630      	mov	r0, r6
 8004d84:	f000 fad0 	bl	8005328 <_sbrk_r>
 8004d88:	3001      	adds	r0, #1
 8004d8a:	d0cf      	beq.n	8004d2c <_malloc_r+0x48>
 8004d8c:	6025      	str	r5, [r4, #0]
 8004d8e:	e7db      	b.n	8004d48 <_malloc_r+0x64>
 8004d90:	20000090 	.word	0x20000090
 8004d94:	20000094 	.word	0x20000094

08004d98 <__sfputc_r>:
 8004d98:	6893      	ldr	r3, [r2, #8]
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	b410      	push	{r4}
 8004da0:	6093      	str	r3, [r2, #8]
 8004da2:	da08      	bge.n	8004db6 <__sfputc_r+0x1e>
 8004da4:	6994      	ldr	r4, [r2, #24]
 8004da6:	42a3      	cmp	r3, r4
 8004da8:	db01      	blt.n	8004dae <__sfputc_r+0x16>
 8004daa:	290a      	cmp	r1, #10
 8004dac:	d103      	bne.n	8004db6 <__sfputc_r+0x1e>
 8004dae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004db2:	f7ff bca3 	b.w	80046fc <__swbuf_r>
 8004db6:	6813      	ldr	r3, [r2, #0]
 8004db8:	1c58      	adds	r0, r3, #1
 8004dba:	6010      	str	r0, [r2, #0]
 8004dbc:	7019      	strb	r1, [r3, #0]
 8004dbe:	4608      	mov	r0, r1
 8004dc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <__sfputs_r>:
 8004dc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc8:	4606      	mov	r6, r0
 8004dca:	460f      	mov	r7, r1
 8004dcc:	4614      	mov	r4, r2
 8004dce:	18d5      	adds	r5, r2, r3
 8004dd0:	42ac      	cmp	r4, r5
 8004dd2:	d101      	bne.n	8004dd8 <__sfputs_r+0x12>
 8004dd4:	2000      	movs	r0, #0
 8004dd6:	e007      	b.n	8004de8 <__sfputs_r+0x22>
 8004dd8:	463a      	mov	r2, r7
 8004dda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dde:	4630      	mov	r0, r6
 8004de0:	f7ff ffda 	bl	8004d98 <__sfputc_r>
 8004de4:	1c43      	adds	r3, r0, #1
 8004de6:	d1f3      	bne.n	8004dd0 <__sfputs_r+0xa>
 8004de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004dec <_vfiprintf_r>:
 8004dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004df0:	460c      	mov	r4, r1
 8004df2:	b09d      	sub	sp, #116	; 0x74
 8004df4:	4617      	mov	r7, r2
 8004df6:	461d      	mov	r5, r3
 8004df8:	4606      	mov	r6, r0
 8004dfa:	b118      	cbz	r0, 8004e04 <_vfiprintf_r+0x18>
 8004dfc:	6983      	ldr	r3, [r0, #24]
 8004dfe:	b90b      	cbnz	r3, 8004e04 <_vfiprintf_r+0x18>
 8004e00:	f7ff fe2c 	bl	8004a5c <__sinit>
 8004e04:	4b7c      	ldr	r3, [pc, #496]	; (8004ff8 <_vfiprintf_r+0x20c>)
 8004e06:	429c      	cmp	r4, r3
 8004e08:	d158      	bne.n	8004ebc <_vfiprintf_r+0xd0>
 8004e0a:	6874      	ldr	r4, [r6, #4]
 8004e0c:	89a3      	ldrh	r3, [r4, #12]
 8004e0e:	0718      	lsls	r0, r3, #28
 8004e10:	d55e      	bpl.n	8004ed0 <_vfiprintf_r+0xe4>
 8004e12:	6923      	ldr	r3, [r4, #16]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d05b      	beq.n	8004ed0 <_vfiprintf_r+0xe4>
 8004e18:	2300      	movs	r3, #0
 8004e1a:	9309      	str	r3, [sp, #36]	; 0x24
 8004e1c:	2320      	movs	r3, #32
 8004e1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e22:	2330      	movs	r3, #48	; 0x30
 8004e24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e28:	9503      	str	r5, [sp, #12]
 8004e2a:	f04f 0b01 	mov.w	fp, #1
 8004e2e:	46b8      	mov	r8, r7
 8004e30:	4645      	mov	r5, r8
 8004e32:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004e36:	b10b      	cbz	r3, 8004e3c <_vfiprintf_r+0x50>
 8004e38:	2b25      	cmp	r3, #37	; 0x25
 8004e3a:	d154      	bne.n	8004ee6 <_vfiprintf_r+0xfa>
 8004e3c:	ebb8 0a07 	subs.w	sl, r8, r7
 8004e40:	d00b      	beq.n	8004e5a <_vfiprintf_r+0x6e>
 8004e42:	4653      	mov	r3, sl
 8004e44:	463a      	mov	r2, r7
 8004e46:	4621      	mov	r1, r4
 8004e48:	4630      	mov	r0, r6
 8004e4a:	f7ff ffbc 	bl	8004dc6 <__sfputs_r>
 8004e4e:	3001      	adds	r0, #1
 8004e50:	f000 80c2 	beq.w	8004fd8 <_vfiprintf_r+0x1ec>
 8004e54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e56:	4453      	add	r3, sl
 8004e58:	9309      	str	r3, [sp, #36]	; 0x24
 8004e5a:	f898 3000 	ldrb.w	r3, [r8]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f000 80ba 	beq.w	8004fd8 <_vfiprintf_r+0x1ec>
 8004e64:	2300      	movs	r3, #0
 8004e66:	f04f 32ff 	mov.w	r2, #4294967295
 8004e6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e6e:	9304      	str	r3, [sp, #16]
 8004e70:	9307      	str	r3, [sp, #28]
 8004e72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e76:	931a      	str	r3, [sp, #104]	; 0x68
 8004e78:	46a8      	mov	r8, r5
 8004e7a:	2205      	movs	r2, #5
 8004e7c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004e80:	485e      	ldr	r0, [pc, #376]	; (8004ffc <_vfiprintf_r+0x210>)
 8004e82:	f7fb f9c5 	bl	8000210 <memchr>
 8004e86:	9b04      	ldr	r3, [sp, #16]
 8004e88:	bb78      	cbnz	r0, 8004eea <_vfiprintf_r+0xfe>
 8004e8a:	06d9      	lsls	r1, r3, #27
 8004e8c:	bf44      	itt	mi
 8004e8e:	2220      	movmi	r2, #32
 8004e90:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004e94:	071a      	lsls	r2, r3, #28
 8004e96:	bf44      	itt	mi
 8004e98:	222b      	movmi	r2, #43	; 0x2b
 8004e9a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004e9e:	782a      	ldrb	r2, [r5, #0]
 8004ea0:	2a2a      	cmp	r2, #42	; 0x2a
 8004ea2:	d02a      	beq.n	8004efa <_vfiprintf_r+0x10e>
 8004ea4:	9a07      	ldr	r2, [sp, #28]
 8004ea6:	46a8      	mov	r8, r5
 8004ea8:	2000      	movs	r0, #0
 8004eaa:	250a      	movs	r5, #10
 8004eac:	4641      	mov	r1, r8
 8004eae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004eb2:	3b30      	subs	r3, #48	; 0x30
 8004eb4:	2b09      	cmp	r3, #9
 8004eb6:	d969      	bls.n	8004f8c <_vfiprintf_r+0x1a0>
 8004eb8:	b360      	cbz	r0, 8004f14 <_vfiprintf_r+0x128>
 8004eba:	e024      	b.n	8004f06 <_vfiprintf_r+0x11a>
 8004ebc:	4b50      	ldr	r3, [pc, #320]	; (8005000 <_vfiprintf_r+0x214>)
 8004ebe:	429c      	cmp	r4, r3
 8004ec0:	d101      	bne.n	8004ec6 <_vfiprintf_r+0xda>
 8004ec2:	68b4      	ldr	r4, [r6, #8]
 8004ec4:	e7a2      	b.n	8004e0c <_vfiprintf_r+0x20>
 8004ec6:	4b4f      	ldr	r3, [pc, #316]	; (8005004 <_vfiprintf_r+0x218>)
 8004ec8:	429c      	cmp	r4, r3
 8004eca:	bf08      	it	eq
 8004ecc:	68f4      	ldreq	r4, [r6, #12]
 8004ece:	e79d      	b.n	8004e0c <_vfiprintf_r+0x20>
 8004ed0:	4621      	mov	r1, r4
 8004ed2:	4630      	mov	r0, r6
 8004ed4:	f7ff fc64 	bl	80047a0 <__swsetup_r>
 8004ed8:	2800      	cmp	r0, #0
 8004eda:	d09d      	beq.n	8004e18 <_vfiprintf_r+0x2c>
 8004edc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee0:	b01d      	add	sp, #116	; 0x74
 8004ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ee6:	46a8      	mov	r8, r5
 8004ee8:	e7a2      	b.n	8004e30 <_vfiprintf_r+0x44>
 8004eea:	4a44      	ldr	r2, [pc, #272]	; (8004ffc <_vfiprintf_r+0x210>)
 8004eec:	1a80      	subs	r0, r0, r2
 8004eee:	fa0b f000 	lsl.w	r0, fp, r0
 8004ef2:	4318      	orrs	r0, r3
 8004ef4:	9004      	str	r0, [sp, #16]
 8004ef6:	4645      	mov	r5, r8
 8004ef8:	e7be      	b.n	8004e78 <_vfiprintf_r+0x8c>
 8004efa:	9a03      	ldr	r2, [sp, #12]
 8004efc:	1d11      	adds	r1, r2, #4
 8004efe:	6812      	ldr	r2, [r2, #0]
 8004f00:	9103      	str	r1, [sp, #12]
 8004f02:	2a00      	cmp	r2, #0
 8004f04:	db01      	blt.n	8004f0a <_vfiprintf_r+0x11e>
 8004f06:	9207      	str	r2, [sp, #28]
 8004f08:	e004      	b.n	8004f14 <_vfiprintf_r+0x128>
 8004f0a:	4252      	negs	r2, r2
 8004f0c:	f043 0302 	orr.w	r3, r3, #2
 8004f10:	9207      	str	r2, [sp, #28]
 8004f12:	9304      	str	r3, [sp, #16]
 8004f14:	f898 3000 	ldrb.w	r3, [r8]
 8004f18:	2b2e      	cmp	r3, #46	; 0x2e
 8004f1a:	d10e      	bne.n	8004f3a <_vfiprintf_r+0x14e>
 8004f1c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004f20:	2b2a      	cmp	r3, #42	; 0x2a
 8004f22:	d138      	bne.n	8004f96 <_vfiprintf_r+0x1aa>
 8004f24:	9b03      	ldr	r3, [sp, #12]
 8004f26:	1d1a      	adds	r2, r3, #4
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	9203      	str	r2, [sp, #12]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	bfb8      	it	lt
 8004f30:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f34:	f108 0802 	add.w	r8, r8, #2
 8004f38:	9305      	str	r3, [sp, #20]
 8004f3a:	4d33      	ldr	r5, [pc, #204]	; (8005008 <_vfiprintf_r+0x21c>)
 8004f3c:	f898 1000 	ldrb.w	r1, [r8]
 8004f40:	2203      	movs	r2, #3
 8004f42:	4628      	mov	r0, r5
 8004f44:	f7fb f964 	bl	8000210 <memchr>
 8004f48:	b140      	cbz	r0, 8004f5c <_vfiprintf_r+0x170>
 8004f4a:	2340      	movs	r3, #64	; 0x40
 8004f4c:	1b40      	subs	r0, r0, r5
 8004f4e:	fa03 f000 	lsl.w	r0, r3, r0
 8004f52:	9b04      	ldr	r3, [sp, #16]
 8004f54:	4303      	orrs	r3, r0
 8004f56:	f108 0801 	add.w	r8, r8, #1
 8004f5a:	9304      	str	r3, [sp, #16]
 8004f5c:	f898 1000 	ldrb.w	r1, [r8]
 8004f60:	482a      	ldr	r0, [pc, #168]	; (800500c <_vfiprintf_r+0x220>)
 8004f62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f66:	2206      	movs	r2, #6
 8004f68:	f108 0701 	add.w	r7, r8, #1
 8004f6c:	f7fb f950 	bl	8000210 <memchr>
 8004f70:	2800      	cmp	r0, #0
 8004f72:	d037      	beq.n	8004fe4 <_vfiprintf_r+0x1f8>
 8004f74:	4b26      	ldr	r3, [pc, #152]	; (8005010 <_vfiprintf_r+0x224>)
 8004f76:	bb1b      	cbnz	r3, 8004fc0 <_vfiprintf_r+0x1d4>
 8004f78:	9b03      	ldr	r3, [sp, #12]
 8004f7a:	3307      	adds	r3, #7
 8004f7c:	f023 0307 	bic.w	r3, r3, #7
 8004f80:	3308      	adds	r3, #8
 8004f82:	9303      	str	r3, [sp, #12]
 8004f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f86:	444b      	add	r3, r9
 8004f88:	9309      	str	r3, [sp, #36]	; 0x24
 8004f8a:	e750      	b.n	8004e2e <_vfiprintf_r+0x42>
 8004f8c:	fb05 3202 	mla	r2, r5, r2, r3
 8004f90:	2001      	movs	r0, #1
 8004f92:	4688      	mov	r8, r1
 8004f94:	e78a      	b.n	8004eac <_vfiprintf_r+0xc0>
 8004f96:	2300      	movs	r3, #0
 8004f98:	f108 0801 	add.w	r8, r8, #1
 8004f9c:	9305      	str	r3, [sp, #20]
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	250a      	movs	r5, #10
 8004fa2:	4640      	mov	r0, r8
 8004fa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fa8:	3a30      	subs	r2, #48	; 0x30
 8004faa:	2a09      	cmp	r2, #9
 8004fac:	d903      	bls.n	8004fb6 <_vfiprintf_r+0x1ca>
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d0c3      	beq.n	8004f3a <_vfiprintf_r+0x14e>
 8004fb2:	9105      	str	r1, [sp, #20]
 8004fb4:	e7c1      	b.n	8004f3a <_vfiprintf_r+0x14e>
 8004fb6:	fb05 2101 	mla	r1, r5, r1, r2
 8004fba:	2301      	movs	r3, #1
 8004fbc:	4680      	mov	r8, r0
 8004fbe:	e7f0      	b.n	8004fa2 <_vfiprintf_r+0x1b6>
 8004fc0:	ab03      	add	r3, sp, #12
 8004fc2:	9300      	str	r3, [sp, #0]
 8004fc4:	4622      	mov	r2, r4
 8004fc6:	4b13      	ldr	r3, [pc, #76]	; (8005014 <_vfiprintf_r+0x228>)
 8004fc8:	a904      	add	r1, sp, #16
 8004fca:	4630      	mov	r0, r6
 8004fcc:	f3af 8000 	nop.w
 8004fd0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004fd4:	4681      	mov	r9, r0
 8004fd6:	d1d5      	bne.n	8004f84 <_vfiprintf_r+0x198>
 8004fd8:	89a3      	ldrh	r3, [r4, #12]
 8004fda:	065b      	lsls	r3, r3, #25
 8004fdc:	f53f af7e 	bmi.w	8004edc <_vfiprintf_r+0xf0>
 8004fe0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fe2:	e77d      	b.n	8004ee0 <_vfiprintf_r+0xf4>
 8004fe4:	ab03      	add	r3, sp, #12
 8004fe6:	9300      	str	r3, [sp, #0]
 8004fe8:	4622      	mov	r2, r4
 8004fea:	4b0a      	ldr	r3, [pc, #40]	; (8005014 <_vfiprintf_r+0x228>)
 8004fec:	a904      	add	r1, sp, #16
 8004fee:	4630      	mov	r0, r6
 8004ff0:	f000 f888 	bl	8005104 <_printf_i>
 8004ff4:	e7ec      	b.n	8004fd0 <_vfiprintf_r+0x1e4>
 8004ff6:	bf00      	nop
 8004ff8:	08005560 	.word	0x08005560
 8004ffc:	080055a0 	.word	0x080055a0
 8005000:	08005580 	.word	0x08005580
 8005004:	08005540 	.word	0x08005540
 8005008:	080055a6 	.word	0x080055a6
 800500c:	080055aa 	.word	0x080055aa
 8005010:	00000000 	.word	0x00000000
 8005014:	08004dc7 	.word	0x08004dc7

08005018 <_printf_common>:
 8005018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800501c:	4691      	mov	r9, r2
 800501e:	461f      	mov	r7, r3
 8005020:	688a      	ldr	r2, [r1, #8]
 8005022:	690b      	ldr	r3, [r1, #16]
 8005024:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005028:	4293      	cmp	r3, r2
 800502a:	bfb8      	it	lt
 800502c:	4613      	movlt	r3, r2
 800502e:	f8c9 3000 	str.w	r3, [r9]
 8005032:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005036:	4606      	mov	r6, r0
 8005038:	460c      	mov	r4, r1
 800503a:	b112      	cbz	r2, 8005042 <_printf_common+0x2a>
 800503c:	3301      	adds	r3, #1
 800503e:	f8c9 3000 	str.w	r3, [r9]
 8005042:	6823      	ldr	r3, [r4, #0]
 8005044:	0699      	lsls	r1, r3, #26
 8005046:	bf42      	ittt	mi
 8005048:	f8d9 3000 	ldrmi.w	r3, [r9]
 800504c:	3302      	addmi	r3, #2
 800504e:	f8c9 3000 	strmi.w	r3, [r9]
 8005052:	6825      	ldr	r5, [r4, #0]
 8005054:	f015 0506 	ands.w	r5, r5, #6
 8005058:	d107      	bne.n	800506a <_printf_common+0x52>
 800505a:	f104 0a19 	add.w	sl, r4, #25
 800505e:	68e3      	ldr	r3, [r4, #12]
 8005060:	f8d9 2000 	ldr.w	r2, [r9]
 8005064:	1a9b      	subs	r3, r3, r2
 8005066:	42ab      	cmp	r3, r5
 8005068:	dc28      	bgt.n	80050bc <_printf_common+0xa4>
 800506a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800506e:	6822      	ldr	r2, [r4, #0]
 8005070:	3300      	adds	r3, #0
 8005072:	bf18      	it	ne
 8005074:	2301      	movne	r3, #1
 8005076:	0692      	lsls	r2, r2, #26
 8005078:	d42d      	bmi.n	80050d6 <_printf_common+0xbe>
 800507a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800507e:	4639      	mov	r1, r7
 8005080:	4630      	mov	r0, r6
 8005082:	47c0      	blx	r8
 8005084:	3001      	adds	r0, #1
 8005086:	d020      	beq.n	80050ca <_printf_common+0xb2>
 8005088:	6823      	ldr	r3, [r4, #0]
 800508a:	68e5      	ldr	r5, [r4, #12]
 800508c:	f8d9 2000 	ldr.w	r2, [r9]
 8005090:	f003 0306 	and.w	r3, r3, #6
 8005094:	2b04      	cmp	r3, #4
 8005096:	bf08      	it	eq
 8005098:	1aad      	subeq	r5, r5, r2
 800509a:	68a3      	ldr	r3, [r4, #8]
 800509c:	6922      	ldr	r2, [r4, #16]
 800509e:	bf0c      	ite	eq
 80050a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050a4:	2500      	movne	r5, #0
 80050a6:	4293      	cmp	r3, r2
 80050a8:	bfc4      	itt	gt
 80050aa:	1a9b      	subgt	r3, r3, r2
 80050ac:	18ed      	addgt	r5, r5, r3
 80050ae:	f04f 0900 	mov.w	r9, #0
 80050b2:	341a      	adds	r4, #26
 80050b4:	454d      	cmp	r5, r9
 80050b6:	d11a      	bne.n	80050ee <_printf_common+0xd6>
 80050b8:	2000      	movs	r0, #0
 80050ba:	e008      	b.n	80050ce <_printf_common+0xb6>
 80050bc:	2301      	movs	r3, #1
 80050be:	4652      	mov	r2, sl
 80050c0:	4639      	mov	r1, r7
 80050c2:	4630      	mov	r0, r6
 80050c4:	47c0      	blx	r8
 80050c6:	3001      	adds	r0, #1
 80050c8:	d103      	bne.n	80050d2 <_printf_common+0xba>
 80050ca:	f04f 30ff 	mov.w	r0, #4294967295
 80050ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050d2:	3501      	adds	r5, #1
 80050d4:	e7c3      	b.n	800505e <_printf_common+0x46>
 80050d6:	18e1      	adds	r1, r4, r3
 80050d8:	1c5a      	adds	r2, r3, #1
 80050da:	2030      	movs	r0, #48	; 0x30
 80050dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050e0:	4422      	add	r2, r4
 80050e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050ea:	3302      	adds	r3, #2
 80050ec:	e7c5      	b.n	800507a <_printf_common+0x62>
 80050ee:	2301      	movs	r3, #1
 80050f0:	4622      	mov	r2, r4
 80050f2:	4639      	mov	r1, r7
 80050f4:	4630      	mov	r0, r6
 80050f6:	47c0      	blx	r8
 80050f8:	3001      	adds	r0, #1
 80050fa:	d0e6      	beq.n	80050ca <_printf_common+0xb2>
 80050fc:	f109 0901 	add.w	r9, r9, #1
 8005100:	e7d8      	b.n	80050b4 <_printf_common+0x9c>
	...

08005104 <_printf_i>:
 8005104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005108:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800510c:	460c      	mov	r4, r1
 800510e:	7e09      	ldrb	r1, [r1, #24]
 8005110:	b085      	sub	sp, #20
 8005112:	296e      	cmp	r1, #110	; 0x6e
 8005114:	4617      	mov	r7, r2
 8005116:	4606      	mov	r6, r0
 8005118:	4698      	mov	r8, r3
 800511a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800511c:	f000 80b3 	beq.w	8005286 <_printf_i+0x182>
 8005120:	d822      	bhi.n	8005168 <_printf_i+0x64>
 8005122:	2963      	cmp	r1, #99	; 0x63
 8005124:	d036      	beq.n	8005194 <_printf_i+0x90>
 8005126:	d80a      	bhi.n	800513e <_printf_i+0x3a>
 8005128:	2900      	cmp	r1, #0
 800512a:	f000 80b9 	beq.w	80052a0 <_printf_i+0x19c>
 800512e:	2958      	cmp	r1, #88	; 0x58
 8005130:	f000 8083 	beq.w	800523a <_printf_i+0x136>
 8005134:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005138:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800513c:	e032      	b.n	80051a4 <_printf_i+0xa0>
 800513e:	2964      	cmp	r1, #100	; 0x64
 8005140:	d001      	beq.n	8005146 <_printf_i+0x42>
 8005142:	2969      	cmp	r1, #105	; 0x69
 8005144:	d1f6      	bne.n	8005134 <_printf_i+0x30>
 8005146:	6820      	ldr	r0, [r4, #0]
 8005148:	6813      	ldr	r3, [r2, #0]
 800514a:	0605      	lsls	r5, r0, #24
 800514c:	f103 0104 	add.w	r1, r3, #4
 8005150:	d52a      	bpl.n	80051a8 <_printf_i+0xa4>
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6011      	str	r1, [r2, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	da03      	bge.n	8005162 <_printf_i+0x5e>
 800515a:	222d      	movs	r2, #45	; 0x2d
 800515c:	425b      	negs	r3, r3
 800515e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005162:	486f      	ldr	r0, [pc, #444]	; (8005320 <_printf_i+0x21c>)
 8005164:	220a      	movs	r2, #10
 8005166:	e039      	b.n	80051dc <_printf_i+0xd8>
 8005168:	2973      	cmp	r1, #115	; 0x73
 800516a:	f000 809d 	beq.w	80052a8 <_printf_i+0x1a4>
 800516e:	d808      	bhi.n	8005182 <_printf_i+0x7e>
 8005170:	296f      	cmp	r1, #111	; 0x6f
 8005172:	d020      	beq.n	80051b6 <_printf_i+0xb2>
 8005174:	2970      	cmp	r1, #112	; 0x70
 8005176:	d1dd      	bne.n	8005134 <_printf_i+0x30>
 8005178:	6823      	ldr	r3, [r4, #0]
 800517a:	f043 0320 	orr.w	r3, r3, #32
 800517e:	6023      	str	r3, [r4, #0]
 8005180:	e003      	b.n	800518a <_printf_i+0x86>
 8005182:	2975      	cmp	r1, #117	; 0x75
 8005184:	d017      	beq.n	80051b6 <_printf_i+0xb2>
 8005186:	2978      	cmp	r1, #120	; 0x78
 8005188:	d1d4      	bne.n	8005134 <_printf_i+0x30>
 800518a:	2378      	movs	r3, #120	; 0x78
 800518c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005190:	4864      	ldr	r0, [pc, #400]	; (8005324 <_printf_i+0x220>)
 8005192:	e055      	b.n	8005240 <_printf_i+0x13c>
 8005194:	6813      	ldr	r3, [r2, #0]
 8005196:	1d19      	adds	r1, r3, #4
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	6011      	str	r1, [r2, #0]
 800519c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051a4:	2301      	movs	r3, #1
 80051a6:	e08c      	b.n	80052c2 <_printf_i+0x1be>
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	6011      	str	r1, [r2, #0]
 80051ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 80051b0:	bf18      	it	ne
 80051b2:	b21b      	sxthne	r3, r3
 80051b4:	e7cf      	b.n	8005156 <_printf_i+0x52>
 80051b6:	6813      	ldr	r3, [r2, #0]
 80051b8:	6825      	ldr	r5, [r4, #0]
 80051ba:	1d18      	adds	r0, r3, #4
 80051bc:	6010      	str	r0, [r2, #0]
 80051be:	0628      	lsls	r0, r5, #24
 80051c0:	d501      	bpl.n	80051c6 <_printf_i+0xc2>
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	e002      	b.n	80051cc <_printf_i+0xc8>
 80051c6:	0668      	lsls	r0, r5, #25
 80051c8:	d5fb      	bpl.n	80051c2 <_printf_i+0xbe>
 80051ca:	881b      	ldrh	r3, [r3, #0]
 80051cc:	4854      	ldr	r0, [pc, #336]	; (8005320 <_printf_i+0x21c>)
 80051ce:	296f      	cmp	r1, #111	; 0x6f
 80051d0:	bf14      	ite	ne
 80051d2:	220a      	movne	r2, #10
 80051d4:	2208      	moveq	r2, #8
 80051d6:	2100      	movs	r1, #0
 80051d8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051dc:	6865      	ldr	r5, [r4, #4]
 80051de:	60a5      	str	r5, [r4, #8]
 80051e0:	2d00      	cmp	r5, #0
 80051e2:	f2c0 8095 	blt.w	8005310 <_printf_i+0x20c>
 80051e6:	6821      	ldr	r1, [r4, #0]
 80051e8:	f021 0104 	bic.w	r1, r1, #4
 80051ec:	6021      	str	r1, [r4, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d13d      	bne.n	800526e <_printf_i+0x16a>
 80051f2:	2d00      	cmp	r5, #0
 80051f4:	f040 808e 	bne.w	8005314 <_printf_i+0x210>
 80051f8:	4665      	mov	r5, ip
 80051fa:	2a08      	cmp	r2, #8
 80051fc:	d10b      	bne.n	8005216 <_printf_i+0x112>
 80051fe:	6823      	ldr	r3, [r4, #0]
 8005200:	07db      	lsls	r3, r3, #31
 8005202:	d508      	bpl.n	8005216 <_printf_i+0x112>
 8005204:	6923      	ldr	r3, [r4, #16]
 8005206:	6862      	ldr	r2, [r4, #4]
 8005208:	429a      	cmp	r2, r3
 800520a:	bfde      	ittt	le
 800520c:	2330      	movle	r3, #48	; 0x30
 800520e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005212:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005216:	ebac 0305 	sub.w	r3, ip, r5
 800521a:	6123      	str	r3, [r4, #16]
 800521c:	f8cd 8000 	str.w	r8, [sp]
 8005220:	463b      	mov	r3, r7
 8005222:	aa03      	add	r2, sp, #12
 8005224:	4621      	mov	r1, r4
 8005226:	4630      	mov	r0, r6
 8005228:	f7ff fef6 	bl	8005018 <_printf_common>
 800522c:	3001      	adds	r0, #1
 800522e:	d14d      	bne.n	80052cc <_printf_i+0x1c8>
 8005230:	f04f 30ff 	mov.w	r0, #4294967295
 8005234:	b005      	add	sp, #20
 8005236:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800523a:	4839      	ldr	r0, [pc, #228]	; (8005320 <_printf_i+0x21c>)
 800523c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005240:	6813      	ldr	r3, [r2, #0]
 8005242:	6821      	ldr	r1, [r4, #0]
 8005244:	1d1d      	adds	r5, r3, #4
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6015      	str	r5, [r2, #0]
 800524a:	060a      	lsls	r2, r1, #24
 800524c:	d50b      	bpl.n	8005266 <_printf_i+0x162>
 800524e:	07ca      	lsls	r2, r1, #31
 8005250:	bf44      	itt	mi
 8005252:	f041 0120 	orrmi.w	r1, r1, #32
 8005256:	6021      	strmi	r1, [r4, #0]
 8005258:	b91b      	cbnz	r3, 8005262 <_printf_i+0x15e>
 800525a:	6822      	ldr	r2, [r4, #0]
 800525c:	f022 0220 	bic.w	r2, r2, #32
 8005260:	6022      	str	r2, [r4, #0]
 8005262:	2210      	movs	r2, #16
 8005264:	e7b7      	b.n	80051d6 <_printf_i+0xd2>
 8005266:	064d      	lsls	r5, r1, #25
 8005268:	bf48      	it	mi
 800526a:	b29b      	uxthmi	r3, r3
 800526c:	e7ef      	b.n	800524e <_printf_i+0x14a>
 800526e:	4665      	mov	r5, ip
 8005270:	fbb3 f1f2 	udiv	r1, r3, r2
 8005274:	fb02 3311 	mls	r3, r2, r1, r3
 8005278:	5cc3      	ldrb	r3, [r0, r3]
 800527a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800527e:	460b      	mov	r3, r1
 8005280:	2900      	cmp	r1, #0
 8005282:	d1f5      	bne.n	8005270 <_printf_i+0x16c>
 8005284:	e7b9      	b.n	80051fa <_printf_i+0xf6>
 8005286:	6813      	ldr	r3, [r2, #0]
 8005288:	6825      	ldr	r5, [r4, #0]
 800528a:	6961      	ldr	r1, [r4, #20]
 800528c:	1d18      	adds	r0, r3, #4
 800528e:	6010      	str	r0, [r2, #0]
 8005290:	0628      	lsls	r0, r5, #24
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	d501      	bpl.n	800529a <_printf_i+0x196>
 8005296:	6019      	str	r1, [r3, #0]
 8005298:	e002      	b.n	80052a0 <_printf_i+0x19c>
 800529a:	066a      	lsls	r2, r5, #25
 800529c:	d5fb      	bpl.n	8005296 <_printf_i+0x192>
 800529e:	8019      	strh	r1, [r3, #0]
 80052a0:	2300      	movs	r3, #0
 80052a2:	6123      	str	r3, [r4, #16]
 80052a4:	4665      	mov	r5, ip
 80052a6:	e7b9      	b.n	800521c <_printf_i+0x118>
 80052a8:	6813      	ldr	r3, [r2, #0]
 80052aa:	1d19      	adds	r1, r3, #4
 80052ac:	6011      	str	r1, [r2, #0]
 80052ae:	681d      	ldr	r5, [r3, #0]
 80052b0:	6862      	ldr	r2, [r4, #4]
 80052b2:	2100      	movs	r1, #0
 80052b4:	4628      	mov	r0, r5
 80052b6:	f7fa ffab 	bl	8000210 <memchr>
 80052ba:	b108      	cbz	r0, 80052c0 <_printf_i+0x1bc>
 80052bc:	1b40      	subs	r0, r0, r5
 80052be:	6060      	str	r0, [r4, #4]
 80052c0:	6863      	ldr	r3, [r4, #4]
 80052c2:	6123      	str	r3, [r4, #16]
 80052c4:	2300      	movs	r3, #0
 80052c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052ca:	e7a7      	b.n	800521c <_printf_i+0x118>
 80052cc:	6923      	ldr	r3, [r4, #16]
 80052ce:	462a      	mov	r2, r5
 80052d0:	4639      	mov	r1, r7
 80052d2:	4630      	mov	r0, r6
 80052d4:	47c0      	blx	r8
 80052d6:	3001      	adds	r0, #1
 80052d8:	d0aa      	beq.n	8005230 <_printf_i+0x12c>
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	079b      	lsls	r3, r3, #30
 80052de:	d413      	bmi.n	8005308 <_printf_i+0x204>
 80052e0:	68e0      	ldr	r0, [r4, #12]
 80052e2:	9b03      	ldr	r3, [sp, #12]
 80052e4:	4298      	cmp	r0, r3
 80052e6:	bfb8      	it	lt
 80052e8:	4618      	movlt	r0, r3
 80052ea:	e7a3      	b.n	8005234 <_printf_i+0x130>
 80052ec:	2301      	movs	r3, #1
 80052ee:	464a      	mov	r2, r9
 80052f0:	4639      	mov	r1, r7
 80052f2:	4630      	mov	r0, r6
 80052f4:	47c0      	blx	r8
 80052f6:	3001      	adds	r0, #1
 80052f8:	d09a      	beq.n	8005230 <_printf_i+0x12c>
 80052fa:	3501      	adds	r5, #1
 80052fc:	68e3      	ldr	r3, [r4, #12]
 80052fe:	9a03      	ldr	r2, [sp, #12]
 8005300:	1a9b      	subs	r3, r3, r2
 8005302:	42ab      	cmp	r3, r5
 8005304:	dcf2      	bgt.n	80052ec <_printf_i+0x1e8>
 8005306:	e7eb      	b.n	80052e0 <_printf_i+0x1dc>
 8005308:	2500      	movs	r5, #0
 800530a:	f104 0919 	add.w	r9, r4, #25
 800530e:	e7f5      	b.n	80052fc <_printf_i+0x1f8>
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1ac      	bne.n	800526e <_printf_i+0x16a>
 8005314:	7803      	ldrb	r3, [r0, #0]
 8005316:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800531a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800531e:	e76c      	b.n	80051fa <_printf_i+0xf6>
 8005320:	080055b1 	.word	0x080055b1
 8005324:	080055c2 	.word	0x080055c2

08005328 <_sbrk_r>:
 8005328:	b538      	push	{r3, r4, r5, lr}
 800532a:	4c06      	ldr	r4, [pc, #24]	; (8005344 <_sbrk_r+0x1c>)
 800532c:	2300      	movs	r3, #0
 800532e:	4605      	mov	r5, r0
 8005330:	4608      	mov	r0, r1
 8005332:	6023      	str	r3, [r4, #0]
 8005334:	f7fc f8d4 	bl	80014e0 <_sbrk>
 8005338:	1c43      	adds	r3, r0, #1
 800533a:	d102      	bne.n	8005342 <_sbrk_r+0x1a>
 800533c:	6823      	ldr	r3, [r4, #0]
 800533e:	b103      	cbz	r3, 8005342 <_sbrk_r+0x1a>
 8005340:	602b      	str	r3, [r5, #0]
 8005342:	bd38      	pop	{r3, r4, r5, pc}
 8005344:	200002ac 	.word	0x200002ac

08005348 <__sread>:
 8005348:	b510      	push	{r4, lr}
 800534a:	460c      	mov	r4, r1
 800534c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005350:	f000 f896 	bl	8005480 <_read_r>
 8005354:	2800      	cmp	r0, #0
 8005356:	bfab      	itete	ge
 8005358:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800535a:	89a3      	ldrhlt	r3, [r4, #12]
 800535c:	181b      	addge	r3, r3, r0
 800535e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005362:	bfac      	ite	ge
 8005364:	6563      	strge	r3, [r4, #84]	; 0x54
 8005366:	81a3      	strhlt	r3, [r4, #12]
 8005368:	bd10      	pop	{r4, pc}

0800536a <__swrite>:
 800536a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800536e:	461f      	mov	r7, r3
 8005370:	898b      	ldrh	r3, [r1, #12]
 8005372:	05db      	lsls	r3, r3, #23
 8005374:	4605      	mov	r5, r0
 8005376:	460c      	mov	r4, r1
 8005378:	4616      	mov	r6, r2
 800537a:	d505      	bpl.n	8005388 <__swrite+0x1e>
 800537c:	2302      	movs	r3, #2
 800537e:	2200      	movs	r2, #0
 8005380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005384:	f000 f868 	bl	8005458 <_lseek_r>
 8005388:	89a3      	ldrh	r3, [r4, #12]
 800538a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800538e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005392:	81a3      	strh	r3, [r4, #12]
 8005394:	4632      	mov	r2, r6
 8005396:	463b      	mov	r3, r7
 8005398:	4628      	mov	r0, r5
 800539a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800539e:	f000 b817 	b.w	80053d0 <_write_r>

080053a2 <__sseek>:
 80053a2:	b510      	push	{r4, lr}
 80053a4:	460c      	mov	r4, r1
 80053a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053aa:	f000 f855 	bl	8005458 <_lseek_r>
 80053ae:	1c43      	adds	r3, r0, #1
 80053b0:	89a3      	ldrh	r3, [r4, #12]
 80053b2:	bf15      	itete	ne
 80053b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80053b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80053ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80053be:	81a3      	strheq	r3, [r4, #12]
 80053c0:	bf18      	it	ne
 80053c2:	81a3      	strhne	r3, [r4, #12]
 80053c4:	bd10      	pop	{r4, pc}

080053c6 <__sclose>:
 80053c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053ca:	f000 b813 	b.w	80053f4 <_close_r>
	...

080053d0 <_write_r>:
 80053d0:	b538      	push	{r3, r4, r5, lr}
 80053d2:	4c07      	ldr	r4, [pc, #28]	; (80053f0 <_write_r+0x20>)
 80053d4:	4605      	mov	r5, r0
 80053d6:	4608      	mov	r0, r1
 80053d8:	4611      	mov	r1, r2
 80053da:	2200      	movs	r2, #0
 80053dc:	6022      	str	r2, [r4, #0]
 80053de:	461a      	mov	r2, r3
 80053e0:	f7fb f8e6 	bl	80005b0 <_write>
 80053e4:	1c43      	adds	r3, r0, #1
 80053e6:	d102      	bne.n	80053ee <_write_r+0x1e>
 80053e8:	6823      	ldr	r3, [r4, #0]
 80053ea:	b103      	cbz	r3, 80053ee <_write_r+0x1e>
 80053ec:	602b      	str	r3, [r5, #0]
 80053ee:	bd38      	pop	{r3, r4, r5, pc}
 80053f0:	200002ac 	.word	0x200002ac

080053f4 <_close_r>:
 80053f4:	b538      	push	{r3, r4, r5, lr}
 80053f6:	4c06      	ldr	r4, [pc, #24]	; (8005410 <_close_r+0x1c>)
 80053f8:	2300      	movs	r3, #0
 80053fa:	4605      	mov	r5, r0
 80053fc:	4608      	mov	r0, r1
 80053fe:	6023      	str	r3, [r4, #0]
 8005400:	f7fc f839 	bl	8001476 <_close>
 8005404:	1c43      	adds	r3, r0, #1
 8005406:	d102      	bne.n	800540e <_close_r+0x1a>
 8005408:	6823      	ldr	r3, [r4, #0]
 800540a:	b103      	cbz	r3, 800540e <_close_r+0x1a>
 800540c:	602b      	str	r3, [r5, #0]
 800540e:	bd38      	pop	{r3, r4, r5, pc}
 8005410:	200002ac 	.word	0x200002ac

08005414 <_fstat_r>:
 8005414:	b538      	push	{r3, r4, r5, lr}
 8005416:	4c07      	ldr	r4, [pc, #28]	; (8005434 <_fstat_r+0x20>)
 8005418:	2300      	movs	r3, #0
 800541a:	4605      	mov	r5, r0
 800541c:	4608      	mov	r0, r1
 800541e:	4611      	mov	r1, r2
 8005420:	6023      	str	r3, [r4, #0]
 8005422:	f7fc f834 	bl	800148e <_fstat>
 8005426:	1c43      	adds	r3, r0, #1
 8005428:	d102      	bne.n	8005430 <_fstat_r+0x1c>
 800542a:	6823      	ldr	r3, [r4, #0]
 800542c:	b103      	cbz	r3, 8005430 <_fstat_r+0x1c>
 800542e:	602b      	str	r3, [r5, #0]
 8005430:	bd38      	pop	{r3, r4, r5, pc}
 8005432:	bf00      	nop
 8005434:	200002ac 	.word	0x200002ac

08005438 <_isatty_r>:
 8005438:	b538      	push	{r3, r4, r5, lr}
 800543a:	4c06      	ldr	r4, [pc, #24]	; (8005454 <_isatty_r+0x1c>)
 800543c:	2300      	movs	r3, #0
 800543e:	4605      	mov	r5, r0
 8005440:	4608      	mov	r0, r1
 8005442:	6023      	str	r3, [r4, #0]
 8005444:	f7fc f833 	bl	80014ae <_isatty>
 8005448:	1c43      	adds	r3, r0, #1
 800544a:	d102      	bne.n	8005452 <_isatty_r+0x1a>
 800544c:	6823      	ldr	r3, [r4, #0]
 800544e:	b103      	cbz	r3, 8005452 <_isatty_r+0x1a>
 8005450:	602b      	str	r3, [r5, #0]
 8005452:	bd38      	pop	{r3, r4, r5, pc}
 8005454:	200002ac 	.word	0x200002ac

08005458 <_lseek_r>:
 8005458:	b538      	push	{r3, r4, r5, lr}
 800545a:	4c07      	ldr	r4, [pc, #28]	; (8005478 <_lseek_r+0x20>)
 800545c:	4605      	mov	r5, r0
 800545e:	4608      	mov	r0, r1
 8005460:	4611      	mov	r1, r2
 8005462:	2200      	movs	r2, #0
 8005464:	6022      	str	r2, [r4, #0]
 8005466:	461a      	mov	r2, r3
 8005468:	f7fc f82c 	bl	80014c4 <_lseek>
 800546c:	1c43      	adds	r3, r0, #1
 800546e:	d102      	bne.n	8005476 <_lseek_r+0x1e>
 8005470:	6823      	ldr	r3, [r4, #0]
 8005472:	b103      	cbz	r3, 8005476 <_lseek_r+0x1e>
 8005474:	602b      	str	r3, [r5, #0]
 8005476:	bd38      	pop	{r3, r4, r5, pc}
 8005478:	200002ac 	.word	0x200002ac

0800547c <__malloc_lock>:
 800547c:	4770      	bx	lr

0800547e <__malloc_unlock>:
 800547e:	4770      	bx	lr

08005480 <_read_r>:
 8005480:	b538      	push	{r3, r4, r5, lr}
 8005482:	4c07      	ldr	r4, [pc, #28]	; (80054a0 <_read_r+0x20>)
 8005484:	4605      	mov	r5, r0
 8005486:	4608      	mov	r0, r1
 8005488:	4611      	mov	r1, r2
 800548a:	2200      	movs	r2, #0
 800548c:	6022      	str	r2, [r4, #0]
 800548e:	461a      	mov	r2, r3
 8005490:	f7fb ffd4 	bl	800143c <_read>
 8005494:	1c43      	adds	r3, r0, #1
 8005496:	d102      	bne.n	800549e <_read_r+0x1e>
 8005498:	6823      	ldr	r3, [r4, #0]
 800549a:	b103      	cbz	r3, 800549e <_read_r+0x1e>
 800549c:	602b      	str	r3, [r5, #0]
 800549e:	bd38      	pop	{r3, r4, r5, pc}
 80054a0:	200002ac 	.word	0x200002ac

080054a4 <_init>:
 80054a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054a6:	bf00      	nop
 80054a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054aa:	bc08      	pop	{r3}
 80054ac:	469e      	mov	lr, r3
 80054ae:	4770      	bx	lr

080054b0 <_fini>:
 80054b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b2:	bf00      	nop
 80054b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054b6:	bc08      	pop	{r3}
 80054b8:	469e      	mov	lr, r3
 80054ba:	4770      	bx	lr
