
STM32F746_QSPI_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062e8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  080064b8  080064b8  000164b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065a4  080065a4  00020168  2**0
                  CONTENTS
  4 .ARM          00000008  080065a4  080065a4  000165a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065ac  080065ac  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065ac  080065ac  000165ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065b0  080065b0  000165b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  080065b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000085dc  20000168  0800671c  00020168  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008744  0800671c  00028744  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d0c  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003450  00000000  00000000  00037ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014f8  00000000  00000000  0003b2f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001360  00000000  00000000  0003c7f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029231  00000000  00000000  0003db50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001046a  00000000  00000000  00066d81  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fadc3  00000000  00000000  000771eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00171fae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cf4  00000000  00000000  0017202c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000168 	.word	0x20000168
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080064a0 	.word	0x080064a0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000016c 	.word	0x2000016c
 800020c:	080064a0 	.word	0x080064a0

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr

0800051e <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800051e:	b480      	push	{r7}
 8000520:	b083      	sub	sp, #12
 8000522:	af00      	add	r7, sp, #0
 8000524:	6078      	str	r0, [r7, #4]
 8000526:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000528:	bf00      	nop
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr

08000534 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
	...

08000544 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	4a07      	ldr	r2, [pc, #28]	; (8000570 <vApplicationGetIdleTaskMemory+0x2c>)
 8000554:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	4a06      	ldr	r2, [pc, #24]	; (8000574 <vApplicationGetIdleTaskMemory+0x30>)
 800055a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2280      	movs	r2, #128	; 0x80
 8000560:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000562:	bf00      	nop
 8000564:	3714      	adds	r7, #20
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	20000184 	.word	0x20000184
 8000574:	200001dc 	.word	0x200001dc

08000578 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write (int file, uint8_t *ptr, uint16_t len)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	4613      	mov	r3, r2
 8000584:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit(&huart1, ptr, len,10);
 8000586:	88fa      	ldrh	r2, [r7, #6]
 8000588:	230a      	movs	r3, #10
 800058a:	68b9      	ldr	r1, [r7, #8]
 800058c:	4803      	ldr	r0, [pc, #12]	; (800059c <_write+0x24>)
 800058e:	f003 fb47 	bl	8003c20 <HAL_UART_Transmit>

    return len;
 8000592:	88fb      	ldrh	r3, [r7, #6]
}
 8000594:	4618      	mov	r0, r3
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	2000853c 	.word	0x2000853c

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b5b0      	push	{r4, r5, r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f000 fdf4 	bl	8001192 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 f82d 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 f919 	bl	80007e4 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 80005b2:	f000 f8bb 	bl	800072c <MX_QUADSPI_Init>
  MX_USART1_UART_Init();
 80005b6:	f000 f8e5 	bl	8000784 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  setbuf(stdout, NULL);
 80005ba:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <main+0x58>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	689b      	ldr	r3, [r3, #8]
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f005 faaa 	bl	8005b1c <setbuf>
    printf("TEST DATA\r\n");
 80005c8:	480c      	ldr	r0, [pc, #48]	; (80005fc <main+0x5c>)
 80005ca:	f005 fa9f 	bl	8005b0c <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 80005ce:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <main+0x60>)
 80005d0:	1d3c      	adds	r4, r7, #4
 80005d2:	461d      	mov	r5, r3
 80005d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	2100      	movs	r1, #0
 80005e4:	4618      	mov	r0, r3
 80005e6:	f003 ffc2 	bl	800456e <osThreadCreate>
 80005ea:	4602      	mov	r2, r0
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <main+0x64>)
 80005ee:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005f0:	f003 ffb6 	bl	8004560 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <main+0x54>
 80005f6:	bf00      	nop
 80005f8:	20000104 	.word	0x20000104
 80005fc:	080064b8 	.word	0x080064b8
 8000600:	080064d0 	.word	0x080064d0
 8000604:	20008534 	.word	0x20008534

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b0b4      	sub	sp, #208	; 0xd0
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000612:	2230      	movs	r2, #48	; 0x30
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f005 fa14 	bl	8005a44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800062c:	f107 0308 	add.w	r3, r7, #8
 8000630:	2284      	movs	r2, #132	; 0x84
 8000632:	2100      	movs	r1, #0
 8000634:	4618      	mov	r0, r3
 8000636:	f005 fa05 	bl	8005a44 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800063a:	f001 f8d3 	bl	80017e4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063e:	4b39      	ldr	r3, [pc, #228]	; (8000724 <SystemClock_Config+0x11c>)
 8000640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000642:	4a38      	ldr	r2, [pc, #224]	; (8000724 <SystemClock_Config+0x11c>)
 8000644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000648:	6413      	str	r3, [r2, #64]	; 0x40
 800064a:	4b36      	ldr	r3, [pc, #216]	; (8000724 <SystemClock_Config+0x11c>)
 800064c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000656:	4b34      	ldr	r3, [pc, #208]	; (8000728 <SystemClock_Config+0x120>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a33      	ldr	r2, [pc, #204]	; (8000728 <SystemClock_Config+0x120>)
 800065c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000660:	6013      	str	r3, [r2, #0]
 8000662:	4b31      	ldr	r3, [pc, #196]	; (8000728 <SystemClock_Config+0x120>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800066e:	2302      	movs	r3, #2
 8000670:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000674:	2301      	movs	r3, #1
 8000676:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800067a:	2310      	movs	r3, #16
 800067c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000680:	2302      	movs	r3, #2
 8000682:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000686:	2300      	movs	r3, #0
 8000688:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 800068c:	2308      	movs	r3, #8
 800068e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000692:	23d8      	movs	r3, #216	; 0xd8
 8000694:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000698:	2302      	movs	r3, #2
 800069a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800069e:	2309      	movs	r3, #9
 80006a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80006a8:	4618      	mov	r0, r3
 80006aa:	f001 ff6f 	bl	800258c <HAL_RCC_OscConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80006b4:	f000 fb10 	bl	8000cd8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006b8:	f001 f8a4 	bl	8001804 <HAL_PWREx_EnableOverDrive>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80006c2:	f000 fb09 	bl	8000cd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	230f      	movs	r3, #15
 80006c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006cc:	2302      	movs	r3, #2
 80006ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006e8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80006ec:	2107      	movs	r1, #7
 80006ee:	4618      	mov	r0, r3
 80006f0:	f002 f9f0 	bl	8002ad4 <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80006fa:	f000 faed 	bl	8000cd8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80006fe:	2340      	movs	r3, #64	; 0x40
 8000700:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000702:	2300      	movs	r3, #0
 8000704:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000706:	f107 0308 	add.w	r3, r7, #8
 800070a:	4618      	mov	r0, r3
 800070c:	f002 fbe6 	bl	8002edc <HAL_RCCEx_PeriphCLKConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x112>
  {
    Error_Handler();
 8000716:	f000 fadf 	bl	8000cd8 <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	37d0      	adds	r7, #208	; 0xd0
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <MX_QUADSPI_Init+0x50>)
 8000732:	4a13      	ldr	r2, [pc, #76]	; (8000780 <MX_QUADSPI_Init+0x54>)
 8000734:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_QUADSPI_Init+0x50>)
 8000738:	2202      	movs	r2, #2
 800073a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_QUADSPI_Init+0x50>)
 800073e:	2204      	movs	r2, #4
 8000740:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_QUADSPI_Init+0x50>)
 8000744:	2210      	movs	r2, #16
 8000746:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 4;
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_QUADSPI_Init+0x50>)
 800074a:	2204      	movs	r2, #4
 800074c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_2_CYCLE;
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <MX_QUADSPI_Init+0x50>)
 8000750:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000754:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_QUADSPI_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800075c:	4b07      	ldr	r3, [pc, #28]	; (800077c <MX_QUADSPI_Init+0x50>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_QUADSPI_Init+0x50>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <MX_QUADSPI_Init+0x50>)
 800076a:	f001 f89b 	bl	80018a4 <HAL_QSPI_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000774:	f000 fab0 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200086b0 	.word	0x200086b0
 8000780:	a0001000 	.word	0xa0001000

08000784 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000788:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_USART1_UART_Init+0x58>)
 800078a:	4a15      	ldr	r2, [pc, #84]	; (80007e0 <MX_USART1_UART_Init+0x5c>)
 800078c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800078e:	4b13      	ldr	r3, [pc, #76]	; (80007dc <MX_USART1_UART_Init+0x58>)
 8000790:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000794:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_USART1_UART_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_USART1_UART_Init+0x58>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_USART1_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_USART1_UART_Init+0x58>)
 80007aa:	220c      	movs	r2, #12
 80007ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MX_USART1_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_USART1_UART_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <MX_USART1_UART_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_USART1_UART_Init+0x58>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_USART1_UART_Init+0x58>)
 80007c8:	f003 f9dc 	bl	8003b84 <HAL_UART_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007d2:	f000 fa81 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	2000853c 	.word	0x2000853c
 80007e0:	40011000 	.word	0x40011000

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b087      	sub	sp, #28
 80007e8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ea:	4b27      	ldr	r3, [pc, #156]	; (8000888 <MX_GPIO_Init+0xa4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a26      	ldr	r2, [pc, #152]	; (8000888 <MX_GPIO_Init+0xa4>)
 80007f0:	f043 0310 	orr.w	r3, r3, #16
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b24      	ldr	r3, [pc, #144]	; (8000888 <MX_GPIO_Init+0xa4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0310 	and.w	r3, r3, #16
 80007fe:	617b      	str	r3, [r7, #20]
 8000800:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	4b21      	ldr	r3, [pc, #132]	; (8000888 <MX_GPIO_Init+0xa4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a20      	ldr	r2, [pc, #128]	; (8000888 <MX_GPIO_Init+0xa4>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b1e      	ldr	r3, [pc, #120]	; (8000888 <MX_GPIO_Init+0xa4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <MX_GPIO_Init+0xa4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a1a      	ldr	r2, [pc, #104]	; (8000888 <MX_GPIO_Init+0xa4>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b18      	ldr	r3, [pc, #96]	; (8000888 <MX_GPIO_Init+0xa4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <MX_GPIO_Init+0xa4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a14      	ldr	r2, [pc, #80]	; (8000888 <MX_GPIO_Init+0xa4>)
 8000838:	f043 0304 	orr.w	r3, r3, #4
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b12      	ldr	r3, [pc, #72]	; (8000888 <MX_GPIO_Init+0xa4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0304 	and.w	r3, r3, #4
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084a:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_GPIO_Init+0xa4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a0e      	ldr	r2, [pc, #56]	; (8000888 <MX_GPIO_Init+0xa4>)
 8000850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_GPIO_Init+0xa4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_GPIO_Init+0xa4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a08      	ldr	r2, [pc, #32]	; (8000888 <MX_GPIO_Init+0xa4>)
 8000868:	f043 0308 	orr.w	r3, r3, #8
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_GPIO_Init+0xa4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0308 	and.w	r3, r3, #8
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]

}
 800087a:	bf00      	nop
 800087c:	371c      	adds	r7, #28
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800

0800088c <QSPI_WriteEnable>:
  * @brief  This function sends a Write Enable and waits until it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static void QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b096      	sub	sp, #88	; 0x58
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations ------------------------------------------ */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000894:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000898:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 800089a:	2306      	movs	r3, #6
 800089c:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 800089e:	2300      	movs	r3, #0
 80008a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80008b2:	2300      	movs	r3, #0
 80008b4:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80008b6:	2300      	movs	r3, #0
 80008b8:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80008ba:	f107 0120 	add.w	r1, r7, #32
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80008c4:	4618      	mov	r0, r3
 80008c6:	f001 f869 	bl	800199c <HAL_QSPI_Command>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <QSPI_WriteEnable+0x48>
  {
    Error_Handler();
 80008d0:	f000 fa02 	bl	8000cd8 <Error_Handler>
  }

  /* Configure automatic polling mode to wait for write enabling ---- */
  sConfig.Match           = 0x02;
 80008d4:	2302      	movs	r3, #2
 80008d6:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = 0x02;
 80008d8:	2302      	movs	r3, #2
 80008da:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 80008dc:	2300      	movs	r3, #0
 80008de:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 80008e0:	2301      	movs	r3, #1
 80008e2:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 80008e4:	2310      	movs	r3, #16
 80008e6:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80008e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008ec:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 80008ee:	2305      	movs	r3, #5
 80008f0:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 80008f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008f6:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80008f8:	f107 0208 	add.w	r2, r7, #8
 80008fc:	f107 0120 	add.w	r1, r7, #32
 8000900:	1d38      	adds	r0, r7, #4
 8000902:	f241 3388 	movw	r3, #5000	; 0x1388
 8000906:	f001 fb1a 	bl	8001f3e <HAL_QSPI_AutoPolling>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <QSPI_WriteEnable+0x88>
  {
    Error_Handler();
 8000910:	f000 f9e2 	bl	8000cd8 <Error_Handler>
  }
}
 8000914:	bf00      	nop
 8000916:	3758      	adds	r7, #88	; 0x58
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <QSPI_AutoPollingMemReady>:
  * @brief  This function reads the SR of the memory and awaits the EOP.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static void QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b096      	sub	sp, #88	; 0x58
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready ------ */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000924:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000928:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 800092a:	2305      	movs	r3, #5
 800092c:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 800092e:	2300      	movs	r3, #0
 8000930:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000932:	2300      	movs	r3, #0
 8000934:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8000936:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800093a:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000940:	2300      	movs	r3, #0
 8000942:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000944:	2300      	movs	r3, #0
 8000946:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode         = QSPI_SIOO_INST_EVERY_CMD;
 8000948:	2300      	movs	r3, #0
 800094a:	657b      	str	r3, [r7, #84]	; 0x54

  sConfig.Match           = 0x00;
 800094c:	2300      	movs	r3, #0
 800094e:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = 0x01;
 8000950:	2301      	movs	r3, #1
 8000952:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8000954:	2300      	movs	r3, #0
 8000956:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8000958:	2301      	movs	r3, #1
 800095a:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 800095c:	2310      	movs	r3, #16
 800095e:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8000960:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000964:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling_IT(&hqspi, &sCommand, &sConfig) != HAL_OK)
 8000966:	f107 0208 	add.w	r2, r7, #8
 800096a:	f107 0120 	add.w	r1, r7, #32
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	4618      	mov	r0, r3
 8000972:	f001 fb5b 	bl	800202c <HAL_QSPI_AutoPolling_IT>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <QSPI_AutoPollingMemReady+0x64>
  {
    Error_Handler();
 800097c:	f000 f9ac 	bl	8000cd8 <Error_Handler>
  }
}
 8000980:	bf00      	nop
 8000982:	3758      	adds	r7, #88	; 0x58
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <QSPI_DummyCyclesCfg>:
  * @brief  This function configures the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static void QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b094      	sub	sp, #80	; 0x50
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Read Volatile Configuration register --------------------------- */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000990:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_VOL_CFG_REG_CMD;
 8000996:	2385      	movs	r3, #133	; 0x85
 8000998:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 800099a:	2300      	movs	r3, #0
 800099c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800099e:	2300      	movs	r3, #0
 80009a0:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 80009a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009a6:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80009ac:	2300      	movs	r3, #0
 80009ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80009b0:	2300      	movs	r3, #0
 80009b2:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode         = QSPI_SIOO_INST_EVERY_CMD;
 80009b4:	2300      	movs	r3, #0
 80009b6:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.NbData            = 1;
 80009b8:	2301      	movs	r3, #1
 80009ba:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80009bc:	f107 0110 	add.w	r1, r7, #16
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 ffe8 	bl	800199c <HAL_QSPI_Command>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <QSPI_DummyCyclesCfg+0x4e>
  {
    Error_Handler();
 80009d2:	f000 f981 	bl	8000cd8 <Error_Handler>
  }

  if (HAL_QSPI_Receive(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80009d6:	f107 010f 	add.w	r1, r7, #15
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80009e0:	4618      	mov	r0, r3
 80009e2:	f001 f936 	bl	8001c52 <HAL_QSPI_Receive>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <QSPI_DummyCyclesCfg+0x68>
  {
    Error_Handler();
 80009ec:	f000 f974 	bl	8000cd8 <Error_Handler>
  }

  /* Enable write operations ---------------------------------------- */
  QSPI_WriteEnable(&hqspi);
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff ff4a 	bl	800088c <QSPI_WriteEnable>

  /* Write Volatile Configuration register (with new dummy cycles) -- */
  sCommand.Instruction = WRITE_VOL_CFG_REG_CMD;
 80009f8:	2381      	movs	r3, #129	; 0x81
 80009fa:	613b      	str	r3, [r7, #16]
  MODIFY_REG(reg, 0xF0, (DUMMY_CLOCK_CYCLES_READ_QUAD << POSITION_VAL(0xF0)));
 80009fc:	7bfb      	ldrb	r3, [r7, #15]
 80009fe:	b25b      	sxtb	r3, r3
 8000a00:	f003 030f 	and.w	r3, r3, #15
 8000a04:	b25a      	sxtb	r2, r3
 8000a06:	23f0      	movs	r3, #240	; 0xf0
 8000a08:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a0c:	fa93 f3a3 	rbit	r3, r3
 8000a10:	64bb      	str	r3, [r7, #72]	; 0x48
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000a12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a14:	fab3 f383 	clz	r3, r3
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	230a      	movs	r3, #10
 8000a1e:	408b      	lsls	r3, r1
 8000a20:	b25b      	sxtb	r3, r3
 8000a22:	4313      	orrs	r3, r2
 8000a24:	b25b      	sxtb	r3, r3
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	73fb      	strb	r3, [r7, #15]

  if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a2a:	f107 0110 	add.w	r1, r7, #16
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a34:	4618      	mov	r0, r3
 8000a36:	f000 ffb1 	bl	800199c <HAL_QSPI_Command>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <QSPI_DummyCyclesCfg+0xbc>
  {
    Error_Handler();
 8000a40:	f000 f94a 	bl	8000cd8 <Error_Handler>
  }

  if (HAL_QSPI_Transmit(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a44:	f107 010f 	add.w	r1, r7, #15
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f001 f868 	bl	8001b24 <HAL_QSPI_Transmit>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <QSPI_DummyCyclesCfg+0xd6>
  {
    Error_Handler();
 8000a5a:	f000 f93d 	bl	8000cd8 <Error_Handler>
  }
}
 8000a5e:	bf00      	nop
 8000a60:	3750      	adds	r7, #80	; 0x50
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b094      	sub	sp, #80	; 0x50
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	  QSPI_CommandTypeDef sCommand;
	  uint32_t address = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	64fb      	str	r3, [r7, #76]	; 0x4c
	  uint16_t index;
	  __IO uint8_t step = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  switch(step)
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	2b05      	cmp	r3, #5
 8000a7e:	f200 80f7 	bhi.w	8000c70 <StartDefaultTask+0x208>
 8000a82:	a201      	add	r2, pc, #4	; (adr r2, 8000a88 <StartDefaultTask+0x20>)
 8000a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a88:	08000aa1 	.word	0x08000aa1
 8000a8c:	08000b15 	.word	0x08000b15
 8000a90:	08000b3f 	.word	0x08000b3f
 8000a94:	08000ba9 	.word	0x08000ba9
 8000a98:	08000bd1 	.word	0x08000bd1
 8000a9c:	08000c2d 	.word	0x08000c2d
	 	  	      {
	 	  	        case 0:
	 	  	          CmdCplt = 0;
 8000aa0:	4b7b      	ldr	r3, [pc, #492]	; (8000c90 <StartDefaultTask+0x228>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]

	 	  	          /* Initialize Reception buffer --------------------------------------- */
	 	  	          for (index = 0; index < BUFFERSIZE; index++)
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8000aac:	e009      	b.n	8000ac2 <StartDefaultTask+0x5a>
	 	  	          {
	 	  	            aRxBuffer[index] = 0;
 8000aae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000ab2:	4a78      	ldr	r2, [pc, #480]	; (8000c94 <StartDefaultTask+0x22c>)
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	54d1      	strb	r1, [r2, r3]
	 	  	          for (index = 0; index < BUFFERSIZE; index++)
 8000ab8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000abc:	3301      	adds	r3, #1
 8000abe:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8000ac2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000ac6:	2bef      	cmp	r3, #239	; 0xef
 8000ac8:	d9f1      	bls.n	8000aae <StartDefaultTask+0x46>
	 	  	          }
	 	  	          printf("QSPI Write ENable Start\r\n");
 8000aca:	4873      	ldr	r0, [pc, #460]	; (8000c98 <StartDefaultTask+0x230>)
 8000acc:	f005 f81e 	bl	8005b0c <puts>
	 	  	          /* Enable write operations ------------------------------------------- */
	 	  	          QSPI_WriteEnable(&hqspi);
 8000ad0:	4872      	ldr	r0, [pc, #456]	; (8000c9c <StartDefaultTask+0x234>)
 8000ad2:	f7ff fedb 	bl	800088c <QSPI_WriteEnable>
	 	  	          printf("QSPI Write ENable END\r\n");
 8000ad6:	4872      	ldr	r0, [pc, #456]	; (8000ca0 <StartDefaultTask+0x238>)
 8000ad8:	f005 f818 	bl	8005b0c <puts>
	 	  	          /* Erasing Sequence -------------------------------------------------- */
	 	  	          sCommand.Instruction = SECTOR_ERASE_CMD;
 8000adc:	23d8      	movs	r3, #216	; 0xd8
 8000ade:	613b      	str	r3, [r7, #16]
	 	  	          sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8000ae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
	 	  	          sCommand.Address     = address;
 8000ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ae8:	617b      	str	r3, [r7, #20]
	 	  	          sCommand.DataMode    = QSPI_DATA_NONE;
 8000aea:	2300      	movs	r3, #0
 8000aec:	637b      	str	r3, [r7, #52]	; 0x34
	 	  	          sCommand.DummyCycles = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24

	 	  	          if (HAL_QSPI_Command_IT(&hqspi, &sCommand) != HAL_OK)
 8000af2:	f107 0310 	add.w	r3, r7, #16
 8000af6:	4619      	mov	r1, r3
 8000af8:	4868      	ldr	r0, [pc, #416]	; (8000c9c <StartDefaultTask+0x234>)
 8000afa:	f000 ffad 	bl	8001a58 <HAL_QSPI_Command_IT>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <StartDefaultTask+0xa0>
	 	  	          {
	 	  	            Error_Handler();
 8000b04:	f000 f8e8 	bl	8000cd8 <Error_Handler>
	 	  	          }

	 	  	          step++;
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	73fb      	strb	r3, [r7, #15]
	 	  	          break;
 8000b12:	e0b9      	b.n	8000c88 <StartDefaultTask+0x220>

	 	  	        case 1:
	 	  	          if(CmdCplt != 0)
 8000b14:	4b5e      	ldr	r3, [pc, #376]	; (8000c90 <StartDefaultTask+0x228>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	f000 80ab 	beq.w	8000c76 <StartDefaultTask+0x20e>
	 	  	          {
	 	  	            CmdCplt = 0;
 8000b20:	4b5b      	ldr	r3, [pc, #364]	; (8000c90 <StartDefaultTask+0x228>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	701a      	strb	r2, [r3, #0]
	 	  	            StatusMatch = 0;
 8000b26:	4b5f      	ldr	r3, [pc, #380]	; (8000ca4 <StartDefaultTask+0x23c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	701a      	strb	r2, [r3, #0]

	 	  	            /* Configure automatic polling mode to wait for end of erase ------- */
	 	  	            QSPI_AutoPollingMemReady(&hqspi);
 8000b2c:	485b      	ldr	r0, [pc, #364]	; (8000c9c <StartDefaultTask+0x234>)
 8000b2e:	f7ff fef5 	bl	800091c <QSPI_AutoPollingMemReady>

	 	  	            step++;
 8000b32:	7bfb      	ldrb	r3, [r7, #15]
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	3301      	adds	r3, #1
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	73fb      	strb	r3, [r7, #15]
	 	  	          }
	 	  	          break;
 8000b3c:	e09b      	b.n	8000c76 <StartDefaultTask+0x20e>

	 	  	        case 2:
	 	  	          if(StatusMatch != 0)
 8000b3e:	4b59      	ldr	r3, [pc, #356]	; (8000ca4 <StartDefaultTask+0x23c>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	f000 8098 	beq.w	8000c7a <StartDefaultTask+0x212>
	 	  	          {
	 	  	            StatusMatch = 0;
 8000b4a:	4b56      	ldr	r3, [pc, #344]	; (8000ca4 <StartDefaultTask+0x23c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	701a      	strb	r2, [r3, #0]
	 	  	            TxCplt = 0;
 8000b50:	4b55      	ldr	r3, [pc, #340]	; (8000ca8 <StartDefaultTask+0x240>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	701a      	strb	r2, [r3, #0]

	 	  	            /* Enable write operations ----------------------------------------- */
	 	  	            QSPI_WriteEnable(&hqspi);
 8000b56:	4851      	ldr	r0, [pc, #324]	; (8000c9c <StartDefaultTask+0x234>)
 8000b58:	f7ff fe98 	bl	800088c <QSPI_WriteEnable>

	 	  	            /* Writing Sequence ------------------------------------------------ */
	 	  	            sCommand.Instruction = QUAD_IN_FAST_PROG_CMD;
 8000b5c:	2332      	movs	r3, #50	; 0x32
 8000b5e:	613b      	str	r3, [r7, #16]
	 	  	            sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8000b60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
	 	  	            sCommand.DataMode    = QSPI_DATA_4_LINES;
 8000b66:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000b6a:	637b      	str	r3, [r7, #52]	; 0x34
	 	  	            sCommand.NbData      = BUFFERSIZE;
 8000b6c:	23f0      	movs	r3, #240	; 0xf0
 8000b6e:	63bb      	str	r3, [r7, #56]	; 0x38

	 	  	            if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b70:	f107 0310 	add.w	r3, r7, #16
 8000b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4848      	ldr	r0, [pc, #288]	; (8000c9c <StartDefaultTask+0x234>)
 8000b7c:	f000 ff0e 	bl	800199c <HAL_QSPI_Command>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <StartDefaultTask+0x122>
	 	  	            {
	 	  	              Error_Handler();
 8000b86:	f000 f8a7 	bl	8000cd8 <Error_Handler>
	 	  	            }

	 	  	            if (HAL_QSPI_Transmit_IT(&hqspi, aTxBuffer) != HAL_OK)
 8000b8a:	4948      	ldr	r1, [pc, #288]	; (8000cac <StartDefaultTask+0x244>)
 8000b8c:	4843      	ldr	r0, [pc, #268]	; (8000c9c <StartDefaultTask+0x234>)
 8000b8e:	f001 f902 	bl	8001d96 <HAL_QSPI_Transmit_IT>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <StartDefaultTask+0x134>
	 	  	            {
	 	  	              Error_Handler();
 8000b98:	f000 f89e 	bl	8000cd8 <Error_Handler>
	 	  	            }

	 	  	            step++;
 8000b9c:	7bfb      	ldrb	r3, [r7, #15]
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	73fb      	strb	r3, [r7, #15]
	 	  	          }
	 	  	          break;
 8000ba6:	e068      	b.n	8000c7a <StartDefaultTask+0x212>

	 	  	        case 3:
	 	  	          if(TxCplt != 0)
 8000ba8:	4b3f      	ldr	r3, [pc, #252]	; (8000ca8 <StartDefaultTask+0x240>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d065      	beq.n	8000c7e <StartDefaultTask+0x216>
	 	  	          {
	 	  	            TxCplt = 0;
 8000bb2:	4b3d      	ldr	r3, [pc, #244]	; (8000ca8 <StartDefaultTask+0x240>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	701a      	strb	r2, [r3, #0]
	 	  	            StatusMatch = 0;
 8000bb8:	4b3a      	ldr	r3, [pc, #232]	; (8000ca4 <StartDefaultTask+0x23c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]

	 	  	            /* Configure automatic polling mode to wait for end of program ----- */
	 	  	            QSPI_AutoPollingMemReady(&hqspi);
 8000bbe:	4837      	ldr	r0, [pc, #220]	; (8000c9c <StartDefaultTask+0x234>)
 8000bc0:	f7ff feac 	bl	800091c <QSPI_AutoPollingMemReady>

	 	  	            step++;
 8000bc4:	7bfb      	ldrb	r3, [r7, #15]
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	3301      	adds	r3, #1
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	73fb      	strb	r3, [r7, #15]
	 	  	          }
	 	  	          break;
 8000bce:	e056      	b.n	8000c7e <StartDefaultTask+0x216>

	 	  	        case 4:
	 	  	          if(StatusMatch != 0)
 8000bd0:	4b34      	ldr	r3, [pc, #208]	; (8000ca4 <StartDefaultTask+0x23c>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d053      	beq.n	8000c82 <StartDefaultTask+0x21a>
	 	  	          {
	 	  	            StatusMatch = 0;
 8000bda:	4b32      	ldr	r3, [pc, #200]	; (8000ca4 <StartDefaultTask+0x23c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	701a      	strb	r2, [r3, #0]
	 	  	            RxCplt = 0;
 8000be0:	4b33      	ldr	r3, [pc, #204]	; (8000cb0 <StartDefaultTask+0x248>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	701a      	strb	r2, [r3, #0]

	 	  	            /* Configure Volatile Configuration register (with new dummy cycles) */
	 	  	            QSPI_DummyCyclesCfg(&hqspi);
 8000be6:	482d      	ldr	r0, [pc, #180]	; (8000c9c <StartDefaultTask+0x234>)
 8000be8:	f7ff fece 	bl	8000988 <QSPI_DummyCyclesCfg>

	 	  	            /* Reading Sequence ------------------------------------------------ */
	 	  	            sCommand.Instruction = QUAD_OUT_FAST_READ_CMD;
 8000bec:	236b      	movs	r3, #107	; 0x6b
 8000bee:	613b      	str	r3, [r7, #16]
	 	  	            sCommand.DummyCycles = DUMMY_CLOCK_CYCLES_READ_QUAD;
 8000bf0:	230a      	movs	r3, #10
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24

	 	  	            if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000bf4:	f107 0310 	add.w	r3, r7, #16
 8000bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4827      	ldr	r0, [pc, #156]	; (8000c9c <StartDefaultTask+0x234>)
 8000c00:	f000 fecc 	bl	800199c <HAL_QSPI_Command>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <StartDefaultTask+0x1a6>
	 	  	            {
	 	  	              Error_Handler();
 8000c0a:	f000 f865 	bl	8000cd8 <Error_Handler>
	 	  	            }

	 	  	            if (HAL_QSPI_Receive_IT(&hqspi, aRxBuffer) != HAL_OK)
 8000c0e:	4921      	ldr	r1, [pc, #132]	; (8000c94 <StartDefaultTask+0x22c>)
 8000c10:	4822      	ldr	r0, [pc, #136]	; (8000c9c <StartDefaultTask+0x234>)
 8000c12:	f001 f925 	bl	8001e60 <HAL_QSPI_Receive_IT>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <StartDefaultTask+0x1b8>
	 	  	            {
	 	  	              Error_Handler();
 8000c1c:	f000 f85c 	bl	8000cd8 <Error_Handler>
	 	  	            }
	 	  	            step++;
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	3301      	adds	r3, #1
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	73fb      	strb	r3, [r7, #15]
	 	  	          }
	 	  	          break;
 8000c2a:	e02a      	b.n	8000c82 <StartDefaultTask+0x21a>

	 	  	        case 5:
	 	  	          if (RxCplt != 0)
 8000c2c:	4b20      	ldr	r3, [pc, #128]	; (8000cb0 <StartDefaultTask+0x248>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d027      	beq.n	8000c86 <StartDefaultTask+0x21e>
	 	  	          {
	 	  	            RxCplt = 0;
 8000c36:	4b1e      	ldr	r3, [pc, #120]	; (8000cb0 <StartDefaultTask+0x248>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]

	 	  	            /* Result comparison ----------------------------------------------- */
	 	  	            for (index = 0; index < BUFFERSIZE; index++)
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8000c42:	e004      	b.n	8000c4e <StartDefaultTask+0x1e6>
 8000c44:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000c48:	3301      	adds	r3, #1
 8000c4a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8000c4e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000c52:	2bef      	cmp	r3, #239	; 0xef
 8000c54:	d9f6      	bls.n	8000c44 <StartDefaultTask+0x1dc>
	 	  //	                BSP_LED_On(LED1);
	 	  	              }
	 	  	            }
	 	  //	            BSP_LED_Toggle(LED1);

	 	  	            address += QSPI_PAGE_SIZE;
 8000c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c58:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000c5c:	64fb      	str	r3, [r7, #76]	; 0x4c
	 	  	            if(address >= QSPI_END_ADDR)
 8000c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000c64:	d301      	bcc.n	8000c6a <StartDefaultTask+0x202>
	 	  	            {
	 	  	              address = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	64fb      	str	r3, [r7, #76]	; 0x4c
	 	  	            }
	 	  	            step = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	73fb      	strb	r3, [r7, #15]
	 	  	          }
	 	  	          break;
 8000c6e:	e00a      	b.n	8000c86 <StartDefaultTask+0x21e>

	 	  	        default :
	 	  	          Error_Handler();
 8000c70:	f000 f832 	bl	8000cd8 <Error_Handler>
 8000c74:	e008      	b.n	8000c88 <StartDefaultTask+0x220>
	 	  	          break;
 8000c76:	bf00      	nop
 8000c78:	e006      	b.n	8000c88 <StartDefaultTask+0x220>
	 	  	          break;
 8000c7a:	bf00      	nop
 8000c7c:	e004      	b.n	8000c88 <StartDefaultTask+0x220>
	 	  	          break;
 8000c7e:	bf00      	nop
 8000c80:	e002      	b.n	8000c88 <StartDefaultTask+0x220>
	 	  	          break;
 8000c82:	bf00      	nop
 8000c84:	e000      	b.n	8000c88 <StartDefaultTask+0x220>
	 	  	          break;
 8000c86:	bf00      	nop
	 	  	      }
    osDelay(1);
 8000c88:	2001      	movs	r0, #1
 8000c8a:	f003 fcbc 	bl	8004606 <osDelay>
	  switch(step)
 8000c8e:	e6f3      	b.n	8000a78 <StartDefaultTask+0x10>
 8000c90:	2000853a 	.word	0x2000853a
 8000c94:	200085c0 	.word	0x200085c0
 8000c98:	080064ec 	.word	0x080064ec
 8000c9c:	200086b0 	.word	0x200086b0
 8000ca0:	08006508 	.word	0x08006508
 8000ca4:	2000853b 	.word	0x2000853b
 8000ca8:	20008538 	.word	0x20008538
 8000cac:	20000000 	.word	0x20000000
 8000cb0:	20008539 	.word	0x20008539

08000cb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d101      	bne.n	8000cca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cc6:	f000 fa71 	bl	80011ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40001000 	.word	0x40001000

08000cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000cdc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cde:	e7fe      	b.n	8000cde <Error_Handler+0x6>

08000ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <HAL_MspInit+0x4c>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	4a10      	ldr	r2, [pc, #64]	; (8000d2c <HAL_MspInit+0x4c>)
 8000cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <HAL_MspInit+0x4c>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <HAL_MspInit+0x4c>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <HAL_MspInit+0x4c>)
 8000d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d08:	6453      	str	r3, [r2, #68]	; 0x44
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <HAL_MspInit+0x4c>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	210f      	movs	r1, #15
 8000d1a:	f06f 0001 	mvn.w	r0, #1
 8000d1e:	f000 fb1d 	bl	800135c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40023800 	.word	0x40023800

08000d30 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08c      	sub	sp, #48	; 0x30
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 031c 	add.w	r3, r7, #28
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a3b      	ldr	r2, [pc, #236]	; (8000e3c <HAL_QSPI_MspInit+0x10c>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d170      	bne.n	8000e34 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000d52:	4b3b      	ldr	r3, [pc, #236]	; (8000e40 <HAL_QSPI_MspInit+0x110>)
 8000d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d56:	4a3a      	ldr	r2, [pc, #232]	; (8000e40 <HAL_QSPI_MspInit+0x110>)
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	6393      	str	r3, [r2, #56]	; 0x38
 8000d5e:	4b38      	ldr	r3, [pc, #224]	; (8000e40 <HAL_QSPI_MspInit+0x110>)
 8000d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	61bb      	str	r3, [r7, #24]
 8000d68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d6a:	4b35      	ldr	r3, [pc, #212]	; (8000e40 <HAL_QSPI_MspInit+0x110>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a34      	ldr	r2, [pc, #208]	; (8000e40 <HAL_QSPI_MspInit+0x110>)
 8000d70:	f043 0310 	orr.w	r3, r3, #16
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b32      	ldr	r3, [pc, #200]	; (8000e40 <HAL_QSPI_MspInit+0x110>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0310 	and.w	r3, r3, #16
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d82:	4b2f      	ldr	r3, [pc, #188]	; (8000e40 <HAL_QSPI_MspInit+0x110>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a2e      	ldr	r2, [pc, #184]	; (8000e40 <HAL_QSPI_MspInit+0x110>)
 8000d88:	f043 0302 	orr.w	r3, r3, #2
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b2c      	ldr	r3, [pc, #176]	; (8000e40 <HAL_QSPI_MspInit+0x110>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d9a:	4b29      	ldr	r3, [pc, #164]	; (8000e40 <HAL_QSPI_MspInit+0x110>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	4a28      	ldr	r2, [pc, #160]	; (8000e40 <HAL_QSPI_MspInit+0x110>)
 8000da0:	f043 0308 	orr.w	r3, r3, #8
 8000da4:	6313      	str	r3, [r2, #48]	; 0x30
 8000da6:	4b26      	ldr	r3, [pc, #152]	; (8000e40 <HAL_QSPI_MspInit+0x110>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	f003 0308 	and.w	r3, r3, #8
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000db2:	2304      	movs	r3, #4
 8000db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000dc2:	2309      	movs	r3, #9
 8000dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dc6:	f107 031c 	add.w	r3, r7, #28
 8000dca:	4619      	mov	r1, r3
 8000dcc:	481d      	ldr	r0, [pc, #116]	; (8000e44 <HAL_QSPI_MspInit+0x114>)
 8000dce:	f000 fb5f 	bl	8001490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dd2:	2340      	movs	r3, #64	; 0x40
 8000dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dde:	2303      	movs	r3, #3
 8000de0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000de2:	230a      	movs	r3, #10
 8000de4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de6:	f107 031c 	add.w	r3, r7, #28
 8000dea:	4619      	mov	r1, r3
 8000dec:	4816      	ldr	r0, [pc, #88]	; (8000e48 <HAL_QSPI_MspInit+0x118>)
 8000dee:	f000 fb4f 	bl	8001490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000df2:	2304      	movs	r3, #4
 8000df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e02:	2309      	movs	r3, #9
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e06:	f107 031c 	add.w	r3, r7, #28
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	480e      	ldr	r0, [pc, #56]	; (8000e48 <HAL_QSPI_MspInit+0x118>)
 8000e0e:	f000 fb3f 	bl	8001490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
 8000e12:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e20:	2303      	movs	r3, #3
 8000e22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e24:	2309      	movs	r3, #9
 8000e26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e28:	f107 031c 	add.w	r3, r7, #28
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4807      	ldr	r0, [pc, #28]	; (8000e4c <HAL_QSPI_MspInit+0x11c>)
 8000e30:	f000 fb2e 	bl	8001490 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000e34:	bf00      	nop
 8000e36:	3730      	adds	r7, #48	; 0x30
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	a0001000 	.word	0xa0001000
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40021000 	.word	0x40021000
 8000e48:	40020400 	.word	0x40020400
 8000e4c:	40020c00 	.word	0x40020c00

08000e50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	; 0x28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a25      	ldr	r2, [pc, #148]	; (8000f04 <HAL_UART_MspInit+0xb4>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d144      	bne.n	8000efc <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e72:	4b25      	ldr	r3, [pc, #148]	; (8000f08 <HAL_UART_MspInit+0xb8>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e76:	4a24      	ldr	r2, [pc, #144]	; (8000f08 <HAL_UART_MspInit+0xb8>)
 8000e78:	f043 0310 	orr.w	r3, r3, #16
 8000e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e7e:	4b22      	ldr	r3, [pc, #136]	; (8000f08 <HAL_UART_MspInit+0xb8>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e82:	f003 0310 	and.w	r3, r3, #16
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8a:	4b1f      	ldr	r3, [pc, #124]	; (8000f08 <HAL_UART_MspInit+0xb8>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a1e      	ldr	r2, [pc, #120]	; (8000f08 <HAL_UART_MspInit+0xb8>)
 8000e90:	f043 0302 	orr.w	r3, r3, #2
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b1c      	ldr	r3, [pc, #112]	; (8000f08 <HAL_UART_MspInit+0xb8>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <HAL_UART_MspInit+0xb8>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a18      	ldr	r2, [pc, #96]	; (8000f08 <HAL_UART_MspInit+0xb8>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <HAL_UART_MspInit+0xb8>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000eba:	2380      	movs	r3, #128	; 0x80
 8000ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000eca:	2307      	movs	r3, #7
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	480d      	ldr	r0, [pc, #52]	; (8000f0c <HAL_UART_MspInit+0xbc>)
 8000ed6:	f000 fadb 	bl	8001490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000eda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000eec:	2307      	movs	r3, #7
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4806      	ldr	r0, [pc, #24]	; (8000f10 <HAL_UART_MspInit+0xc0>)
 8000ef8:	f000 faca 	bl	8001490 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000efc:	bf00      	nop
 8000efe:	3728      	adds	r7, #40	; 0x28
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40011000 	.word	0x40011000
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40020400 	.word	0x40020400
 8000f10:	40020000 	.word	0x40020000

08000f14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08c      	sub	sp, #48	; 0x30
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000f24:	2200      	movs	r2, #0
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	2036      	movs	r0, #54	; 0x36
 8000f2a:	f000 fa17 	bl	800135c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f2e:	2036      	movs	r0, #54	; 0x36
 8000f30:	f000 fa30 	bl	8001394 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f34:	4b1f      	ldr	r3, [pc, #124]	; (8000fb4 <HAL_InitTick+0xa0>)
 8000f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f38:	4a1e      	ldr	r2, [pc, #120]	; (8000fb4 <HAL_InitTick+0xa0>)
 8000f3a:	f043 0310 	orr.w	r3, r3, #16
 8000f3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f40:	4b1c      	ldr	r3, [pc, #112]	; (8000fb4 <HAL_InitTick+0xa0>)
 8000f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f44:	f003 0310 	and.w	r3, r3, #16
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f4c:	f107 0210 	add.w	r2, r7, #16
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	4611      	mov	r1, r2
 8000f56:	4618      	mov	r0, r3
 8000f58:	f001 ff8e 	bl	8002e78 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000f5c:	f001 ff64 	bl	8002e28 <HAL_RCC_GetPCLK1Freq>
 8000f60:	4603      	mov	r3, r0
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f68:	4a13      	ldr	r2, [pc, #76]	; (8000fb8 <HAL_InitTick+0xa4>)
 8000f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f6e:	0c9b      	lsrs	r3, r3, #18
 8000f70:	3b01      	subs	r3, #1
 8000f72:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <HAL_InitTick+0xa8>)
 8000f76:	4a12      	ldr	r2, [pc, #72]	; (8000fc0 <HAL_InitTick+0xac>)
 8000f78:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <HAL_InitTick+0xa8>)
 8000f7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f80:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f82:	4a0e      	ldr	r2, [pc, #56]	; (8000fbc <HAL_InitTick+0xa8>)
 8000f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f86:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <HAL_InitTick+0xa8>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <HAL_InitTick+0xa8>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000f94:	4809      	ldr	r0, [pc, #36]	; (8000fbc <HAL_InitTick+0xa8>)
 8000f96:	f002 fb8f 	bl	80036b8 <HAL_TIM_Base_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d104      	bne.n	8000faa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000fa0:	4806      	ldr	r0, [pc, #24]	; (8000fbc <HAL_InitTick+0xa8>)
 8000fa2:	f002 fbbf 	bl	8003724 <HAL_TIM_Base_Start_IT>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	e000      	b.n	8000fac <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3730      	adds	r7, #48	; 0x30
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	431bde83 	.word	0x431bde83
 8000fbc:	200086fc 	.word	0x200086fc
 8000fc0:	40001000 	.word	0x40001000

08000fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <NMI_Handler+0x4>

08000fca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <HardFault_Handler+0x4>

08000fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <MemManage_Handler+0x4>

08000fd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <BusFault_Handler+0x4>

08000fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <UsageFault_Handler+0x4>

08000fe2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ff4:	4802      	ldr	r0, [pc, #8]	; (8001000 <TIM6_DAC_IRQHandler+0x10>)
 8000ff6:	f002 fbbf 	bl	8003778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200086fc 	.word	0x200086fc

08001004 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	e00a      	b.n	800102c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001016:	f3af 8000 	nop.w
 800101a:	4601      	mov	r1, r0
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	1c5a      	adds	r2, r3, #1
 8001020:	60ba      	str	r2, [r7, #8]
 8001022:	b2ca      	uxtb	r2, r1
 8001024:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	3301      	adds	r3, #1
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	697a      	ldr	r2, [r7, #20]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	429a      	cmp	r2, r3
 8001032:	dbf0      	blt.n	8001016 <_read+0x12>
	}

return len;
 8001034:	687b      	ldr	r3, [r7, #4]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <_close>:
	}
	return len;
}

int _close(int file)
{
 800103e:	b480      	push	{r7}
 8001040:	b083      	sub	sp, #12
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
	return -1;
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
}
 800104a:	4618      	mov	r0, r3
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001056:	b480      	push	{r7}
 8001058:	b083      	sub	sp, #12
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
 800105e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001066:	605a      	str	r2, [r3, #4]
	return 0;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <_isatty>:

int _isatty(int file)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
	return 1;
 800107e:	2301      	movs	r3, #1
}
 8001080:	4618      	mov	r0, r3
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
	return 0;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3714      	adds	r7, #20
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
	...

080010a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010b0:	4a14      	ldr	r2, [pc, #80]	; (8001104 <_sbrk+0x5c>)
 80010b2:	4b15      	ldr	r3, [pc, #84]	; (8001108 <_sbrk+0x60>)
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010bc:	4b13      	ldr	r3, [pc, #76]	; (800110c <_sbrk+0x64>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d102      	bne.n	80010ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010c4:	4b11      	ldr	r3, [pc, #68]	; (800110c <_sbrk+0x64>)
 80010c6:	4a12      	ldr	r2, [pc, #72]	; (8001110 <_sbrk+0x68>)
 80010c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <_sbrk+0x64>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d207      	bcs.n	80010e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010d8:	f004 fc8a 	bl	80059f0 <__errno>
 80010dc:	4602      	mov	r2, r0
 80010de:	230c      	movs	r3, #12
 80010e0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295
 80010e6:	e009      	b.n	80010fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <_sbrk+0x64>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ee:	4b07      	ldr	r3, [pc, #28]	; (800110c <_sbrk+0x64>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	4a05      	ldr	r2, [pc, #20]	; (800110c <_sbrk+0x64>)
 80010f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010fa:	68fb      	ldr	r3, [r7, #12]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20050000 	.word	0x20050000
 8001108:	00000400 	.word	0x00000400
 800110c:	200003dc 	.word	0x200003dc
 8001110:	20008748 	.word	0x20008748

08001114 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <SystemInit+0x28>)
 800111a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800111e:	4a07      	ldr	r2, [pc, #28]	; (800113c <SystemInit+0x28>)
 8001120:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001124:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <SystemInit+0x28>)
 800112a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800112e:	609a      	str	r2, [r3, #8]
#endif
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001140:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001178 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001144:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001146:	e003      	b.n	8001150 <LoopCopyDataInit>

08001148 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800114a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800114c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800114e:	3104      	adds	r1, #4

08001150 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001150:	480b      	ldr	r0, [pc, #44]	; (8001180 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001152:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001154:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001156:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001158:	d3f6      	bcc.n	8001148 <CopyDataInit>
  ldr  r2, =_sbss
 800115a:	4a0b      	ldr	r2, [pc, #44]	; (8001188 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800115c:	e002      	b.n	8001164 <LoopFillZerobss>

0800115e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800115e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001160:	f842 3b04 	str.w	r3, [r2], #4

08001164 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001164:	4b09      	ldr	r3, [pc, #36]	; (800118c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001166:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001168:	d3f9      	bcc.n	800115e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800116a:	f7ff ffd3 	bl	8001114 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800116e:	f004 fc45 	bl	80059fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001172:	f7ff fa15 	bl	80005a0 <main>
  bx  lr    
 8001176:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001178:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800117c:	080065b4 	.word	0x080065b4
  ldr  r0, =_sdata
 8001180:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001184:	20000168 	.word	0x20000168
  ldr  r2, =_sbss
 8001188:	20000168 	.word	0x20000168
  ldr  r3, = _ebss
 800118c:	20008744 	.word	0x20008744

08001190 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001190:	e7fe      	b.n	8001190 <ADC_IRQHandler>

08001192 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001196:	2003      	movs	r0, #3
 8001198:	f000 f8d5 	bl	8001346 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800119c:	2000      	movs	r0, #0
 800119e:	f7ff feb9 	bl	8000f14 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80011a2:	f7ff fd9d 	bl	8000ce0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80011a6:	2300      	movs	r3, #0
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	bd80      	pop	{r7, pc}

080011ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_IncTick+0x20>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <HAL_IncTick+0x24>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4413      	add	r3, r2
 80011bc:	4a04      	ldr	r2, [pc, #16]	; (80011d0 <HAL_IncTick+0x24>)
 80011be:	6013      	str	r3, [r2, #0]
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	200000fc 	.word	0x200000fc
 80011d0:	2000873c 	.word	0x2000873c

080011d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return uwTick;
 80011d8:	4b03      	ldr	r3, [pc, #12]	; (80011e8 <HAL_GetTick+0x14>)
 80011da:	681b      	ldr	r3, [r3, #0]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	2000873c 	.word	0x2000873c

080011ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011fc:	4b0b      	ldr	r3, [pc, #44]	; (800122c <__NVIC_SetPriorityGrouping+0x40>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001208:	4013      	ands	r3, r2
 800120a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <__NVIC_SetPriorityGrouping+0x44>)
 8001216:	4313      	orrs	r3, r2
 8001218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800121a:	4a04      	ldr	r2, [pc, #16]	; (800122c <__NVIC_SetPriorityGrouping+0x40>)
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	60d3      	str	r3, [r2, #12]
}
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000ed00 	.word	0xe000ed00
 8001230:	05fa0000 	.word	0x05fa0000

08001234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001238:	4b04      	ldr	r3, [pc, #16]	; (800124c <__NVIC_GetPriorityGrouping+0x18>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	0a1b      	lsrs	r3, r3, #8
 800123e:	f003 0307 	and.w	r3, r3, #7
}
 8001242:	4618      	mov	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	2b00      	cmp	r3, #0
 8001260:	db0b      	blt.n	800127a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	f003 021f 	and.w	r2, r3, #31
 8001268:	4907      	ldr	r1, [pc, #28]	; (8001288 <__NVIC_EnableIRQ+0x38>)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	095b      	lsrs	r3, r3, #5
 8001270:	2001      	movs	r0, #1
 8001272:	fa00 f202 	lsl.w	r2, r0, r2
 8001276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000e100 	.word	0xe000e100

0800128c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	6039      	str	r1, [r7, #0]
 8001296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129c:	2b00      	cmp	r3, #0
 800129e:	db0a      	blt.n	80012b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	490c      	ldr	r1, [pc, #48]	; (80012d8 <__NVIC_SetPriority+0x4c>)
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	0112      	lsls	r2, r2, #4
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	440b      	add	r3, r1
 80012b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b4:	e00a      	b.n	80012cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	4908      	ldr	r1, [pc, #32]	; (80012dc <__NVIC_SetPriority+0x50>)
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	f003 030f 	and.w	r3, r3, #15
 80012c2:	3b04      	subs	r3, #4
 80012c4:	0112      	lsls	r2, r2, #4
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	440b      	add	r3, r1
 80012ca:	761a      	strb	r2, [r3, #24]
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000e100 	.word	0xe000e100
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b089      	sub	sp, #36	; 0x24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	f1c3 0307 	rsb	r3, r3, #7
 80012fa:	2b04      	cmp	r3, #4
 80012fc:	bf28      	it	cs
 80012fe:	2304      	movcs	r3, #4
 8001300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3304      	adds	r3, #4
 8001306:	2b06      	cmp	r3, #6
 8001308:	d902      	bls.n	8001310 <NVIC_EncodePriority+0x30>
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3b03      	subs	r3, #3
 800130e:	e000      	b.n	8001312 <NVIC_EncodePriority+0x32>
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001314:	f04f 32ff 	mov.w	r2, #4294967295
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43da      	mvns	r2, r3
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	401a      	ands	r2, r3
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001328:	f04f 31ff 	mov.w	r1, #4294967295
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	fa01 f303 	lsl.w	r3, r1, r3
 8001332:	43d9      	mvns	r1, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001338:	4313      	orrs	r3, r2
         );
}
 800133a:	4618      	mov	r0, r3
 800133c:	3724      	adds	r7, #36	; 0x24
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff ff4c 	bl	80011ec <__NVIC_SetPriorityGrouping>
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
 8001368:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800136e:	f7ff ff61 	bl	8001234 <__NVIC_GetPriorityGrouping>
 8001372:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	68b9      	ldr	r1, [r7, #8]
 8001378:	6978      	ldr	r0, [r7, #20]
 800137a:	f7ff ffb1 	bl	80012e0 <NVIC_EncodePriority>
 800137e:	4602      	mov	r2, r0
 8001380:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001384:	4611      	mov	r1, r2
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff ff80 	bl	800128c <__NVIC_SetPriority>
}
 800138c:	bf00      	nop
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff ff54 	bl	8001250 <__NVIC_EnableIRQ>
}
 80013a8:	bf00      	nop
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013be:	f7ff ff09 	bl	80011d4 <HAL_GetTick>
 80013c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d008      	beq.n	80013e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2280      	movs	r2, #128	; 0x80
 80013d4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e052      	b.n	8001488 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 0216 	bic.w	r2, r2, #22
 80013f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	695a      	ldr	r2, [r3, #20]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001400:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	2b00      	cmp	r3, #0
 8001408:	d103      	bne.n	8001412 <HAL_DMA_Abort+0x62>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800140e:	2b00      	cmp	r3, #0
 8001410:	d007      	beq.n	8001422 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f022 0208 	bic.w	r2, r2, #8
 8001420:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f022 0201 	bic.w	r2, r2, #1
 8001430:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001432:	e013      	b.n	800145c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001434:	f7ff fece 	bl	80011d4 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b05      	cmp	r3, #5
 8001440:	d90c      	bls.n	800145c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2220      	movs	r2, #32
 8001446:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2203      	movs	r2, #3
 8001454:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e015      	b.n	8001488 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1e4      	bne.n	8001434 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800146e:	223f      	movs	r2, #63	; 0x3f
 8001470:	409a      	lsls	r2, r3
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2201      	movs	r2, #1
 8001482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001490:	b480      	push	{r7}
 8001492:	b089      	sub	sp, #36	; 0x24
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
 80014ae:	e175      	b.n	800179c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80014b0:	2201      	movs	r2, #1
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	697a      	ldr	r2, [r7, #20]
 80014c0:	4013      	ands	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	f040 8164 	bne.w	8001796 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d00b      	beq.n	80014ee <HAL_GPIO_Init+0x5e>
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d007      	beq.n	80014ee <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014e2:	2b11      	cmp	r3, #17
 80014e4:	d003      	beq.n	80014ee <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b12      	cmp	r3, #18
 80014ec:	d130      	bne.n	8001550 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	2203      	movs	r2, #3
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43db      	mvns	r3, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4013      	ands	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	68da      	ldr	r2, [r3, #12]
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4313      	orrs	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001524:	2201      	movs	r2, #1
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4013      	ands	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	091b      	lsrs	r3, r3, #4
 800153a:	f003 0201 	and.w	r2, r3, #1
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4313      	orrs	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	2203      	movs	r2, #3
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4313      	orrs	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	2b02      	cmp	r3, #2
 8001586:	d003      	beq.n	8001590 <HAL_GPIO_Init+0x100>
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b12      	cmp	r3, #18
 800158e:	d123      	bne.n	80015d8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	08da      	lsrs	r2, r3, #3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3208      	adds	r2, #8
 8001598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800159c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	f003 0307 	and.w	r3, r3, #7
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	220f      	movs	r2, #15
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	43db      	mvns	r3, r3
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4013      	ands	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	691a      	ldr	r2, [r3, #16]
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	08da      	lsrs	r2, r3, #3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3208      	adds	r2, #8
 80015d2:	69b9      	ldr	r1, [r7, #24]
 80015d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	2203      	movs	r2, #3
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 0203 	and.w	r2, r3, #3
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4313      	orrs	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001614:	2b00      	cmp	r3, #0
 8001616:	f000 80be 	beq.w	8001796 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161a:	4b65      	ldr	r3, [pc, #404]	; (80017b0 <HAL_GPIO_Init+0x320>)
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	4a64      	ldr	r2, [pc, #400]	; (80017b0 <HAL_GPIO_Init+0x320>)
 8001620:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001624:	6453      	str	r3, [r2, #68]	; 0x44
 8001626:	4b62      	ldr	r3, [pc, #392]	; (80017b0 <HAL_GPIO_Init+0x320>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001632:	4a60      	ldr	r2, [pc, #384]	; (80017b4 <HAL_GPIO_Init+0x324>)
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	089b      	lsrs	r3, r3, #2
 8001638:	3302      	adds	r3, #2
 800163a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	220f      	movs	r2, #15
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43db      	mvns	r3, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4013      	ands	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a57      	ldr	r2, [pc, #348]	; (80017b8 <HAL_GPIO_Init+0x328>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d037      	beq.n	80016ce <HAL_GPIO_Init+0x23e>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a56      	ldr	r2, [pc, #344]	; (80017bc <HAL_GPIO_Init+0x32c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d031      	beq.n	80016ca <HAL_GPIO_Init+0x23a>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a55      	ldr	r2, [pc, #340]	; (80017c0 <HAL_GPIO_Init+0x330>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d02b      	beq.n	80016c6 <HAL_GPIO_Init+0x236>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a54      	ldr	r2, [pc, #336]	; (80017c4 <HAL_GPIO_Init+0x334>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d025      	beq.n	80016c2 <HAL_GPIO_Init+0x232>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a53      	ldr	r2, [pc, #332]	; (80017c8 <HAL_GPIO_Init+0x338>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d01f      	beq.n	80016be <HAL_GPIO_Init+0x22e>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a52      	ldr	r2, [pc, #328]	; (80017cc <HAL_GPIO_Init+0x33c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d019      	beq.n	80016ba <HAL_GPIO_Init+0x22a>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a51      	ldr	r2, [pc, #324]	; (80017d0 <HAL_GPIO_Init+0x340>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d013      	beq.n	80016b6 <HAL_GPIO_Init+0x226>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a50      	ldr	r2, [pc, #320]	; (80017d4 <HAL_GPIO_Init+0x344>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d00d      	beq.n	80016b2 <HAL_GPIO_Init+0x222>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a4f      	ldr	r2, [pc, #316]	; (80017d8 <HAL_GPIO_Init+0x348>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d007      	beq.n	80016ae <HAL_GPIO_Init+0x21e>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a4e      	ldr	r2, [pc, #312]	; (80017dc <HAL_GPIO_Init+0x34c>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d101      	bne.n	80016aa <HAL_GPIO_Init+0x21a>
 80016a6:	2309      	movs	r3, #9
 80016a8:	e012      	b.n	80016d0 <HAL_GPIO_Init+0x240>
 80016aa:	230a      	movs	r3, #10
 80016ac:	e010      	b.n	80016d0 <HAL_GPIO_Init+0x240>
 80016ae:	2308      	movs	r3, #8
 80016b0:	e00e      	b.n	80016d0 <HAL_GPIO_Init+0x240>
 80016b2:	2307      	movs	r3, #7
 80016b4:	e00c      	b.n	80016d0 <HAL_GPIO_Init+0x240>
 80016b6:	2306      	movs	r3, #6
 80016b8:	e00a      	b.n	80016d0 <HAL_GPIO_Init+0x240>
 80016ba:	2305      	movs	r3, #5
 80016bc:	e008      	b.n	80016d0 <HAL_GPIO_Init+0x240>
 80016be:	2304      	movs	r3, #4
 80016c0:	e006      	b.n	80016d0 <HAL_GPIO_Init+0x240>
 80016c2:	2303      	movs	r3, #3
 80016c4:	e004      	b.n	80016d0 <HAL_GPIO_Init+0x240>
 80016c6:	2302      	movs	r3, #2
 80016c8:	e002      	b.n	80016d0 <HAL_GPIO_Init+0x240>
 80016ca:	2301      	movs	r3, #1
 80016cc:	e000      	b.n	80016d0 <HAL_GPIO_Init+0x240>
 80016ce:	2300      	movs	r3, #0
 80016d0:	69fa      	ldr	r2, [r7, #28]
 80016d2:	f002 0203 	and.w	r2, r2, #3
 80016d6:	0092      	lsls	r2, r2, #2
 80016d8:	4093      	lsls	r3, r2
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4313      	orrs	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80016e0:	4934      	ldr	r1, [pc, #208]	; (80017b4 <HAL_GPIO_Init+0x324>)
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	089b      	lsrs	r3, r3, #2
 80016e6:	3302      	adds	r3, #2
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016ee:	4b3c      	ldr	r3, [pc, #240]	; (80017e0 <HAL_GPIO_Init+0x350>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	43db      	mvns	r3, r3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4013      	ands	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	4313      	orrs	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001712:	4a33      	ldr	r2, [pc, #204]	; (80017e0 <HAL_GPIO_Init+0x350>)
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001718:	4b31      	ldr	r3, [pc, #196]	; (80017e0 <HAL_GPIO_Init+0x350>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	43db      	mvns	r3, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4013      	ands	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d003      	beq.n	800173c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	4313      	orrs	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800173c:	4a28      	ldr	r2, [pc, #160]	; (80017e0 <HAL_GPIO_Init+0x350>)
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001742:	4b27      	ldr	r3, [pc, #156]	; (80017e0 <HAL_GPIO_Init+0x350>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	43db      	mvns	r3, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4013      	ands	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	4313      	orrs	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001766:	4a1e      	ldr	r2, [pc, #120]	; (80017e0 <HAL_GPIO_Init+0x350>)
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800176c:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <HAL_GPIO_Init+0x350>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	43db      	mvns	r3, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4013      	ands	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d003      	beq.n	8001790 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	4313      	orrs	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001790:	4a13      	ldr	r2, [pc, #76]	; (80017e0 <HAL_GPIO_Init+0x350>)
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3301      	adds	r3, #1
 800179a:	61fb      	str	r3, [r7, #28]
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	2b0f      	cmp	r3, #15
 80017a0:	f67f ae86 	bls.w	80014b0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80017a4:	bf00      	nop
 80017a6:	3724      	adds	r7, #36	; 0x24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40013800 	.word	0x40013800
 80017b8:	40020000 	.word	0x40020000
 80017bc:	40020400 	.word	0x40020400
 80017c0:	40020800 	.word	0x40020800
 80017c4:	40020c00 	.word	0x40020c00
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40021400 	.word	0x40021400
 80017d0:	40021800 	.word	0x40021800
 80017d4:	40021c00 	.word	0x40021c00
 80017d8:	40022000 	.word	0x40022000
 80017dc:	40022400 	.word	0x40022400
 80017e0:	40013c00 	.word	0x40013c00

080017e4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017e8:	4b05      	ldr	r3, [pc, #20]	; (8001800 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a04      	ldr	r2, [pc, #16]	; (8001800 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f2:	6013      	str	r3, [r2, #0]
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	40007000 	.word	0x40007000

08001804 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800180e:	4b23      	ldr	r3, [pc, #140]	; (800189c <HAL_PWREx_EnableOverDrive+0x98>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	4a22      	ldr	r2, [pc, #136]	; (800189c <HAL_PWREx_EnableOverDrive+0x98>)
 8001814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001818:	6413      	str	r3, [r2, #64]	; 0x40
 800181a:	4b20      	ldr	r3, [pc, #128]	; (800189c <HAL_PWREx_EnableOverDrive+0x98>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001822:	603b      	str	r3, [r7, #0]
 8001824:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001826:	4b1e      	ldr	r3, [pc, #120]	; (80018a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a1d      	ldr	r2, [pc, #116]	; (80018a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800182c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001830:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001832:	f7ff fccf 	bl	80011d4 <HAL_GetTick>
 8001836:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001838:	e009      	b.n	800184e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800183a:	f7ff fccb 	bl	80011d4 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001848:	d901      	bls.n	800184e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e022      	b.n	8001894 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800184e:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800185a:	d1ee      	bne.n	800183a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800185c:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a0f      	ldr	r2, [pc, #60]	; (80018a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001862:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001866:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001868:	f7ff fcb4 	bl	80011d4 <HAL_GetTick>
 800186c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800186e:	e009      	b.n	8001884 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001870:	f7ff fcb0 	bl	80011d4 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800187e:	d901      	bls.n	8001884 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e007      	b.n	8001894 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001890:	d1ee      	bne.n	8001870 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40023800 	.word	0x40023800
 80018a0:	40007000 	.word	0x40007000

080018a4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af02      	add	r7, sp, #8
 80018aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80018ac:	f7ff fc92 	bl	80011d4 <HAL_GetTick>
 80018b0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d101      	bne.n	80018bc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e067      	b.n	800198c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d10b      	bne.n	80018e0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff fa2d 	bl	8000d30 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80018d6:	f241 3188 	movw	r1, #5000	; 0x1388
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 fc8b 	bl	80021f6 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	021a      	lsls	r2, r3, #8
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2200      	movs	r2, #0
 8001904:	2120      	movs	r1, #32
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 fc83 	bl	8002212 <QSPI_WaitFlagStateUntilTimeout>
 800190c:	4603      	mov	r3, r0
 800190e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8001910:	7afb      	ldrb	r3, [r7, #11]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d135      	bne.n	8001982 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b1d      	ldr	r3, [pc, #116]	; (8001994 <HAL_QSPI_Init+0xf0>)
 800191e:	4013      	ands	r3, r2
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6852      	ldr	r2, [r2, #4]
 8001924:	0611      	lsls	r1, r2, #24
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	68d2      	ldr	r2, [r2, #12]
 800192a:	4311      	orrs	r1, r2
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	69d2      	ldr	r2, [r2, #28]
 8001930:	4311      	orrs	r1, r2
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6a12      	ldr	r2, [r2, #32]
 8001936:	4311      	orrs	r1, r2
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6812      	ldr	r2, [r2, #0]
 800193c:	430b      	orrs	r3, r1
 800193e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	4b14      	ldr	r3, [pc, #80]	; (8001998 <HAL_QSPI_Init+0xf4>)
 8001948:	4013      	ands	r3, r2
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6912      	ldr	r2, [r2, #16]
 800194e:	0411      	lsls	r1, r2, #16
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	6952      	ldr	r2, [r2, #20]
 8001954:	4311      	orrs	r1, r2
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	6992      	ldr	r2, [r2, #24]
 800195a:	4311      	orrs	r1, r2
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	430b      	orrs	r3, r1
 8001962:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f042 0201 	orr.w	r2, r2, #1
 8001972:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800198a:	7afb      	ldrb	r3, [r7, #11]
}
 800198c:	4618      	mov	r0, r3
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	00ffff2f 	.word	0x00ffff2f
 8001998:	ffe0f8fe 	.word	0xffe0f8fe

0800199c <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b088      	sub	sp, #32
 80019a0:	af02      	add	r7, sp, #8
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80019a8:	f7ff fc14 	bl	80011d4 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d101      	bne.n	80019be <HAL_QSPI_Command+0x22>
 80019ba:	2302      	movs	r3, #2
 80019bc:	e048      	b.n	8001a50 <HAL_QSPI_Command+0xb4>
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d137      	bne.n	8001a42 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2200      	movs	r2, #0
 80019d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2202      	movs	r2, #2
 80019dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	2200      	movs	r2, #0
 80019e8:	2120      	movs	r1, #32
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f000 fc11 	bl	8002212 <QSPI_WaitFlagStateUntilTimeout>
 80019f0:	4603      	mov	r3, r0
 80019f2:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80019f4:	7dfb      	ldrb	r3, [r7, #23]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d125      	bne.n	8001a46 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80019fa:	2200      	movs	r2, #0
 80019fc:	68b9      	ldr	r1, [r7, #8]
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f000 fc3e 	bl	8002280 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d115      	bne.n	8001a38 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	2201      	movs	r2, #1
 8001a14:	2102      	movs	r1, #2
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f000 fbfb 	bl	8002212 <QSPI_WaitFlagStateUntilTimeout>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8001a20:	7dfb      	ldrb	r3, [r7, #23]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10f      	bne.n	8001a46 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2201      	movs	r2, #1
 8001a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001a36:	e006      	b.n	8001a46 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001a40:	e001      	b.n	8001a46 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8001a42:	2302      	movs	r3, #2
 8001a44:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8001a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <HAL_QSPI_Command_IT>:
  * @param cmd : structure that contains the command configuration information
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command_IT(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af02      	add	r7, sp, #8
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001a62:	f7ff fbb7 	bl	80011d4 <HAL_GetTick>
 8001a66:	60b8      	str	r0, [r7, #8]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d101      	bne.n	8001a78 <HAL_QSPI_Command_IT+0x20>
 8001a74:	2302      	movs	r3, #2
 8001a76:	e051      	b.n	8001b1c <HAL_QSPI_Command_IT+0xc4>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d140      	bne.n	8001b0e <HAL_QSPI_Command_IT+0xb6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2202      	movs	r2, #2
 8001a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2120      	movs	r1, #32
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 fbb3 	bl	8002212 <QSPI_WaitFlagStateUntilTimeout>
 8001aac:	4603      	mov	r3, r0
 8001aae:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d126      	bne.n	8001b04 <HAL_QSPI_Command_IT+0xac>
    {
      if (cmd->DataMode == QSPI_DATA_NONE)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d103      	bne.n	8001ac6 <HAL_QSPI_Command_IT+0x6e>
      {
        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_TC);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2203      	movs	r2, #3
 8001ac4:	60da      	str	r2, [r3, #12]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	6839      	ldr	r1, [r7, #0]
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 fbd8 	bl	8002280 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d10c      	bne.n	8001af2 <HAL_QSPI_Command_IT+0x9a>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so activate TC and TE interrupts */
        /* Process unlocked */
        __HAL_UNLOCK(hqspi);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Enable the QSPI Transfer Error Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_TC);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	e013      	b.n	8001b1a <HAL_QSPI_Command_IT+0xc2>
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process unlocked */
        __HAL_UNLOCK(hqspi);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b02:	e00a      	b.n	8001b1a <HAL_QSPI_Command_IT+0xc2>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b0c:	e005      	b.n	8001b1a <HAL_QSPI_Command_IT+0xc2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  /* Return function status */
  return status;
 8001b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08a      	sub	sp, #40	; 0x28
 8001b28:	af02      	add	r7, sp, #8
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8001b34:	f7ff fb4e 	bl	80011d4 <HAL_GetTick>
 8001b38:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	3320      	adds	r3, #32
 8001b40:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d101      	bne.n	8001b52 <HAL_QSPI_Transmit+0x2e>
 8001b4e:	2302      	movs	r3, #2
 8001b50:	e07b      	b.n	8001c4a <HAL_QSPI_Transmit+0x126>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d16a      	bne.n	8001c3c <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d05b      	beq.n	8001c2a <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2212      	movs	r2, #18
 8001b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	1c5a      	adds	r2, r3, #1
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	1c5a      	adds	r2, r3, #1
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	68ba      	ldr	r2, [r7, #8]
 8001b96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	695a      	ldr	r2, [r3, #20]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8001ba6:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8001ba8:	e01b      	b.n	8001be2 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	2104      	movs	r1, #4
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f000 fb2c 	bl	8002212 <QSPI_WaitFlagStateUntilTimeout>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8001bbe:	7ffb      	ldrb	r3, [r7, #31]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d113      	bne.n	8001bec <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	781a      	ldrb	r2, [r3, #0]
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd2:	1c5a      	adds	r2, r3, #1
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bdc:	1e5a      	subs	r2, r3, #1
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1df      	bne.n	8001baa <HAL_QSPI_Transmit+0x86>
 8001bea:	e000      	b.n	8001bee <HAL_QSPI_Transmit+0xca>
          break;
 8001bec:	bf00      	nop
      }

      if (status == HAL_OK)
 8001bee:	7ffb      	ldrb	r3, [r7, #31]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d115      	bne.n	8001c20 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	2102      	movs	r1, #2
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f000 fb07 	bl	8002212 <QSPI_WaitFlagStateUntilTimeout>
 8001c04:	4603      	mov	r3, r0
 8001c06:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8001c08:	7ffb      	ldrb	r3, [r7, #31]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d108      	bne.n	8001c20 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2202      	movs	r2, #2
 8001c14:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f000 fa80 	bl	800211c <HAL_QSPI_Abort>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001c28:	e00a      	b.n	8001c40 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2e:	f043 0208 	orr.w	r2, r3, #8
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	77fb      	strb	r3, [r7, #31]
 8001c3a:	e001      	b.n	8001c40 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8001c48:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3720      	adds	r7, #32
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b08a      	sub	sp, #40	; 0x28
 8001c56:	af02      	add	r7, sp, #8
 8001c58:	60f8      	str	r0, [r7, #12]
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8001c62:	f7ff fab7 	bl	80011d4 <HAL_GetTick>
 8001c66:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	3320      	adds	r3, #32
 8001c76:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d101      	bne.n	8001c88 <HAL_QSPI_Receive+0x36>
 8001c84:	2302      	movs	r3, #2
 8001c86:	e082      	b.n	8001d8e <HAL_QSPI_Receive+0x13c>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d171      	bne.n	8001d80 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d062      	beq.n	8001d6e <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2222      	movs	r2, #34	; 0x22
 8001cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	1c5a      	adds	r2, r3, #1
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	1c5a      	adds	r2, r3, #1
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001ce0:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8001cea:	e01c      	b.n	8001d26 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	2106      	movs	r1, #6
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	f000 fa8b 	bl	8002212 <QSPI_WaitFlagStateUntilTimeout>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8001d00:	7ffb      	ldrb	r3, [r7, #31]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d114      	bne.n	8001d30 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	7812      	ldrb	r2, [r2, #0]
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d20:	1e5a      	subs	r2, r3, #1
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1de      	bne.n	8001cec <HAL_QSPI_Receive+0x9a>
 8001d2e:	e000      	b.n	8001d32 <HAL_QSPI_Receive+0xe0>
          break;
 8001d30:	bf00      	nop
      }

      if (status == HAL_OK)
 8001d32:	7ffb      	ldrb	r3, [r7, #31]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d115      	bne.n	8001d64 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	2102      	movs	r1, #2
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f000 fa65 	bl	8002212 <QSPI_WaitFlagStateUntilTimeout>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8001d4c:	7ffb      	ldrb	r3, [r7, #31]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d108      	bne.n	8001d64 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2202      	movs	r2, #2
 8001d58:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f000 f9de 	bl	800211c <HAL_QSPI_Abort>
 8001d60:	4603      	mov	r3, r0
 8001d62:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001d6c:	e00a      	b.n	8001d84 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	f043 0208 	orr.w	r2, r3, #8
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	77fb      	strb	r3, [r7, #31]
 8001d7e:	e001      	b.n	8001d84 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8001d80:	2302      	movs	r3, #2
 8001d82:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8001d8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3720      	adds	r7, #32
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_QSPI_Transmit_IT>:
  * @param  pData : pointer to data buffer
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit_IT(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b085      	sub	sp, #20
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001da0:	2300      	movs	r3, #0
 8001da2:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d101      	bne.n	8001db4 <HAL_QSPI_Transmit_IT+0x1e>
 8001db0:	2302      	movs	r3, #2
 8001db2:	e04f      	b.n	8001e54 <HAL_QSPI_Transmit_IT+0xbe>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d13e      	bne.n	8001e46 <HAL_QSPI_Transmit_IT+0xb0>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d02b      	beq.n	8001e2c <HAL_QSPI_Transmit_IT+0x96>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2212      	movs	r2, #18
 8001dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	1c5a      	adds	r2, r3, #1
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	1c5a      	adds	r2, r3, #1
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_TC);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2203      	movs	r2, #3
 8001e00:	60da      	str	r2, [r3, #12]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	695a      	ldr	r2, [r3, #20]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8001e10:	615a      	str	r2, [r3, #20]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Enable the QSPI transfer error, FIFO threshold and transfer complete Interrupts */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_FT | QSPI_IT_TC);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	e012      	b.n	8001e52 <HAL_QSPI_Transmit_IT+0xbc>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e30:	f043 0208 	orr.w	r2, r3, #8
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	73fb      	strb	r3, [r7, #15]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e44:	e005      	b.n	8001e52 <HAL_QSPI_Transmit_IT+0xbc>
    }
  }
  else
  {
    status = HAL_BUSY;
 8001e46:	2302      	movs	r3, #2
 8001e48:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_QSPI_Receive_IT>:
  * @param  pData : pointer to data buffer
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive_IT(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	73fb      	strb	r3, [r7, #15]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	60bb      	str	r3, [r7, #8]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d101      	bne.n	8001e86 <HAL_QSPI_Receive_IT+0x26>
 8001e82:	2302      	movs	r3, #2
 8001e84:	e055      	b.n	8001f32 <HAL_QSPI_Receive_IT+0xd2>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d144      	bne.n	8001f24 <HAL_QSPI_Receive_IT+0xc4>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d031      	beq.n	8001f0a <HAL_QSPI_Receive_IT+0xaa>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2222      	movs	r2, #34	; 0x22
 8001eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	1c5a      	adds	r2, r3, #1
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	1c5a      	adds	r2, r3, #1
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_TC);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	60da      	str	r2, [r3, #12]

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001ee6:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68ba      	ldr	r2, [r7, #8]
 8001eee:	619a      	str	r2, [r3, #24]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Enable the QSPI transfer error, FIFO threshold and transfer complete Interrupts */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_FT | QSPI_IT_TC);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	e012      	b.n	8001f30 <HAL_QSPI_Receive_IT+0xd0>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0e:	f043 0208 	orr.w	r2, r3, #8
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	73fb      	strb	r3, [r7, #15]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f22:	e005      	b.n	8001f30 <HAL_QSPI_Receive_IT+0xd0>
    }
  }
  else
  {
    status = HAL_BUSY;
 8001f24:	2302      	movs	r3, #2
 8001f26:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b088      	sub	sp, #32
 8001f42:	af02      	add	r7, sp, #8
 8001f44:	60f8      	str	r0, [r7, #12]
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607a      	str	r2, [r7, #4]
 8001f4a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001f4c:	f7ff f942 	bl	80011d4 <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d101      	bne.n	8001f62 <HAL_QSPI_AutoPolling+0x24>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e060      	b.n	8002024 <HAL_QSPI_AutoPolling+0xe6>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d14f      	bne.n	8002016 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2242      	movs	r2, #66	; 0x42
 8001f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2120      	movs	r1, #32
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 f93f 	bl	8002212 <QSPI_WaitFlagStateUntilTimeout>
 8001f94:	4603      	mov	r3, r0
 8001f96:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8001f98:	7dfb      	ldrb	r3, [r7, #23]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d13d      	bne.n	800201a <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6812      	ldr	r2, [r2, #0]
 8001fa6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	6852      	ldr	r2, [r2, #4]
 8001fb0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6892      	ldr	r2, [r2, #8]
 8001fba:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001fd4:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8001fde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fe2:	68b9      	ldr	r1, [r7, #8]
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f000 f94b 	bl	8002280 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	2108      	movs	r1, #8
 8001ff4:	68f8      	ldr	r0, [r7, #12]
 8001ff6:	f000 f90c 	bl	8002212 <QSPI_WaitFlagStateUntilTimeout>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8001ffe:	7dfb      	ldrb	r3, [r7, #23]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d10a      	bne.n	800201a <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2208      	movs	r2, #8
 800200a:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002014:	e001      	b.n	800201a <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8002016:	2302      	movs	r3, #2
 8002018:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8002022:	7dfb      	ldrb	r3, [r7, #23]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <HAL_QSPI_AutoPolling_IT>:
  * @param  cfg : structure that contains the polling configuration information.
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling_IT(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af02      	add	r7, sp, #8
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002038:	f7ff f8cc 	bl	80011d4 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));
  assert_param(IS_QSPI_AUTOMATIC_STOP(cfg->AutomaticStop));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b01      	cmp	r3, #1
 8002048:	d101      	bne.n	800204e <HAL_QSPI_AutoPolling_IT+0x22>
 800204a:	2302      	movs	r3, #2
 800204c:	e062      	b.n	8002114 <HAL_QSPI_AutoPolling_IT+0xe8>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b01      	cmp	r3, #1
 8002060:	d151      	bne.n	8002106 <HAL_QSPI_AutoPolling_IT+0xda>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2242      	movs	r2, #66	; 0x42
 800206c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	2200      	movs	r2, #0
 800207a:	2120      	movs	r1, #32
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f000 f8c8 	bl	8002212 <QSPI_WaitFlagStateUntilTimeout>
 8002082:	4603      	mov	r3, r0
 8002084:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8002086:	7dfb      	ldrb	r3, [r7, #23]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d137      	bne.n	80020fc <HAL_QSPI_AutoPolling_IT+0xd0>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6812      	ldr	r2, [r2, #0]
 8002094:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6852      	ldr	r2, [r2, #4]
 800209e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	6892      	ldr	r2, [r2, #8]
 80020a8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop mode */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691a      	ldr	r2, [r3, #16]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	431a      	orrs	r2, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	430a      	orrs	r2, r1
 80020c4:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | cfg->AutomaticStop));

      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_SM);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2209      	movs	r2, #9
 80020cc:	60da      	str	r2, [r3, #12]

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80020d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020da:	68b9      	ldr	r1, [r7, #8]
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f000 f8cf 	bl	8002280 <QSPI_Config>

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Enable the QSPI Transfer Error and status match Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f442 2210 	orr.w	r2, r2, #589824	; 0x90000
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	e00a      	b.n	8002112 <HAL_QSPI_AutoPolling_IT+0xe6>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002104:	e005      	b.n	8002112 <HAL_QSPI_AutoPolling_IT+0xe6>
    }
  }
  else
  {
    status = HAL_BUSY;
 8002106:	2302      	movs	r3, #2
 8002108:	75fb      	strb	r3, [r7, #23]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  /* Return function status */
  return status;
 8002112:	7dfb      	ldrb	r3, [r7, #23]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af02      	add	r7, sp, #8
 8002122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002124:	2300      	movs	r3, #0
 8002126:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8002128:	f7ff f854 	bl	80011d4 <HAL_GetTick>
 800212c:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002134:	b2db      	uxtb	r3, r3
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d056      	beq.n	80021ec <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	d017      	beq.n	8002184 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0204 	bic.w	r2, r2, #4
 8002162:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff f921 	bl	80013b0 <HAL_DMA_Abort>
 800216e:	4603      	mov	r3, r0
 8002170:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8002172:	7bfb      	ldrb	r3, [r7, #15]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d005      	beq.n	8002184 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217c:	f043 0204 	orr.w	r2, r3, #4
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f042 0202 	orr.w	r2, r2, #2
 8002192:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	2201      	movs	r2, #1
 800219e:	2102      	movs	r1, #2
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 f836 	bl	8002212 <QSPI_WaitFlagStateUntilTimeout>
 80021a6:	4603      	mov	r3, r0
 80021a8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10e      	bne.n	80021ce <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2202      	movs	r2, #2
 80021b6:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2200      	movs	r2, #0
 80021c2:	2120      	movs	r1, #32
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 f824 	bl	8002212 <QSPI_WaitFlagStateUntilTimeout>
 80021ca:	4603      	mov	r3, r0
 80021cc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10b      	bne.n	80021ec <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	695a      	ldr	r2, [r3, #20]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80021e2:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b083      	sub	sp, #12
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
 80021fe:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	649a      	str	r2, [r3, #72]	; 0x48
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b084      	sub	sp, #16
 8002216:	af00      	add	r7, sp, #0
 8002218:	60f8      	str	r0, [r7, #12]
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	603b      	str	r3, [r7, #0]
 800221e:	4613      	mov	r3, r2
 8002220:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002222:	e01a      	b.n	800225a <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800222a:	d016      	beq.n	800225a <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800222c:	f7fe ffd2 	bl	80011d4 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	429a      	cmp	r2, r3
 800223a:	d302      	bcc.n	8002242 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10b      	bne.n	800225a <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2204      	movs	r2, #4
 8002246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224e:	f043 0201 	orr.w	r2, r3, #1
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e00e      	b.n	8002278 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	4013      	ands	r3, r2
 8002264:	2b00      	cmp	r3, #0
 8002266:	bf14      	ite	ne
 8002268:	2301      	movne	r3, #1
 800226a:	2300      	moveq	r3, #0
 800226c:	b2db      	uxtb	r3, r3
 800226e:	461a      	mov	r2, r3
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	429a      	cmp	r2, r3
 8002274:	d1d6      	bne.n	8002224 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	2b00      	cmp	r3, #0
 8002292:	d009      	beq.n	80022a8 <QSPI_Config+0x28>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800229a:	d005      	beq.n	80022a8 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	3a01      	subs	r2, #1
 80022a6:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 80b9 	beq.w	8002424 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d05f      	beq.n	800237a <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	6892      	ldr	r2, [r2, #8]
 80022c2:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d031      	beq.n	8002330 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d4:	431a      	orrs	r2, r3
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022da:	431a      	orrs	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e0:	431a      	orrs	r2, r3
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	049b      	lsls	r3, r3, #18
 80022e8:	431a      	orrs	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	431a      	orrs	r2, r3
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	431a      	orrs	r2, r3
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	431a      	orrs	r2, r3
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	69db      	ldr	r3, [r3, #28]
 8002300:	431a      	orrs	r2, r3
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	431a      	orrs	r2, r3
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	ea42 0103 	orr.w	r1, r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	430a      	orrs	r2, r1
 8002318:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002320:	f000 812e 	beq.w	8002580 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	6852      	ldr	r2, [r2, #4]
 800232c:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800232e:	e127      	b.n	8002580 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002338:	431a      	orrs	r2, r3
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800233e:	431a      	orrs	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	431a      	orrs	r2, r3
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	049b      	lsls	r3, r3, #18
 800234c:	431a      	orrs	r2, r3
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	431a      	orrs	r2, r3
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	431a      	orrs	r2, r3
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	431a      	orrs	r2, r3
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	431a      	orrs	r2, r3
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	ea42 0103 	orr.w	r1, r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	430a      	orrs	r2, r1
 8002376:	615a      	str	r2, [r3, #20]
}
 8002378:	e102      	b.n	8002580 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d02e      	beq.n	80023e0 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	431a      	orrs	r2, r3
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002390:	431a      	orrs	r2, r3
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	431a      	orrs	r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	049b      	lsls	r3, r3, #18
 800239e:	431a      	orrs	r2, r3
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	431a      	orrs	r2, r3
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	431a      	orrs	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	69db      	ldr	r3, [r3, #28]
 80023b0:	431a      	orrs	r2, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	431a      	orrs	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	ea42 0103 	orr.w	r1, r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80023d0:	f000 80d6 	beq.w	8002580 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68ba      	ldr	r2, [r7, #8]
 80023da:	6852      	ldr	r2, [r2, #4]
 80023dc:	619a      	str	r2, [r3, #24]
}
 80023de:	e0cf      	b.n	8002580 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e8:	431a      	orrs	r2, r3
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ee:	431a      	orrs	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	431a      	orrs	r2, r3
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	049b      	lsls	r3, r3, #18
 80023fc:	431a      	orrs	r2, r3
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	431a      	orrs	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	431a      	orrs	r2, r3
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	431a      	orrs	r2, r3
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	ea42 0103 	orr.w	r1, r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	430a      	orrs	r2, r1
 8002420:	615a      	str	r2, [r3, #20]
}
 8002422:	e0ad      	b.n	8002580 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d058      	beq.n	80024de <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	6892      	ldr	r2, [r2, #8]
 8002434:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d02d      	beq.n	800249a <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	431a      	orrs	r2, r3
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800244c:	431a      	orrs	r2, r3
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	431a      	orrs	r2, r3
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	049b      	lsls	r3, r3, #18
 800245a:	431a      	orrs	r2, r3
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	431a      	orrs	r2, r3
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	431a      	orrs	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	431a      	orrs	r2, r3
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	431a      	orrs	r2, r3
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	ea42 0103 	orr.w	r1, r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	430a      	orrs	r2, r1
 8002484:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800248c:	d078      	beq.n	8002580 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	6852      	ldr	r2, [r2, #4]
 8002496:	619a      	str	r2, [r3, #24]
}
 8002498:	e072      	b.n	8002580 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	431a      	orrs	r2, r3
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a8:	431a      	orrs	r2, r3
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ae:	431a      	orrs	r2, r3
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	049b      	lsls	r3, r3, #18
 80024b6:	431a      	orrs	r2, r3
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	431a      	orrs	r2, r3
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	431a      	orrs	r2, r3
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	431a      	orrs	r2, r3
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	ea42 0103 	orr.w	r1, r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	430a      	orrs	r2, r1
 80024da:	615a      	str	r2, [r3, #20]
}
 80024dc:	e050      	b.n	8002580 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d02a      	beq.n	800253c <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	431a      	orrs	r2, r3
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f4:	431a      	orrs	r2, r3
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fa:	431a      	orrs	r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	049b      	lsls	r3, r3, #18
 8002502:	431a      	orrs	r2, r3
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	431a      	orrs	r2, r3
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	431a      	orrs	r2, r3
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	431a      	orrs	r2, r3
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	ea42 0103 	orr.w	r1, r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	430a      	orrs	r2, r1
 8002526:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800252e:	d027      	beq.n	8002580 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	6852      	ldr	r2, [r2, #4]
 8002538:	619a      	str	r2, [r3, #24]
}
 800253a:	e021      	b.n	8002580 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002540:	2b00      	cmp	r3, #0
 8002542:	d01d      	beq.n	8002580 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254c:	431a      	orrs	r2, r3
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002552:	431a      	orrs	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002558:	431a      	orrs	r2, r3
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	049b      	lsls	r3, r3, #18
 8002560:	431a      	orrs	r2, r3
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	431a      	orrs	r2, r3
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	431a      	orrs	r2, r3
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	ea42 0103 	orr.w	r1, r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	430a      	orrs	r2, r1
 800257e:	615a      	str	r2, [r3, #20]
}
 8002580:	bf00      	nop
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002594:	2300      	movs	r3, #0
 8002596:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e291      	b.n	8002ac6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 8087 	beq.w	80026be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025b0:	4b96      	ldr	r3, [pc, #600]	; (800280c <HAL_RCC_OscConfig+0x280>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 030c 	and.w	r3, r3, #12
 80025b8:	2b04      	cmp	r3, #4
 80025ba:	d00c      	beq.n	80025d6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025bc:	4b93      	ldr	r3, [pc, #588]	; (800280c <HAL_RCC_OscConfig+0x280>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 030c 	and.w	r3, r3, #12
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	d112      	bne.n	80025ee <HAL_RCC_OscConfig+0x62>
 80025c8:	4b90      	ldr	r3, [pc, #576]	; (800280c <HAL_RCC_OscConfig+0x280>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025d4:	d10b      	bne.n	80025ee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d6:	4b8d      	ldr	r3, [pc, #564]	; (800280c <HAL_RCC_OscConfig+0x280>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d06c      	beq.n	80026bc <HAL_RCC_OscConfig+0x130>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d168      	bne.n	80026bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e26b      	b.n	8002ac6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f6:	d106      	bne.n	8002606 <HAL_RCC_OscConfig+0x7a>
 80025f8:	4b84      	ldr	r3, [pc, #528]	; (800280c <HAL_RCC_OscConfig+0x280>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a83      	ldr	r2, [pc, #524]	; (800280c <HAL_RCC_OscConfig+0x280>)
 80025fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002602:	6013      	str	r3, [r2, #0]
 8002604:	e02e      	b.n	8002664 <HAL_RCC_OscConfig+0xd8>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10c      	bne.n	8002628 <HAL_RCC_OscConfig+0x9c>
 800260e:	4b7f      	ldr	r3, [pc, #508]	; (800280c <HAL_RCC_OscConfig+0x280>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a7e      	ldr	r2, [pc, #504]	; (800280c <HAL_RCC_OscConfig+0x280>)
 8002614:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	4b7c      	ldr	r3, [pc, #496]	; (800280c <HAL_RCC_OscConfig+0x280>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a7b      	ldr	r2, [pc, #492]	; (800280c <HAL_RCC_OscConfig+0x280>)
 8002620:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	e01d      	b.n	8002664 <HAL_RCC_OscConfig+0xd8>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002630:	d10c      	bne.n	800264c <HAL_RCC_OscConfig+0xc0>
 8002632:	4b76      	ldr	r3, [pc, #472]	; (800280c <HAL_RCC_OscConfig+0x280>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a75      	ldr	r2, [pc, #468]	; (800280c <HAL_RCC_OscConfig+0x280>)
 8002638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	4b73      	ldr	r3, [pc, #460]	; (800280c <HAL_RCC_OscConfig+0x280>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a72      	ldr	r2, [pc, #456]	; (800280c <HAL_RCC_OscConfig+0x280>)
 8002644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	e00b      	b.n	8002664 <HAL_RCC_OscConfig+0xd8>
 800264c:	4b6f      	ldr	r3, [pc, #444]	; (800280c <HAL_RCC_OscConfig+0x280>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a6e      	ldr	r2, [pc, #440]	; (800280c <HAL_RCC_OscConfig+0x280>)
 8002652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002656:	6013      	str	r3, [r2, #0]
 8002658:	4b6c      	ldr	r3, [pc, #432]	; (800280c <HAL_RCC_OscConfig+0x280>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a6b      	ldr	r2, [pc, #428]	; (800280c <HAL_RCC_OscConfig+0x280>)
 800265e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002662:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d013      	beq.n	8002694 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266c:	f7fe fdb2 	bl	80011d4 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002674:	f7fe fdae 	bl	80011d4 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b64      	cmp	r3, #100	; 0x64
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e21f      	b.n	8002ac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002686:	4b61      	ldr	r3, [pc, #388]	; (800280c <HAL_RCC_OscConfig+0x280>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0f0      	beq.n	8002674 <HAL_RCC_OscConfig+0xe8>
 8002692:	e014      	b.n	80026be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002694:	f7fe fd9e 	bl	80011d4 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800269c:	f7fe fd9a 	bl	80011d4 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b64      	cmp	r3, #100	; 0x64
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e20b      	b.n	8002ac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ae:	4b57      	ldr	r3, [pc, #348]	; (800280c <HAL_RCC_OscConfig+0x280>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f0      	bne.n	800269c <HAL_RCC_OscConfig+0x110>
 80026ba:	e000      	b.n	80026be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d069      	beq.n	800279e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026ca:	4b50      	ldr	r3, [pc, #320]	; (800280c <HAL_RCC_OscConfig+0x280>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 030c 	and.w	r3, r3, #12
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00b      	beq.n	80026ee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026d6:	4b4d      	ldr	r3, [pc, #308]	; (800280c <HAL_RCC_OscConfig+0x280>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 030c 	and.w	r3, r3, #12
 80026de:	2b08      	cmp	r3, #8
 80026e0:	d11c      	bne.n	800271c <HAL_RCC_OscConfig+0x190>
 80026e2:	4b4a      	ldr	r3, [pc, #296]	; (800280c <HAL_RCC_OscConfig+0x280>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d116      	bne.n	800271c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ee:	4b47      	ldr	r3, [pc, #284]	; (800280c <HAL_RCC_OscConfig+0x280>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d005      	beq.n	8002706 <HAL_RCC_OscConfig+0x17a>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d001      	beq.n	8002706 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e1df      	b.n	8002ac6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002706:	4b41      	ldr	r3, [pc, #260]	; (800280c <HAL_RCC_OscConfig+0x280>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	493d      	ldr	r1, [pc, #244]	; (800280c <HAL_RCC_OscConfig+0x280>)
 8002716:	4313      	orrs	r3, r2
 8002718:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800271a:	e040      	b.n	800279e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d023      	beq.n	800276c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002724:	4b39      	ldr	r3, [pc, #228]	; (800280c <HAL_RCC_OscConfig+0x280>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a38      	ldr	r2, [pc, #224]	; (800280c <HAL_RCC_OscConfig+0x280>)
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002730:	f7fe fd50 	bl	80011d4 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002738:	f7fe fd4c 	bl	80011d4 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e1bd      	b.n	8002ac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274a:	4b30      	ldr	r3, [pc, #192]	; (800280c <HAL_RCC_OscConfig+0x280>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0f0      	beq.n	8002738 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002756:	4b2d      	ldr	r3, [pc, #180]	; (800280c <HAL_RCC_OscConfig+0x280>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	4929      	ldr	r1, [pc, #164]	; (800280c <HAL_RCC_OscConfig+0x280>)
 8002766:	4313      	orrs	r3, r2
 8002768:	600b      	str	r3, [r1, #0]
 800276a:	e018      	b.n	800279e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800276c:	4b27      	ldr	r3, [pc, #156]	; (800280c <HAL_RCC_OscConfig+0x280>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a26      	ldr	r2, [pc, #152]	; (800280c <HAL_RCC_OscConfig+0x280>)
 8002772:	f023 0301 	bic.w	r3, r3, #1
 8002776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002778:	f7fe fd2c 	bl	80011d4 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002780:	f7fe fd28 	bl	80011d4 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e199      	b.n	8002ac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002792:	4b1e      	ldr	r3, [pc, #120]	; (800280c <HAL_RCC_OscConfig+0x280>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d038      	beq.n	800281c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d019      	beq.n	80027e6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027b2:	4b16      	ldr	r3, [pc, #88]	; (800280c <HAL_RCC_OscConfig+0x280>)
 80027b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b6:	4a15      	ldr	r2, [pc, #84]	; (800280c <HAL_RCC_OscConfig+0x280>)
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027be:	f7fe fd09 	bl	80011d4 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027c6:	f7fe fd05 	bl	80011d4 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e176      	b.n	8002ac6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027d8:	4b0c      	ldr	r3, [pc, #48]	; (800280c <HAL_RCC_OscConfig+0x280>)
 80027da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0f0      	beq.n	80027c6 <HAL_RCC_OscConfig+0x23a>
 80027e4:	e01a      	b.n	800281c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027e6:	4b09      	ldr	r3, [pc, #36]	; (800280c <HAL_RCC_OscConfig+0x280>)
 80027e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ea:	4a08      	ldr	r2, [pc, #32]	; (800280c <HAL_RCC_OscConfig+0x280>)
 80027ec:	f023 0301 	bic.w	r3, r3, #1
 80027f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f2:	f7fe fcef 	bl	80011d4 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f8:	e00a      	b.n	8002810 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027fa:	f7fe fceb 	bl	80011d4 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d903      	bls.n	8002810 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e15c      	b.n	8002ac6 <HAL_RCC_OscConfig+0x53a>
 800280c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002810:	4b91      	ldr	r3, [pc, #580]	; (8002a58 <HAL_RCC_OscConfig+0x4cc>)
 8002812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1ee      	bne.n	80027fa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 80a4 	beq.w	8002972 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800282a:	4b8b      	ldr	r3, [pc, #556]	; (8002a58 <HAL_RCC_OscConfig+0x4cc>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10d      	bne.n	8002852 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002836:	4b88      	ldr	r3, [pc, #544]	; (8002a58 <HAL_RCC_OscConfig+0x4cc>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	4a87      	ldr	r2, [pc, #540]	; (8002a58 <HAL_RCC_OscConfig+0x4cc>)
 800283c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002840:	6413      	str	r3, [r2, #64]	; 0x40
 8002842:	4b85      	ldr	r3, [pc, #532]	; (8002a58 <HAL_RCC_OscConfig+0x4cc>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284a:	60bb      	str	r3, [r7, #8]
 800284c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800284e:	2301      	movs	r3, #1
 8002850:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002852:	4b82      	ldr	r3, [pc, #520]	; (8002a5c <HAL_RCC_OscConfig+0x4d0>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285a:	2b00      	cmp	r3, #0
 800285c:	d118      	bne.n	8002890 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800285e:	4b7f      	ldr	r3, [pc, #508]	; (8002a5c <HAL_RCC_OscConfig+0x4d0>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a7e      	ldr	r2, [pc, #504]	; (8002a5c <HAL_RCC_OscConfig+0x4d0>)
 8002864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002868:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800286a:	f7fe fcb3 	bl	80011d4 <HAL_GetTick>
 800286e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002870:	e008      	b.n	8002884 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002872:	f7fe fcaf 	bl	80011d4 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b64      	cmp	r3, #100	; 0x64
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e120      	b.n	8002ac6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002884:	4b75      	ldr	r3, [pc, #468]	; (8002a5c <HAL_RCC_OscConfig+0x4d0>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0f0      	beq.n	8002872 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d106      	bne.n	80028a6 <HAL_RCC_OscConfig+0x31a>
 8002898:	4b6f      	ldr	r3, [pc, #444]	; (8002a58 <HAL_RCC_OscConfig+0x4cc>)
 800289a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289c:	4a6e      	ldr	r2, [pc, #440]	; (8002a58 <HAL_RCC_OscConfig+0x4cc>)
 800289e:	f043 0301 	orr.w	r3, r3, #1
 80028a2:	6713      	str	r3, [r2, #112]	; 0x70
 80028a4:	e02d      	b.n	8002902 <HAL_RCC_OscConfig+0x376>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10c      	bne.n	80028c8 <HAL_RCC_OscConfig+0x33c>
 80028ae:	4b6a      	ldr	r3, [pc, #424]	; (8002a58 <HAL_RCC_OscConfig+0x4cc>)
 80028b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b2:	4a69      	ldr	r2, [pc, #420]	; (8002a58 <HAL_RCC_OscConfig+0x4cc>)
 80028b4:	f023 0301 	bic.w	r3, r3, #1
 80028b8:	6713      	str	r3, [r2, #112]	; 0x70
 80028ba:	4b67      	ldr	r3, [pc, #412]	; (8002a58 <HAL_RCC_OscConfig+0x4cc>)
 80028bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028be:	4a66      	ldr	r2, [pc, #408]	; (8002a58 <HAL_RCC_OscConfig+0x4cc>)
 80028c0:	f023 0304 	bic.w	r3, r3, #4
 80028c4:	6713      	str	r3, [r2, #112]	; 0x70
 80028c6:	e01c      	b.n	8002902 <HAL_RCC_OscConfig+0x376>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	2b05      	cmp	r3, #5
 80028ce:	d10c      	bne.n	80028ea <HAL_RCC_OscConfig+0x35e>
 80028d0:	4b61      	ldr	r3, [pc, #388]	; (8002a58 <HAL_RCC_OscConfig+0x4cc>)
 80028d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d4:	4a60      	ldr	r2, [pc, #384]	; (8002a58 <HAL_RCC_OscConfig+0x4cc>)
 80028d6:	f043 0304 	orr.w	r3, r3, #4
 80028da:	6713      	str	r3, [r2, #112]	; 0x70
 80028dc:	4b5e      	ldr	r3, [pc, #376]	; (8002a58 <HAL_RCC_OscConfig+0x4cc>)
 80028de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e0:	4a5d      	ldr	r2, [pc, #372]	; (8002a58 <HAL_RCC_OscConfig+0x4cc>)
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	6713      	str	r3, [r2, #112]	; 0x70
 80028e8:	e00b      	b.n	8002902 <HAL_RCC_OscConfig+0x376>
 80028ea:	4b5b      	ldr	r3, [pc, #364]	; (8002a58 <HAL_RCC_OscConfig+0x4cc>)
 80028ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ee:	4a5a      	ldr	r2, [pc, #360]	; (8002a58 <HAL_RCC_OscConfig+0x4cc>)
 80028f0:	f023 0301 	bic.w	r3, r3, #1
 80028f4:	6713      	str	r3, [r2, #112]	; 0x70
 80028f6:	4b58      	ldr	r3, [pc, #352]	; (8002a58 <HAL_RCC_OscConfig+0x4cc>)
 80028f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fa:	4a57      	ldr	r2, [pc, #348]	; (8002a58 <HAL_RCC_OscConfig+0x4cc>)
 80028fc:	f023 0304 	bic.w	r3, r3, #4
 8002900:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d015      	beq.n	8002936 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290a:	f7fe fc63 	bl	80011d4 <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002910:	e00a      	b.n	8002928 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002912:	f7fe fc5f 	bl	80011d4 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002920:	4293      	cmp	r3, r2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e0ce      	b.n	8002ac6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002928:	4b4b      	ldr	r3, [pc, #300]	; (8002a58 <HAL_RCC_OscConfig+0x4cc>)
 800292a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0ee      	beq.n	8002912 <HAL_RCC_OscConfig+0x386>
 8002934:	e014      	b.n	8002960 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002936:	f7fe fc4d 	bl	80011d4 <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800293c:	e00a      	b.n	8002954 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800293e:	f7fe fc49 	bl	80011d4 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	f241 3288 	movw	r2, #5000	; 0x1388
 800294c:	4293      	cmp	r3, r2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e0b8      	b.n	8002ac6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002954:	4b40      	ldr	r3, [pc, #256]	; (8002a58 <HAL_RCC_OscConfig+0x4cc>)
 8002956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1ee      	bne.n	800293e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002960:	7dfb      	ldrb	r3, [r7, #23]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d105      	bne.n	8002972 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002966:	4b3c      	ldr	r3, [pc, #240]	; (8002a58 <HAL_RCC_OscConfig+0x4cc>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	4a3b      	ldr	r2, [pc, #236]	; (8002a58 <HAL_RCC_OscConfig+0x4cc>)
 800296c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002970:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 80a4 	beq.w	8002ac4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800297c:	4b36      	ldr	r3, [pc, #216]	; (8002a58 <HAL_RCC_OscConfig+0x4cc>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 030c 	and.w	r3, r3, #12
 8002984:	2b08      	cmp	r3, #8
 8002986:	d06b      	beq.n	8002a60 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	2b02      	cmp	r3, #2
 800298e:	d149      	bne.n	8002a24 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002990:	4b31      	ldr	r3, [pc, #196]	; (8002a58 <HAL_RCC_OscConfig+0x4cc>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a30      	ldr	r2, [pc, #192]	; (8002a58 <HAL_RCC_OscConfig+0x4cc>)
 8002996:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800299a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299c:	f7fe fc1a 	bl	80011d4 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a4:	f7fe fc16 	bl	80011d4 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e087      	b.n	8002ac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b6:	4b28      	ldr	r3, [pc, #160]	; (8002a58 <HAL_RCC_OscConfig+0x4cc>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f0      	bne.n	80029a4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69da      	ldr	r2, [r3, #28]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	431a      	orrs	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d0:	019b      	lsls	r3, r3, #6
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d8:	085b      	lsrs	r3, r3, #1
 80029da:	3b01      	subs	r3, #1
 80029dc:	041b      	lsls	r3, r3, #16
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e4:	061b      	lsls	r3, r3, #24
 80029e6:	4313      	orrs	r3, r2
 80029e8:	4a1b      	ldr	r2, [pc, #108]	; (8002a58 <HAL_RCC_OscConfig+0x4cc>)
 80029ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80029ee:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029f0:	4b19      	ldr	r3, [pc, #100]	; (8002a58 <HAL_RCC_OscConfig+0x4cc>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a18      	ldr	r2, [pc, #96]	; (8002a58 <HAL_RCC_OscConfig+0x4cc>)
 80029f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fc:	f7fe fbea 	bl	80011d4 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a04:	f7fe fbe6 	bl	80011d4 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e057      	b.n	8002ac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a16:	4b10      	ldr	r3, [pc, #64]	; (8002a58 <HAL_RCC_OscConfig+0x4cc>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0f0      	beq.n	8002a04 <HAL_RCC_OscConfig+0x478>
 8002a22:	e04f      	b.n	8002ac4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a24:	4b0c      	ldr	r3, [pc, #48]	; (8002a58 <HAL_RCC_OscConfig+0x4cc>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a0b      	ldr	r2, [pc, #44]	; (8002a58 <HAL_RCC_OscConfig+0x4cc>)
 8002a2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a30:	f7fe fbd0 	bl	80011d4 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a38:	f7fe fbcc 	bl	80011d4 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e03d      	b.n	8002ac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a4a:	4b03      	ldr	r3, [pc, #12]	; (8002a58 <HAL_RCC_OscConfig+0x4cc>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0x4ac>
 8002a56:	e035      	b.n	8002ac4 <HAL_RCC_OscConfig+0x538>
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002a60:	4b1b      	ldr	r3, [pc, #108]	; (8002ad0 <HAL_RCC_OscConfig+0x544>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d028      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d121      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d11a      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a90:	4013      	ands	r3, r2
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a96:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d111      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa6:	085b      	lsrs	r3, r3, #1
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d107      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d001      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e000      	b.n	8002ac6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40023800 	.word	0x40023800

08002ad4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e0d0      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002aec:	4b6a      	ldr	r3, [pc, #424]	; (8002c98 <HAL_RCC_ClockConfig+0x1c4>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 030f 	and.w	r3, r3, #15
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d910      	bls.n	8002b1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afa:	4b67      	ldr	r3, [pc, #412]	; (8002c98 <HAL_RCC_ClockConfig+0x1c4>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f023 020f 	bic.w	r2, r3, #15
 8002b02:	4965      	ldr	r1, [pc, #404]	; (8002c98 <HAL_RCC_ClockConfig+0x1c4>)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b0a:	4b63      	ldr	r3, [pc, #396]	; (8002c98 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d001      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0b8      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d020      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b34:	4b59      	ldr	r3, [pc, #356]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	4a58      	ldr	r2, [pc, #352]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002b3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0308 	and.w	r3, r3, #8
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d005      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b4c:	4b53      	ldr	r3, [pc, #332]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	4a52      	ldr	r2, [pc, #328]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002b52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b56:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b58:	4b50      	ldr	r3, [pc, #320]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	494d      	ldr	r1, [pc, #308]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d040      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d107      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7e:	4b47      	ldr	r3, [pc, #284]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d115      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e07f      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d107      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b96:	4b41      	ldr	r3, [pc, #260]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d109      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e073      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba6:	4b3d      	ldr	r3, [pc, #244]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e06b      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bb6:	4b39      	ldr	r3, [pc, #228]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f023 0203 	bic.w	r2, r3, #3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	4936      	ldr	r1, [pc, #216]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bc8:	f7fe fb04 	bl	80011d4 <HAL_GetTick>
 8002bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bce:	e00a      	b.n	8002be6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd0:	f7fe fb00 	bl	80011d4 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e053      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be6:	4b2d      	ldr	r3, [pc, #180]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 020c 	and.w	r2, r3, #12
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d1eb      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bf8:	4b27      	ldr	r3, [pc, #156]	; (8002c98 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 030f 	and.w	r3, r3, #15
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d210      	bcs.n	8002c28 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c06:	4b24      	ldr	r3, [pc, #144]	; (8002c98 <HAL_RCC_ClockConfig+0x1c4>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f023 020f 	bic.w	r2, r3, #15
 8002c0e:	4922      	ldr	r1, [pc, #136]	; (8002c98 <HAL_RCC_ClockConfig+0x1c4>)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c16:	4b20      	ldr	r3, [pc, #128]	; (8002c98 <HAL_RCC_ClockConfig+0x1c4>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d001      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e032      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d008      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c34:	4b19      	ldr	r3, [pc, #100]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	4916      	ldr	r1, [pc, #88]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d009      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c52:	4b12      	ldr	r3, [pc, #72]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	490e      	ldr	r1, [pc, #56]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c66:	f000 f821 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 8002c6a:	4601      	mov	r1, r0
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	091b      	lsrs	r3, r3, #4
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	4a0a      	ldr	r2, [pc, #40]	; (8002ca0 <HAL_RCC_ClockConfig+0x1cc>)
 8002c78:	5cd3      	ldrb	r3, [r2, r3]
 8002c7a:	fa21 f303 	lsr.w	r3, r1, r3
 8002c7e:	4a09      	ldr	r2, [pc, #36]	; (8002ca4 <HAL_RCC_ClockConfig+0x1d0>)
 8002c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c82:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <HAL_RCC_ClockConfig+0x1d4>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fe f944 	bl	8000f14 <HAL_InitTick>

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40023c00 	.word	0x40023c00
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	08006528 	.word	0x08006528
 8002ca4:	200000f4 	.word	0x200000f4
 8002ca8:	200000f8 	.word	0x200000f8

08002cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	607b      	str	r3, [r7, #4]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cc2:	4b50      	ldr	r3, [pc, #320]	; (8002e04 <HAL_RCC_GetSysClockFreq+0x158>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d007      	beq.n	8002cde <HAL_RCC_GetSysClockFreq+0x32>
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d008      	beq.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x38>
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f040 808d 	bne.w	8002df2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cd8:	4b4b      	ldr	r3, [pc, #300]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002cda:	60bb      	str	r3, [r7, #8]
      break;
 8002cdc:	e08c      	b.n	8002df8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cde:	4b4b      	ldr	r3, [pc, #300]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x160>)
 8002ce0:	60bb      	str	r3, [r7, #8]
      break;
 8002ce2:	e089      	b.n	8002df8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ce4:	4b47      	ldr	r3, [pc, #284]	; (8002e04 <HAL_RCC_GetSysClockFreq+0x158>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cec:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002cee:	4b45      	ldr	r3, [pc, #276]	; (8002e04 <HAL_RCC_GetSysClockFreq+0x158>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d023      	beq.n	8002d42 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cfa:	4b42      	ldr	r3, [pc, #264]	; (8002e04 <HAL_RCC_GetSysClockFreq+0x158>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	099b      	lsrs	r3, r3, #6
 8002d00:	f04f 0400 	mov.w	r4, #0
 8002d04:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d08:	f04f 0200 	mov.w	r2, #0
 8002d0c:	ea03 0501 	and.w	r5, r3, r1
 8002d10:	ea04 0602 	and.w	r6, r4, r2
 8002d14:	4a3d      	ldr	r2, [pc, #244]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x160>)
 8002d16:	fb02 f106 	mul.w	r1, r2, r6
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	fb02 f205 	mul.w	r2, r2, r5
 8002d20:	440a      	add	r2, r1
 8002d22:	493a      	ldr	r1, [pc, #232]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x160>)
 8002d24:	fba5 0101 	umull	r0, r1, r5, r1
 8002d28:	1853      	adds	r3, r2, r1
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f04f 0400 	mov.w	r4, #0
 8002d32:	461a      	mov	r2, r3
 8002d34:	4623      	mov	r3, r4
 8002d36:	f7fd fa6b 	bl	8000210 <__aeabi_uldivmod>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	460c      	mov	r4, r1
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	e049      	b.n	8002dd6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d42:	4b30      	ldr	r3, [pc, #192]	; (8002e04 <HAL_RCC_GetSysClockFreq+0x158>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	099b      	lsrs	r3, r3, #6
 8002d48:	f04f 0400 	mov.w	r4, #0
 8002d4c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d50:	f04f 0200 	mov.w	r2, #0
 8002d54:	ea03 0501 	and.w	r5, r3, r1
 8002d58:	ea04 0602 	and.w	r6, r4, r2
 8002d5c:	4629      	mov	r1, r5
 8002d5e:	4632      	mov	r2, r6
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	f04f 0400 	mov.w	r4, #0
 8002d68:	0154      	lsls	r4, r2, #5
 8002d6a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d6e:	014b      	lsls	r3, r1, #5
 8002d70:	4619      	mov	r1, r3
 8002d72:	4622      	mov	r2, r4
 8002d74:	1b49      	subs	r1, r1, r5
 8002d76:	eb62 0206 	sbc.w	r2, r2, r6
 8002d7a:	f04f 0300 	mov.w	r3, #0
 8002d7e:	f04f 0400 	mov.w	r4, #0
 8002d82:	0194      	lsls	r4, r2, #6
 8002d84:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d88:	018b      	lsls	r3, r1, #6
 8002d8a:	1a5b      	subs	r3, r3, r1
 8002d8c:	eb64 0402 	sbc.w	r4, r4, r2
 8002d90:	f04f 0100 	mov.w	r1, #0
 8002d94:	f04f 0200 	mov.w	r2, #0
 8002d98:	00e2      	lsls	r2, r4, #3
 8002d9a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d9e:	00d9      	lsls	r1, r3, #3
 8002da0:	460b      	mov	r3, r1
 8002da2:	4614      	mov	r4, r2
 8002da4:	195b      	adds	r3, r3, r5
 8002da6:	eb44 0406 	adc.w	r4, r4, r6
 8002daa:	f04f 0100 	mov.w	r1, #0
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	02a2      	lsls	r2, r4, #10
 8002db4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002db8:	0299      	lsls	r1, r3, #10
 8002dba:	460b      	mov	r3, r1
 8002dbc:	4614      	mov	r4, r2
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	4621      	mov	r1, r4
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f04f 0400 	mov.w	r4, #0
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4623      	mov	r3, r4
 8002dcc:	f7fd fa20 	bl	8000210 <__aeabi_uldivmod>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	460c      	mov	r4, r1
 8002dd4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002dd6:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <HAL_RCC_GetSysClockFreq+0x158>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	0c1b      	lsrs	r3, r3, #16
 8002ddc:	f003 0303 	and.w	r3, r3, #3
 8002de0:	3301      	adds	r3, #1
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dee:	60bb      	str	r3, [r7, #8]
      break;
 8002df0:	e002      	b.n	8002df8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002df2:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002df4:	60bb      	str	r3, [r7, #8]
      break;
 8002df6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002df8:	68bb      	ldr	r3, [r7, #8]
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e02:	bf00      	nop
 8002e04:	40023800 	.word	0x40023800
 8002e08:	00f42400 	.word	0x00f42400
 8002e0c:	017d7840 	.word	0x017d7840

08002e10 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e14:	4b03      	ldr	r3, [pc, #12]	; (8002e24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e16:	681b      	ldr	r3, [r3, #0]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	200000f4 	.word	0x200000f4

08002e28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e2c:	f7ff fff0 	bl	8002e10 <HAL_RCC_GetHCLKFreq>
 8002e30:	4601      	mov	r1, r0
 8002e32:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	0a9b      	lsrs	r3, r3, #10
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	4a03      	ldr	r2, [pc, #12]	; (8002e4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e3e:	5cd3      	ldrb	r3, [r2, r3]
 8002e40:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	08006538 	.word	0x08006538

08002e50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e54:	f7ff ffdc 	bl	8002e10 <HAL_RCC_GetHCLKFreq>
 8002e58:	4601      	mov	r1, r0
 8002e5a:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	0b5b      	lsrs	r3, r3, #13
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	4a03      	ldr	r2, [pc, #12]	; (8002e74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e66:	5cd3      	ldrb	r3, [r2, r3]
 8002e68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40023800 	.word	0x40023800
 8002e74:	08006538 	.word	0x08006538

08002e78 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	220f      	movs	r2, #15
 8002e86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e88:	4b12      	ldr	r3, [pc, #72]	; (8002ed4 <HAL_RCC_GetClockConfig+0x5c>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 0203 	and.w	r2, r3, #3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e94:	4b0f      	ldr	r3, [pc, #60]	; (8002ed4 <HAL_RCC_GetClockConfig+0x5c>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ea0:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <HAL_RCC_GetClockConfig+0x5c>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002eac:	4b09      	ldr	r3, [pc, #36]	; (8002ed4 <HAL_RCC_GetClockConfig+0x5c>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	08db      	lsrs	r3, r3, #3
 8002eb2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002eba:	4b07      	ldr	r3, [pc, #28]	; (8002ed8 <HAL_RCC_GetClockConfig+0x60>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 020f 	and.w	r2, r3, #15
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	601a      	str	r2, [r3, #0]
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	40023c00 	.word	0x40023c00

08002edc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b088      	sub	sp, #32
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002eec:	2300      	movs	r3, #0
 8002eee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d012      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f04:	4b69      	ldr	r3, [pc, #420]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	4a68      	ldr	r2, [pc, #416]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f0a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f0e:	6093      	str	r3, [r2, #8]
 8002f10:	4b66      	ldr	r3, [pc, #408]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f18:	4964      	ldr	r1, [pc, #400]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002f26:	2301      	movs	r3, #1
 8002f28:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d017      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f36:	4b5d      	ldr	r3, [pc, #372]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f44:	4959      	ldr	r1, [pc, #356]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f54:	d101      	bne.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002f56:	2301      	movs	r3, #1
 8002f58:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002f62:	2301      	movs	r3, #1
 8002f64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d017      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f72:	4b4e      	ldr	r3, [pc, #312]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f78:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	494a      	ldr	r1, [pc, #296]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f90:	d101      	bne.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002f92:	2301      	movs	r3, #1
 8002f94:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0320 	and.w	r3, r3, #32
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 808b 	beq.w	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fc0:	4b3a      	ldr	r3, [pc, #232]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	4a39      	ldr	r2, [pc, #228]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fca:	6413      	str	r3, [r2, #64]	; 0x40
 8002fcc:	4b37      	ldr	r3, [pc, #220]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002fd8:	4b35      	ldr	r3, [pc, #212]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a34      	ldr	r2, [pc, #208]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fe4:	f7fe f8f6 	bl	80011d4 <HAL_GetTick>
 8002fe8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002fea:	e008      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fec:	f7fe f8f2 	bl	80011d4 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b64      	cmp	r3, #100	; 0x64
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e355      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ffe:	4b2c      	ldr	r3, [pc, #176]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003006:	2b00      	cmp	r3, #0
 8003008:	d0f0      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800300a:	4b28      	ldr	r3, [pc, #160]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800300c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003012:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d035      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	429a      	cmp	r2, r3
 8003026:	d02e      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003028:	4b20      	ldr	r3, [pc, #128]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800302a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003030:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003032:	4b1e      	ldr	r3, [pc, #120]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003036:	4a1d      	ldr	r2, [pc, #116]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800303c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800303e:	4b1b      	ldr	r3, [pc, #108]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003042:	4a1a      	ldr	r2, [pc, #104]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003044:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003048:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800304a:	4a18      	ldr	r2, [pc, #96]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003050:	4b16      	ldr	r3, [pc, #88]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b01      	cmp	r3, #1
 800305a:	d114      	bne.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305c:	f7fe f8ba 	bl	80011d4 <HAL_GetTick>
 8003060:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003062:	e00a      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003064:	f7fe f8b6 	bl	80011d4 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003072:	4293      	cmp	r3, r2
 8003074:	d901      	bls.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e317      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800307a:	4b0c      	ldr	r3, [pc, #48]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800307c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0ee      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800308e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003092:	d111      	bne.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003094:	4b05      	ldr	r3, [pc, #20]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030a0:	4b04      	ldr	r3, [pc, #16]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80030a2:	400b      	ands	r3, r1
 80030a4:	4901      	ldr	r1, [pc, #4]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	608b      	str	r3, [r1, #8]
 80030aa:	e00b      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80030ac:	40023800 	.word	0x40023800
 80030b0:	40007000 	.word	0x40007000
 80030b4:	0ffffcff 	.word	0x0ffffcff
 80030b8:	4bb0      	ldr	r3, [pc, #704]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	4aaf      	ldr	r2, [pc, #700]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80030be:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80030c2:	6093      	str	r3, [r2, #8]
 80030c4:	4bad      	ldr	r3, [pc, #692]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80030c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d0:	49aa      	ldr	r1, [pc, #680]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0310 	and.w	r3, r3, #16
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d010      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80030e2:	4ba6      	ldr	r3, [pc, #664]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80030e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030e8:	4aa4      	ldr	r2, [pc, #656]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80030ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80030f2:	4ba2      	ldr	r3, [pc, #648]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80030f4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fc:	499f      	ldr	r1, [pc, #636]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00a      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003110:	4b9a      	ldr	r3, [pc, #616]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003116:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800311e:	4997      	ldr	r1, [pc, #604]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003120:	4313      	orrs	r3, r2
 8003122:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00a      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003132:	4b92      	ldr	r3, [pc, #584]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003138:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003140:	498e      	ldr	r1, [pc, #568]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003142:	4313      	orrs	r3, r2
 8003144:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00a      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003154:	4b89      	ldr	r3, [pc, #548]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003162:	4986      	ldr	r1, [pc, #536]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003164:	4313      	orrs	r3, r2
 8003166:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00a      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003176:	4b81      	ldr	r3, [pc, #516]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003184:	497d      	ldr	r1, [pc, #500]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003186:	4313      	orrs	r3, r2
 8003188:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00a      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003198:	4b78      	ldr	r3, [pc, #480]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800319a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319e:	f023 0203 	bic.w	r2, r3, #3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a6:	4975      	ldr	r1, [pc, #468]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00a      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031ba:	4b70      	ldr	r3, [pc, #448]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80031bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c0:	f023 020c 	bic.w	r2, r3, #12
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c8:	496c      	ldr	r1, [pc, #432]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00a      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031dc:	4b67      	ldr	r3, [pc, #412]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80031de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ea:	4964      	ldr	r1, [pc, #400]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00a      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031fe:	4b5f      	ldr	r3, [pc, #380]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003204:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800320c:	495b      	ldr	r1, [pc, #364]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800320e:	4313      	orrs	r3, r2
 8003210:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00a      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003220:	4b56      	ldr	r3, [pc, #344]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003226:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800322e:	4953      	ldr	r1, [pc, #332]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003230:	4313      	orrs	r3, r2
 8003232:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00a      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003242:	4b4e      	ldr	r3, [pc, #312]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003248:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003250:	494a      	ldr	r1, [pc, #296]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003252:	4313      	orrs	r3, r2
 8003254:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00a      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003264:	4b45      	ldr	r3, [pc, #276]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003272:	4942      	ldr	r1, [pc, #264]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003274:	4313      	orrs	r3, r2
 8003276:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003286:	4b3d      	ldr	r3, [pc, #244]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003294:	4939      	ldr	r1, [pc, #228]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00a      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80032a8:	4b34      	ldr	r3, [pc, #208]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80032aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032b6:	4931      	ldr	r1, [pc, #196]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d011      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80032ca:	4b2c      	ldr	r3, [pc, #176]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80032cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032d8:	4928      	ldr	r1, [pc, #160]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032e8:	d101      	bne.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80032ea:	2301      	movs	r3, #1
 80032ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80032fa:	2301      	movs	r3, #1
 80032fc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00a      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800330a:	4b1c      	ldr	r3, [pc, #112]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800330c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003310:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003318:	4918      	ldr	r1, [pc, #96]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800331a:	4313      	orrs	r3, r2
 800331c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00b      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800332c:	4b13      	ldr	r3, [pc, #76]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800332e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003332:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800333c:	490f      	ldr	r1, [pc, #60]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800333e:	4313      	orrs	r3, r2
 8003340:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d005      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003352:	f040 80d8 	bne.w	8003506 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003356:	4b09      	ldr	r3, [pc, #36]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a08      	ldr	r2, [pc, #32]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800335c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003360:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003362:	f7fd ff37 	bl	80011d4 <HAL_GetTick>
 8003366:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003368:	e00a      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800336a:	f7fd ff33 	bl	80011d4 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b64      	cmp	r3, #100	; 0x64
 8003376:	d903      	bls.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e196      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800337c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003380:	4b6c      	ldr	r3, [pc, #432]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1ee      	bne.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b00      	cmp	r3, #0
 8003396:	d021      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x500>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339c:	2b00      	cmp	r3, #0
 800339e:	d11d      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80033a0:	4b64      	ldr	r3, [pc, #400]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80033a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033a6:	0c1b      	lsrs	r3, r3, #16
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80033ae:	4b61      	ldr	r3, [pc, #388]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80033b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033b4:	0e1b      	lsrs	r3, r3, #24
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	019a      	lsls	r2, r3, #6
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	041b      	lsls	r3, r3, #16
 80033c6:	431a      	orrs	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	061b      	lsls	r3, r3, #24
 80033cc:	431a      	orrs	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	071b      	lsls	r3, r3, #28
 80033d4:	4957      	ldr	r1, [pc, #348]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d004      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x516>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033f0:	d00a      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d02e      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003406:	d129      	bne.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003408:	4b4a      	ldr	r3, [pc, #296]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800340a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800340e:	0c1b      	lsrs	r3, r3, #16
 8003410:	f003 0303 	and.w	r3, r3, #3
 8003414:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003416:	4b47      	ldr	r3, [pc, #284]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800341c:	0f1b      	lsrs	r3, r3, #28
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	019a      	lsls	r2, r3, #6
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	041b      	lsls	r3, r3, #16
 800342e:	431a      	orrs	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	061b      	lsls	r3, r3, #24
 8003436:	431a      	orrs	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	071b      	lsls	r3, r3, #28
 800343c:	493d      	ldr	r1, [pc, #244]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800343e:	4313      	orrs	r3, r2
 8003440:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003444:	4b3b      	ldr	r3, [pc, #236]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003446:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800344a:	f023 021f 	bic.w	r2, r3, #31
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	3b01      	subs	r3, #1
 8003454:	4937      	ldr	r1, [pc, #220]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003456:	4313      	orrs	r3, r2
 8003458:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d01d      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003468:	4b32      	ldr	r3, [pc, #200]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800346a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	f003 030f 	and.w	r3, r3, #15
 8003474:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003476:	4b2f      	ldr	r3, [pc, #188]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003478:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800347c:	0f1b      	lsrs	r3, r3, #28
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	019a      	lsls	r2, r3, #6
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	041b      	lsls	r3, r3, #16
 8003490:	431a      	orrs	r2, r3
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	061b      	lsls	r3, r3, #24
 8003496:	431a      	orrs	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	071b      	lsls	r3, r3, #28
 800349c:	4925      	ldr	r1, [pc, #148]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d011      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	019a      	lsls	r2, r3, #6
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	041b      	lsls	r3, r3, #16
 80034bc:	431a      	orrs	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	061b      	lsls	r3, r3, #24
 80034c4:	431a      	orrs	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	071b      	lsls	r3, r3, #28
 80034cc:	4919      	ldr	r1, [pc, #100]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80034d4:	4b17      	ldr	r3, [pc, #92]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a16      	ldr	r2, [pc, #88]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80034da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034e0:	f7fd fe78 	bl	80011d4 <HAL_GetTick>
 80034e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034e6:	e008      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034e8:	f7fd fe74 	bl	80011d4 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b64      	cmp	r3, #100	; 0x64
 80034f4:	d901      	bls.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e0d7      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034fa:	4b0e      	ldr	r3, [pc, #56]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0f0      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	2b01      	cmp	r3, #1
 800350a:	f040 80cd 	bne.w	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800350e:	4b09      	ldr	r3, [pc, #36]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a08      	ldr	r2, [pc, #32]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003514:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003518:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800351a:	f7fd fe5b 	bl	80011d4 <HAL_GetTick>
 800351e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003520:	e00a      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003522:	f7fd fe57 	bl	80011d4 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b64      	cmp	r3, #100	; 0x64
 800352e:	d903      	bls.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e0ba      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8003534:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003538:	4b5e      	ldr	r3, [pc, #376]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003540:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003544:	d0ed      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003556:	2b00      	cmp	r3, #0
 8003558:	d009      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003562:	2b00      	cmp	r3, #0
 8003564:	d02e      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	2b00      	cmp	r3, #0
 800356c:	d12a      	bne.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800356e:	4b51      	ldr	r3, [pc, #324]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003574:	0c1b      	lsrs	r3, r3, #16
 8003576:	f003 0303 	and.w	r3, r3, #3
 800357a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800357c:	4b4d      	ldr	r3, [pc, #308]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800357e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003582:	0f1b      	lsrs	r3, r3, #28
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	019a      	lsls	r2, r3, #6
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	041b      	lsls	r3, r3, #16
 8003594:	431a      	orrs	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	061b      	lsls	r3, r3, #24
 800359c:	431a      	orrs	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	071b      	lsls	r3, r3, #28
 80035a2:	4944      	ldr	r1, [pc, #272]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80035aa:	4b42      	ldr	r3, [pc, #264]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80035ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035b0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b8:	3b01      	subs	r3, #1
 80035ba:	021b      	lsls	r3, r3, #8
 80035bc:	493d      	ldr	r1, [pc, #244]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d022      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035d8:	d11d      	bne.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035da:	4b36      	ldr	r3, [pc, #216]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80035dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e0:	0e1b      	lsrs	r3, r3, #24
 80035e2:	f003 030f 	and.w	r3, r3, #15
 80035e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80035e8:	4b32      	ldr	r3, [pc, #200]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80035ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ee:	0f1b      	lsrs	r3, r3, #28
 80035f0:	f003 0307 	and.w	r3, r3, #7
 80035f4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	019a      	lsls	r2, r3, #6
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	431a      	orrs	r2, r3
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	061b      	lsls	r3, r3, #24
 8003608:	431a      	orrs	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	071b      	lsls	r3, r3, #28
 800360e:	4929      	ldr	r1, [pc, #164]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003610:	4313      	orrs	r3, r2
 8003612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b00      	cmp	r3, #0
 8003620:	d028      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003622:	4b24      	ldr	r3, [pc, #144]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003628:	0e1b      	lsrs	r3, r3, #24
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003630:	4b20      	ldr	r3, [pc, #128]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003636:	0c1b      	lsrs	r3, r3, #16
 8003638:	f003 0303 	and.w	r3, r3, #3
 800363c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	019a      	lsls	r2, r3, #6
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	041b      	lsls	r3, r3, #16
 8003648:	431a      	orrs	r2, r3
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	061b      	lsls	r3, r3, #24
 800364e:	431a      	orrs	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	69db      	ldr	r3, [r3, #28]
 8003654:	071b      	lsls	r3, r3, #28
 8003656:	4917      	ldr	r1, [pc, #92]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003658:	4313      	orrs	r3, r2
 800365a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800365e:	4b15      	ldr	r3, [pc, #84]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003664:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366c:	4911      	ldr	r1, [pc, #68]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800366e:	4313      	orrs	r3, r2
 8003670:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003674:	4b0f      	ldr	r3, [pc, #60]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a0e      	ldr	r2, [pc, #56]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800367a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800367e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003680:	f7fd fda8 	bl	80011d4 <HAL_GetTick>
 8003684:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003686:	e008      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003688:	f7fd fda4 	bl	80011d4 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b64      	cmp	r3, #100	; 0x64
 8003694:	d901      	bls.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e007      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800369a:	4b06      	ldr	r3, [pc, #24]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036a6:	d1ef      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3720      	adds	r7, #32
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	40023800 	.word	0x40023800

080036b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e01d      	b.n	8003706 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d106      	bne.n	80036e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f815 	bl	800370e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3304      	adds	r3, #4
 80036f4:	4619      	mov	r1, r3
 80036f6:	4610      	mov	r0, r2
 80036f8:	f000 f986 	bl	8003a08 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800370e:	b480      	push	{r7}
 8003710:	b083      	sub	sp, #12
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
	...

08003724 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 0201 	orr.w	r2, r2, #1
 800373a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689a      	ldr	r2, [r3, #8]
 8003742:	4b0c      	ldr	r3, [pc, #48]	; (8003774 <HAL_TIM_Base_Start_IT+0x50>)
 8003744:	4013      	ands	r3, r2
 8003746:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2b06      	cmp	r3, #6
 800374c:	d00b      	beq.n	8003766 <HAL_TIM_Base_Start_IT+0x42>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003754:	d007      	beq.n	8003766 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f042 0201 	orr.w	r2, r2, #1
 8003764:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	00010007 	.word	0x00010007

08003778 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b02      	cmp	r3, #2
 800378c:	d122      	bne.n	80037d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b02      	cmp	r3, #2
 800379a:	d11b      	bne.n	80037d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f06f 0202 	mvn.w	r2, #2
 80037a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f905 	bl	80039ca <HAL_TIM_IC_CaptureCallback>
 80037c0:	e005      	b.n	80037ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f8f7 	bl	80039b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f908 	bl	80039de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	f003 0304 	and.w	r3, r3, #4
 80037de:	2b04      	cmp	r3, #4
 80037e0:	d122      	bne.n	8003828 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	d11b      	bne.n	8003828 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f06f 0204 	mvn.w	r2, #4
 80037f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2202      	movs	r2, #2
 80037fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f8db 	bl	80039ca <HAL_TIM_IC_CaptureCallback>
 8003814:	e005      	b.n	8003822 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f8cd 	bl	80039b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f8de 	bl	80039de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	f003 0308 	and.w	r3, r3, #8
 8003832:	2b08      	cmp	r3, #8
 8003834:	d122      	bne.n	800387c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f003 0308 	and.w	r3, r3, #8
 8003840:	2b08      	cmp	r3, #8
 8003842:	d11b      	bne.n	800387c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f06f 0208 	mvn.w	r2, #8
 800384c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2204      	movs	r2, #4
 8003852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	f003 0303 	and.w	r3, r3, #3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f8b1 	bl	80039ca <HAL_TIM_IC_CaptureCallback>
 8003868:	e005      	b.n	8003876 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f8a3 	bl	80039b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f8b4 	bl	80039de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	f003 0310 	and.w	r3, r3, #16
 8003886:	2b10      	cmp	r3, #16
 8003888:	d122      	bne.n	80038d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	f003 0310 	and.w	r3, r3, #16
 8003894:	2b10      	cmp	r3, #16
 8003896:	d11b      	bne.n	80038d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f06f 0210 	mvn.w	r2, #16
 80038a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2208      	movs	r2, #8
 80038a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f887 	bl	80039ca <HAL_TIM_IC_CaptureCallback>
 80038bc:	e005      	b.n	80038ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f879 	bl	80039b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f88a 	bl	80039de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d10e      	bne.n	80038fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d107      	bne.n	80038fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f06f 0201 	mvn.w	r2, #1
 80038f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7fd f9dc 	bl	8000cb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003906:	2b80      	cmp	r3, #128	; 0x80
 8003908:	d10e      	bne.n	8003928 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003914:	2b80      	cmp	r3, #128	; 0x80
 8003916:	d107      	bne.n	8003928 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f91a 	bl	8003b5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003932:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003936:	d10e      	bne.n	8003956 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003942:	2b80      	cmp	r3, #128	; 0x80
 8003944:	d107      	bne.n	8003956 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800394e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f90d 	bl	8003b70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003960:	2b40      	cmp	r3, #64	; 0x40
 8003962:	d10e      	bne.n	8003982 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800396e:	2b40      	cmp	r3, #64	; 0x40
 8003970:	d107      	bne.n	8003982 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800397a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 f838 	bl	80039f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	f003 0320 	and.w	r3, r3, #32
 800398c:	2b20      	cmp	r3, #32
 800398e:	d10e      	bne.n	80039ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f003 0320 	and.w	r3, r3, #32
 800399a:	2b20      	cmp	r3, #32
 800399c:	d107      	bne.n	80039ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f06f 0220 	mvn.w	r2, #32
 80039a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 f8cd 	bl	8003b48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039ae:	bf00      	nop
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039de:	b480      	push	{r7}
 80039e0:	b083      	sub	sp, #12
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039fa:	bf00      	nop
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
	...

08003a08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a40      	ldr	r2, [pc, #256]	; (8003b1c <TIM_Base_SetConfig+0x114>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d013      	beq.n	8003a48 <TIM_Base_SetConfig+0x40>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a26:	d00f      	beq.n	8003a48 <TIM_Base_SetConfig+0x40>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a3d      	ldr	r2, [pc, #244]	; (8003b20 <TIM_Base_SetConfig+0x118>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d00b      	beq.n	8003a48 <TIM_Base_SetConfig+0x40>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a3c      	ldr	r2, [pc, #240]	; (8003b24 <TIM_Base_SetConfig+0x11c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d007      	beq.n	8003a48 <TIM_Base_SetConfig+0x40>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a3b      	ldr	r2, [pc, #236]	; (8003b28 <TIM_Base_SetConfig+0x120>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d003      	beq.n	8003a48 <TIM_Base_SetConfig+0x40>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a3a      	ldr	r2, [pc, #232]	; (8003b2c <TIM_Base_SetConfig+0x124>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d108      	bne.n	8003a5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a2f      	ldr	r2, [pc, #188]	; (8003b1c <TIM_Base_SetConfig+0x114>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d02b      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a68:	d027      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a2c      	ldr	r2, [pc, #176]	; (8003b20 <TIM_Base_SetConfig+0x118>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d023      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a2b      	ldr	r2, [pc, #172]	; (8003b24 <TIM_Base_SetConfig+0x11c>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d01f      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a2a      	ldr	r2, [pc, #168]	; (8003b28 <TIM_Base_SetConfig+0x120>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d01b      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a29      	ldr	r2, [pc, #164]	; (8003b2c <TIM_Base_SetConfig+0x124>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d017      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a28      	ldr	r2, [pc, #160]	; (8003b30 <TIM_Base_SetConfig+0x128>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d013      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a27      	ldr	r2, [pc, #156]	; (8003b34 <TIM_Base_SetConfig+0x12c>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d00f      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a26      	ldr	r2, [pc, #152]	; (8003b38 <TIM_Base_SetConfig+0x130>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d00b      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a25      	ldr	r2, [pc, #148]	; (8003b3c <TIM_Base_SetConfig+0x134>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d007      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a24      	ldr	r2, [pc, #144]	; (8003b40 <TIM_Base_SetConfig+0x138>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d003      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a23      	ldr	r2, [pc, #140]	; (8003b44 <TIM_Base_SetConfig+0x13c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d108      	bne.n	8003acc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ac0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a0a      	ldr	r2, [pc, #40]	; (8003b1c <TIM_Base_SetConfig+0x114>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d003      	beq.n	8003b00 <TIM_Base_SetConfig+0xf8>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a0c      	ldr	r2, [pc, #48]	; (8003b2c <TIM_Base_SetConfig+0x124>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d103      	bne.n	8003b08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	691a      	ldr	r2, [r3, #16]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	615a      	str	r2, [r3, #20]
}
 8003b0e:	bf00      	nop
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	40010000 	.word	0x40010000
 8003b20:	40000400 	.word	0x40000400
 8003b24:	40000800 	.word	0x40000800
 8003b28:	40000c00 	.word	0x40000c00
 8003b2c:	40010400 	.word	0x40010400
 8003b30:	40014000 	.word	0x40014000
 8003b34:	40014400 	.word	0x40014400
 8003b38:	40014800 	.word	0x40014800
 8003b3c:	40001800 	.word	0x40001800
 8003b40:	40001c00 	.word	0x40001c00
 8003b44:	40002000 	.word	0x40002000

08003b48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e040      	b.n	8003c18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d106      	bne.n	8003bac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7fd f952 	bl	8000e50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2224      	movs	r2, #36	; 0x24
 8003bb0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0201 	bic.w	r2, r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f8be 	bl	8003d44 <UART_SetConfig>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d101      	bne.n	8003bd2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e022      	b.n	8003c18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d002      	beq.n	8003be0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 fb5c 	bl	8004298 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0201 	orr.w	r2, r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 fbe3 	bl	80043dc <UART_CheckIdleState>
 8003c16:	4603      	mov	r3, r0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b08a      	sub	sp, #40	; 0x28
 8003c24:	af02      	add	r7, sp, #8
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	603b      	str	r3, [r7, #0]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c34:	2b20      	cmp	r3, #32
 8003c36:	d17f      	bne.n	8003d38 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d002      	beq.n	8003c44 <HAL_UART_Transmit+0x24>
 8003c3e:	88fb      	ldrh	r3, [r7, #6]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d101      	bne.n	8003c48 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e078      	b.n	8003d3a <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d101      	bne.n	8003c56 <HAL_UART_Transmit+0x36>
 8003c52:	2302      	movs	r3, #2
 8003c54:	e071      	b.n	8003d3a <HAL_UART_Transmit+0x11a>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2221      	movs	r2, #33	; 0x21
 8003c68:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003c6a:	f7fd fab3 	bl	80011d4 <HAL_GetTick>
 8003c6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	88fa      	ldrh	r2, [r7, #6]
 8003c74:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	88fa      	ldrh	r2, [r7, #6]
 8003c7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c88:	d108      	bne.n	8003c9c <HAL_UART_Transmit+0x7c>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d104      	bne.n	8003c9c <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8003c92:	2300      	movs	r3, #0
 8003c94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	61bb      	str	r3, [r7, #24]
 8003c9a:	e003      	b.n	8003ca4 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003cac:	e02c      	b.n	8003d08 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	2180      	movs	r1, #128	; 0x80
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 fbbe 	bl	800443a <UART_WaitOnFlagUntilTimeout>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e038      	b.n	8003d3a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10b      	bne.n	8003ce6 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	881b      	ldrh	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cdc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	3302      	adds	r3, #2
 8003ce2:	61bb      	str	r3, [r7, #24]
 8003ce4:	e007      	b.n	8003cf6 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	781a      	ldrb	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1cc      	bne.n	8003cae <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	9300      	str	r3, [sp, #0]
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	2140      	movs	r1, #64	; 0x40
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f000 fb8b 	bl	800443a <UART_WaitOnFlagUntilTimeout>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e005      	b.n	8003d3a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2220      	movs	r2, #32
 8003d32:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003d34:	2300      	movs	r3, #0
 8003d36:	e000      	b.n	8003d3a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8003d38:	2302      	movs	r3, #2
  }
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3720      	adds	r7, #32
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
	...

08003d44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b088      	sub	sp, #32
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d50:	2300      	movs	r3, #0
 8003d52:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	69db      	ldr	r3, [r3, #28]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	4bb1      	ldr	r3, [pc, #708]	; (8004038 <UART_SetConfig+0x2f4>)
 8003d74:	4013      	ands	r3, r2
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6812      	ldr	r2, [r2, #0]
 8003d7a:	6939      	ldr	r1, [r7, #16]
 8003d7c:	430b      	orrs	r3, r1
 8003d7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68da      	ldr	r2, [r3, #12]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a9f      	ldr	r2, [pc, #636]	; (800403c <UART_SetConfig+0x2f8>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d121      	bne.n	8003e08 <UART_SetConfig+0xc4>
 8003dc4:	4b9e      	ldr	r3, [pc, #632]	; (8004040 <UART_SetConfig+0x2fc>)
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dca:	f003 0303 	and.w	r3, r3, #3
 8003dce:	2b03      	cmp	r3, #3
 8003dd0:	d816      	bhi.n	8003e00 <UART_SetConfig+0xbc>
 8003dd2:	a201      	add	r2, pc, #4	; (adr r2, 8003dd8 <UART_SetConfig+0x94>)
 8003dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd8:	08003de9 	.word	0x08003de9
 8003ddc:	08003df5 	.word	0x08003df5
 8003de0:	08003def 	.word	0x08003def
 8003de4:	08003dfb 	.word	0x08003dfb
 8003de8:	2301      	movs	r3, #1
 8003dea:	77fb      	strb	r3, [r7, #31]
 8003dec:	e151      	b.n	8004092 <UART_SetConfig+0x34e>
 8003dee:	2302      	movs	r3, #2
 8003df0:	77fb      	strb	r3, [r7, #31]
 8003df2:	e14e      	b.n	8004092 <UART_SetConfig+0x34e>
 8003df4:	2304      	movs	r3, #4
 8003df6:	77fb      	strb	r3, [r7, #31]
 8003df8:	e14b      	b.n	8004092 <UART_SetConfig+0x34e>
 8003dfa:	2308      	movs	r3, #8
 8003dfc:	77fb      	strb	r3, [r7, #31]
 8003dfe:	e148      	b.n	8004092 <UART_SetConfig+0x34e>
 8003e00:	2310      	movs	r3, #16
 8003e02:	77fb      	strb	r3, [r7, #31]
 8003e04:	bf00      	nop
 8003e06:	e144      	b.n	8004092 <UART_SetConfig+0x34e>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a8d      	ldr	r2, [pc, #564]	; (8004044 <UART_SetConfig+0x300>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d134      	bne.n	8003e7c <UART_SetConfig+0x138>
 8003e12:	4b8b      	ldr	r3, [pc, #556]	; (8004040 <UART_SetConfig+0x2fc>)
 8003e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e18:	f003 030c 	and.w	r3, r3, #12
 8003e1c:	2b0c      	cmp	r3, #12
 8003e1e:	d829      	bhi.n	8003e74 <UART_SetConfig+0x130>
 8003e20:	a201      	add	r2, pc, #4	; (adr r2, 8003e28 <UART_SetConfig+0xe4>)
 8003e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e26:	bf00      	nop
 8003e28:	08003e5d 	.word	0x08003e5d
 8003e2c:	08003e75 	.word	0x08003e75
 8003e30:	08003e75 	.word	0x08003e75
 8003e34:	08003e75 	.word	0x08003e75
 8003e38:	08003e69 	.word	0x08003e69
 8003e3c:	08003e75 	.word	0x08003e75
 8003e40:	08003e75 	.word	0x08003e75
 8003e44:	08003e75 	.word	0x08003e75
 8003e48:	08003e63 	.word	0x08003e63
 8003e4c:	08003e75 	.word	0x08003e75
 8003e50:	08003e75 	.word	0x08003e75
 8003e54:	08003e75 	.word	0x08003e75
 8003e58:	08003e6f 	.word	0x08003e6f
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	77fb      	strb	r3, [r7, #31]
 8003e60:	e117      	b.n	8004092 <UART_SetConfig+0x34e>
 8003e62:	2302      	movs	r3, #2
 8003e64:	77fb      	strb	r3, [r7, #31]
 8003e66:	e114      	b.n	8004092 <UART_SetConfig+0x34e>
 8003e68:	2304      	movs	r3, #4
 8003e6a:	77fb      	strb	r3, [r7, #31]
 8003e6c:	e111      	b.n	8004092 <UART_SetConfig+0x34e>
 8003e6e:	2308      	movs	r3, #8
 8003e70:	77fb      	strb	r3, [r7, #31]
 8003e72:	e10e      	b.n	8004092 <UART_SetConfig+0x34e>
 8003e74:	2310      	movs	r3, #16
 8003e76:	77fb      	strb	r3, [r7, #31]
 8003e78:	bf00      	nop
 8003e7a:	e10a      	b.n	8004092 <UART_SetConfig+0x34e>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a71      	ldr	r2, [pc, #452]	; (8004048 <UART_SetConfig+0x304>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d120      	bne.n	8003ec8 <UART_SetConfig+0x184>
 8003e86:	4b6e      	ldr	r3, [pc, #440]	; (8004040 <UART_SetConfig+0x2fc>)
 8003e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e90:	2b10      	cmp	r3, #16
 8003e92:	d00f      	beq.n	8003eb4 <UART_SetConfig+0x170>
 8003e94:	2b10      	cmp	r3, #16
 8003e96:	d802      	bhi.n	8003e9e <UART_SetConfig+0x15a>
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d005      	beq.n	8003ea8 <UART_SetConfig+0x164>
 8003e9c:	e010      	b.n	8003ec0 <UART_SetConfig+0x17c>
 8003e9e:	2b20      	cmp	r3, #32
 8003ea0:	d005      	beq.n	8003eae <UART_SetConfig+0x16a>
 8003ea2:	2b30      	cmp	r3, #48	; 0x30
 8003ea4:	d009      	beq.n	8003eba <UART_SetConfig+0x176>
 8003ea6:	e00b      	b.n	8003ec0 <UART_SetConfig+0x17c>
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	77fb      	strb	r3, [r7, #31]
 8003eac:	e0f1      	b.n	8004092 <UART_SetConfig+0x34e>
 8003eae:	2302      	movs	r3, #2
 8003eb0:	77fb      	strb	r3, [r7, #31]
 8003eb2:	e0ee      	b.n	8004092 <UART_SetConfig+0x34e>
 8003eb4:	2304      	movs	r3, #4
 8003eb6:	77fb      	strb	r3, [r7, #31]
 8003eb8:	e0eb      	b.n	8004092 <UART_SetConfig+0x34e>
 8003eba:	2308      	movs	r3, #8
 8003ebc:	77fb      	strb	r3, [r7, #31]
 8003ebe:	e0e8      	b.n	8004092 <UART_SetConfig+0x34e>
 8003ec0:	2310      	movs	r3, #16
 8003ec2:	77fb      	strb	r3, [r7, #31]
 8003ec4:	bf00      	nop
 8003ec6:	e0e4      	b.n	8004092 <UART_SetConfig+0x34e>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a5f      	ldr	r2, [pc, #380]	; (800404c <UART_SetConfig+0x308>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d120      	bne.n	8003f14 <UART_SetConfig+0x1d0>
 8003ed2:	4b5b      	ldr	r3, [pc, #364]	; (8004040 <UART_SetConfig+0x2fc>)
 8003ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003edc:	2b40      	cmp	r3, #64	; 0x40
 8003ede:	d00f      	beq.n	8003f00 <UART_SetConfig+0x1bc>
 8003ee0:	2b40      	cmp	r3, #64	; 0x40
 8003ee2:	d802      	bhi.n	8003eea <UART_SetConfig+0x1a6>
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d005      	beq.n	8003ef4 <UART_SetConfig+0x1b0>
 8003ee8:	e010      	b.n	8003f0c <UART_SetConfig+0x1c8>
 8003eea:	2b80      	cmp	r3, #128	; 0x80
 8003eec:	d005      	beq.n	8003efa <UART_SetConfig+0x1b6>
 8003eee:	2bc0      	cmp	r3, #192	; 0xc0
 8003ef0:	d009      	beq.n	8003f06 <UART_SetConfig+0x1c2>
 8003ef2:	e00b      	b.n	8003f0c <UART_SetConfig+0x1c8>
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	77fb      	strb	r3, [r7, #31]
 8003ef8:	e0cb      	b.n	8004092 <UART_SetConfig+0x34e>
 8003efa:	2302      	movs	r3, #2
 8003efc:	77fb      	strb	r3, [r7, #31]
 8003efe:	e0c8      	b.n	8004092 <UART_SetConfig+0x34e>
 8003f00:	2304      	movs	r3, #4
 8003f02:	77fb      	strb	r3, [r7, #31]
 8003f04:	e0c5      	b.n	8004092 <UART_SetConfig+0x34e>
 8003f06:	2308      	movs	r3, #8
 8003f08:	77fb      	strb	r3, [r7, #31]
 8003f0a:	e0c2      	b.n	8004092 <UART_SetConfig+0x34e>
 8003f0c:	2310      	movs	r3, #16
 8003f0e:	77fb      	strb	r3, [r7, #31]
 8003f10:	bf00      	nop
 8003f12:	e0be      	b.n	8004092 <UART_SetConfig+0x34e>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a4d      	ldr	r2, [pc, #308]	; (8004050 <UART_SetConfig+0x30c>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d124      	bne.n	8003f68 <UART_SetConfig+0x224>
 8003f1e:	4b48      	ldr	r3, [pc, #288]	; (8004040 <UART_SetConfig+0x2fc>)
 8003f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f2c:	d012      	beq.n	8003f54 <UART_SetConfig+0x210>
 8003f2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f32:	d802      	bhi.n	8003f3a <UART_SetConfig+0x1f6>
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d007      	beq.n	8003f48 <UART_SetConfig+0x204>
 8003f38:	e012      	b.n	8003f60 <UART_SetConfig+0x21c>
 8003f3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f3e:	d006      	beq.n	8003f4e <UART_SetConfig+0x20a>
 8003f40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f44:	d009      	beq.n	8003f5a <UART_SetConfig+0x216>
 8003f46:	e00b      	b.n	8003f60 <UART_SetConfig+0x21c>
 8003f48:	2300      	movs	r3, #0
 8003f4a:	77fb      	strb	r3, [r7, #31]
 8003f4c:	e0a1      	b.n	8004092 <UART_SetConfig+0x34e>
 8003f4e:	2302      	movs	r3, #2
 8003f50:	77fb      	strb	r3, [r7, #31]
 8003f52:	e09e      	b.n	8004092 <UART_SetConfig+0x34e>
 8003f54:	2304      	movs	r3, #4
 8003f56:	77fb      	strb	r3, [r7, #31]
 8003f58:	e09b      	b.n	8004092 <UART_SetConfig+0x34e>
 8003f5a:	2308      	movs	r3, #8
 8003f5c:	77fb      	strb	r3, [r7, #31]
 8003f5e:	e098      	b.n	8004092 <UART_SetConfig+0x34e>
 8003f60:	2310      	movs	r3, #16
 8003f62:	77fb      	strb	r3, [r7, #31]
 8003f64:	bf00      	nop
 8003f66:	e094      	b.n	8004092 <UART_SetConfig+0x34e>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a39      	ldr	r2, [pc, #228]	; (8004054 <UART_SetConfig+0x310>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d124      	bne.n	8003fbc <UART_SetConfig+0x278>
 8003f72:	4b33      	ldr	r3, [pc, #204]	; (8004040 <UART_SetConfig+0x2fc>)
 8003f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f80:	d012      	beq.n	8003fa8 <UART_SetConfig+0x264>
 8003f82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f86:	d802      	bhi.n	8003f8e <UART_SetConfig+0x24a>
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d007      	beq.n	8003f9c <UART_SetConfig+0x258>
 8003f8c:	e012      	b.n	8003fb4 <UART_SetConfig+0x270>
 8003f8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f92:	d006      	beq.n	8003fa2 <UART_SetConfig+0x25e>
 8003f94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f98:	d009      	beq.n	8003fae <UART_SetConfig+0x26a>
 8003f9a:	e00b      	b.n	8003fb4 <UART_SetConfig+0x270>
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	77fb      	strb	r3, [r7, #31]
 8003fa0:	e077      	b.n	8004092 <UART_SetConfig+0x34e>
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	77fb      	strb	r3, [r7, #31]
 8003fa6:	e074      	b.n	8004092 <UART_SetConfig+0x34e>
 8003fa8:	2304      	movs	r3, #4
 8003faa:	77fb      	strb	r3, [r7, #31]
 8003fac:	e071      	b.n	8004092 <UART_SetConfig+0x34e>
 8003fae:	2308      	movs	r3, #8
 8003fb0:	77fb      	strb	r3, [r7, #31]
 8003fb2:	e06e      	b.n	8004092 <UART_SetConfig+0x34e>
 8003fb4:	2310      	movs	r3, #16
 8003fb6:	77fb      	strb	r3, [r7, #31]
 8003fb8:	bf00      	nop
 8003fba:	e06a      	b.n	8004092 <UART_SetConfig+0x34e>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a25      	ldr	r2, [pc, #148]	; (8004058 <UART_SetConfig+0x314>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d124      	bne.n	8004010 <UART_SetConfig+0x2cc>
 8003fc6:	4b1e      	ldr	r3, [pc, #120]	; (8004040 <UART_SetConfig+0x2fc>)
 8003fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fcc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd4:	d012      	beq.n	8003ffc <UART_SetConfig+0x2b8>
 8003fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fda:	d802      	bhi.n	8003fe2 <UART_SetConfig+0x29e>
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d007      	beq.n	8003ff0 <UART_SetConfig+0x2ac>
 8003fe0:	e012      	b.n	8004008 <UART_SetConfig+0x2c4>
 8003fe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe6:	d006      	beq.n	8003ff6 <UART_SetConfig+0x2b2>
 8003fe8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fec:	d009      	beq.n	8004002 <UART_SetConfig+0x2be>
 8003fee:	e00b      	b.n	8004008 <UART_SetConfig+0x2c4>
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	77fb      	strb	r3, [r7, #31]
 8003ff4:	e04d      	b.n	8004092 <UART_SetConfig+0x34e>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	77fb      	strb	r3, [r7, #31]
 8003ffa:	e04a      	b.n	8004092 <UART_SetConfig+0x34e>
 8003ffc:	2304      	movs	r3, #4
 8003ffe:	77fb      	strb	r3, [r7, #31]
 8004000:	e047      	b.n	8004092 <UART_SetConfig+0x34e>
 8004002:	2308      	movs	r3, #8
 8004004:	77fb      	strb	r3, [r7, #31]
 8004006:	e044      	b.n	8004092 <UART_SetConfig+0x34e>
 8004008:	2310      	movs	r3, #16
 800400a:	77fb      	strb	r3, [r7, #31]
 800400c:	bf00      	nop
 800400e:	e040      	b.n	8004092 <UART_SetConfig+0x34e>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a11      	ldr	r2, [pc, #68]	; (800405c <UART_SetConfig+0x318>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d139      	bne.n	800408e <UART_SetConfig+0x34a>
 800401a:	4b09      	ldr	r3, [pc, #36]	; (8004040 <UART_SetConfig+0x2fc>)
 800401c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004020:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004024:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004028:	d027      	beq.n	800407a <UART_SetConfig+0x336>
 800402a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800402e:	d817      	bhi.n	8004060 <UART_SetConfig+0x31c>
 8004030:	2b00      	cmp	r3, #0
 8004032:	d01c      	beq.n	800406e <UART_SetConfig+0x32a>
 8004034:	e027      	b.n	8004086 <UART_SetConfig+0x342>
 8004036:	bf00      	nop
 8004038:	efff69f3 	.word	0xefff69f3
 800403c:	40011000 	.word	0x40011000
 8004040:	40023800 	.word	0x40023800
 8004044:	40004400 	.word	0x40004400
 8004048:	40004800 	.word	0x40004800
 800404c:	40004c00 	.word	0x40004c00
 8004050:	40005000 	.word	0x40005000
 8004054:	40011400 	.word	0x40011400
 8004058:	40007800 	.word	0x40007800
 800405c:	40007c00 	.word	0x40007c00
 8004060:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004064:	d006      	beq.n	8004074 <UART_SetConfig+0x330>
 8004066:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800406a:	d009      	beq.n	8004080 <UART_SetConfig+0x33c>
 800406c:	e00b      	b.n	8004086 <UART_SetConfig+0x342>
 800406e:	2300      	movs	r3, #0
 8004070:	77fb      	strb	r3, [r7, #31]
 8004072:	e00e      	b.n	8004092 <UART_SetConfig+0x34e>
 8004074:	2302      	movs	r3, #2
 8004076:	77fb      	strb	r3, [r7, #31]
 8004078:	e00b      	b.n	8004092 <UART_SetConfig+0x34e>
 800407a:	2304      	movs	r3, #4
 800407c:	77fb      	strb	r3, [r7, #31]
 800407e:	e008      	b.n	8004092 <UART_SetConfig+0x34e>
 8004080:	2308      	movs	r3, #8
 8004082:	77fb      	strb	r3, [r7, #31]
 8004084:	e005      	b.n	8004092 <UART_SetConfig+0x34e>
 8004086:	2310      	movs	r3, #16
 8004088:	77fb      	strb	r3, [r7, #31]
 800408a:	bf00      	nop
 800408c:	e001      	b.n	8004092 <UART_SetConfig+0x34e>
 800408e:	2310      	movs	r3, #16
 8004090:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800409a:	d17f      	bne.n	800419c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800409c:	7ffb      	ldrb	r3, [r7, #31]
 800409e:	2b08      	cmp	r3, #8
 80040a0:	d85c      	bhi.n	800415c <UART_SetConfig+0x418>
 80040a2:	a201      	add	r2, pc, #4	; (adr r2, 80040a8 <UART_SetConfig+0x364>)
 80040a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a8:	080040cd 	.word	0x080040cd
 80040ac:	080040ed 	.word	0x080040ed
 80040b0:	0800410d 	.word	0x0800410d
 80040b4:	0800415d 	.word	0x0800415d
 80040b8:	08004125 	.word	0x08004125
 80040bc:	0800415d 	.word	0x0800415d
 80040c0:	0800415d 	.word	0x0800415d
 80040c4:	0800415d 	.word	0x0800415d
 80040c8:	08004145 	.word	0x08004145
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040cc:	f7fe feac 	bl	8002e28 <HAL_RCC_GetPCLK1Freq>
 80040d0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	005a      	lsls	r2, r3, #1
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	085b      	lsrs	r3, r3, #1
 80040dc:	441a      	add	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	61bb      	str	r3, [r7, #24]
        break;
 80040ea:	e03a      	b.n	8004162 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040ec:	f7fe feb0 	bl	8002e50 <HAL_RCC_GetPCLK2Freq>
 80040f0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	005a      	lsls	r2, r3, #1
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	085b      	lsrs	r3, r3, #1
 80040fc:	441a      	add	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	fbb2 f3f3 	udiv	r3, r2, r3
 8004106:	b29b      	uxth	r3, r3
 8004108:	61bb      	str	r3, [r7, #24]
        break;
 800410a:	e02a      	b.n	8004162 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	085a      	lsrs	r2, r3, #1
 8004112:	4b5f      	ldr	r3, [pc, #380]	; (8004290 <UART_SetConfig+0x54c>)
 8004114:	4413      	add	r3, r2
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	6852      	ldr	r2, [r2, #4]
 800411a:	fbb3 f3f2 	udiv	r3, r3, r2
 800411e:	b29b      	uxth	r3, r3
 8004120:	61bb      	str	r3, [r7, #24]
        break;
 8004122:	e01e      	b.n	8004162 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004124:	f7fe fdc2 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 8004128:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	005a      	lsls	r2, r3, #1
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	085b      	lsrs	r3, r3, #1
 8004134:	441a      	add	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	fbb2 f3f3 	udiv	r3, r2, r3
 800413e:	b29b      	uxth	r3, r3
 8004140:	61bb      	str	r3, [r7, #24]
        break;
 8004142:	e00e      	b.n	8004162 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	085b      	lsrs	r3, r3, #1
 800414a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	fbb2 f3f3 	udiv	r3, r2, r3
 8004156:	b29b      	uxth	r3, r3
 8004158:	61bb      	str	r3, [r7, #24]
        break;
 800415a:	e002      	b.n	8004162 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	75fb      	strb	r3, [r7, #23]
        break;
 8004160:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	2b0f      	cmp	r3, #15
 8004166:	d916      	bls.n	8004196 <UART_SetConfig+0x452>
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800416e:	d212      	bcs.n	8004196 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	b29b      	uxth	r3, r3
 8004174:	f023 030f 	bic.w	r3, r3, #15
 8004178:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	085b      	lsrs	r3, r3, #1
 800417e:	b29b      	uxth	r3, r3
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	b29a      	uxth	r2, r3
 8004186:	897b      	ldrh	r3, [r7, #10]
 8004188:	4313      	orrs	r3, r2
 800418a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	897a      	ldrh	r2, [r7, #10]
 8004192:	60da      	str	r2, [r3, #12]
 8004194:	e070      	b.n	8004278 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	75fb      	strb	r3, [r7, #23]
 800419a:	e06d      	b.n	8004278 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800419c:	7ffb      	ldrb	r3, [r7, #31]
 800419e:	2b08      	cmp	r3, #8
 80041a0:	d859      	bhi.n	8004256 <UART_SetConfig+0x512>
 80041a2:	a201      	add	r2, pc, #4	; (adr r2, 80041a8 <UART_SetConfig+0x464>)
 80041a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a8:	080041cd 	.word	0x080041cd
 80041ac:	080041eb 	.word	0x080041eb
 80041b0:	08004209 	.word	0x08004209
 80041b4:	08004257 	.word	0x08004257
 80041b8:	08004221 	.word	0x08004221
 80041bc:	08004257 	.word	0x08004257
 80041c0:	08004257 	.word	0x08004257
 80041c4:	08004257 	.word	0x08004257
 80041c8:	0800423f 	.word	0x0800423f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041cc:	f7fe fe2c 	bl	8002e28 <HAL_RCC_GetPCLK1Freq>
 80041d0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	085a      	lsrs	r2, r3, #1
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	441a      	add	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	61bb      	str	r3, [r7, #24]
        break;
 80041e8:	e038      	b.n	800425c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041ea:	f7fe fe31 	bl	8002e50 <HAL_RCC_GetPCLK2Freq>
 80041ee:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	085a      	lsrs	r2, r3, #1
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	441a      	add	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004202:	b29b      	uxth	r3, r3
 8004204:	61bb      	str	r3, [r7, #24]
        break;
 8004206:	e029      	b.n	800425c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	085a      	lsrs	r2, r3, #1
 800420e:	4b21      	ldr	r3, [pc, #132]	; (8004294 <UART_SetConfig+0x550>)
 8004210:	4413      	add	r3, r2
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	6852      	ldr	r2, [r2, #4]
 8004216:	fbb3 f3f2 	udiv	r3, r3, r2
 800421a:	b29b      	uxth	r3, r3
 800421c:	61bb      	str	r3, [r7, #24]
        break;
 800421e:	e01d      	b.n	800425c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004220:	f7fe fd44 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 8004224:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	085a      	lsrs	r2, r3, #1
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	441a      	add	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	fbb2 f3f3 	udiv	r3, r2, r3
 8004238:	b29b      	uxth	r3, r3
 800423a:	61bb      	str	r3, [r7, #24]
        break;
 800423c:	e00e      	b.n	800425c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	085b      	lsrs	r3, r3, #1
 8004244:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004250:	b29b      	uxth	r3, r3
 8004252:	61bb      	str	r3, [r7, #24]
        break;
 8004254:	e002      	b.n	800425c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	75fb      	strb	r3, [r7, #23]
        break;
 800425a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	2b0f      	cmp	r3, #15
 8004260:	d908      	bls.n	8004274 <UART_SetConfig+0x530>
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004268:	d204      	bcs.n	8004274 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	60da      	str	r2, [r3, #12]
 8004272:	e001      	b.n	8004278 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004284:	7dfb      	ldrb	r3, [r7, #23]
}
 8004286:	4618      	mov	r0, r3
 8004288:	3720      	adds	r7, #32
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	01e84800 	.word	0x01e84800
 8004294:	00f42400 	.word	0x00f42400

08004298 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00a      	beq.n	80042c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00a      	beq.n	80042e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	430a      	orrs	r2, r1
 80042e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00a      	beq.n	8004306 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430a:	f003 0308 	and.w	r3, r3, #8
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00a      	beq.n	8004328 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	f003 0310 	and.w	r3, r3, #16
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00a      	beq.n	800434a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434e:	f003 0320 	and.w	r3, r3, #32
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00a      	beq.n	800436c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004374:	2b00      	cmp	r3, #0
 8004376:	d01a      	beq.n	80043ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004396:	d10a      	bne.n	80043ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00a      	beq.n	80043d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	605a      	str	r2, [r3, #4]
  }
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af02      	add	r7, sp, #8
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80043ea:	f7fc fef3 	bl	80011d4 <HAL_GetTick>
 80043ee:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0308 	and.w	r3, r3, #8
 80043fa:	2b08      	cmp	r3, #8
 80043fc:	d10e      	bne.n	800441c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 f814 	bl	800443a <UART_WaitOnFlagUntilTimeout>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d001      	beq.n	800441c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e00a      	b.n	8004432 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2220      	movs	r2, #32
 8004420:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2220      	movs	r2, #32
 8004426:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b084      	sub	sp, #16
 800443e:	af00      	add	r7, sp, #0
 8004440:	60f8      	str	r0, [r7, #12]
 8004442:	60b9      	str	r1, [r7, #8]
 8004444:	603b      	str	r3, [r7, #0]
 8004446:	4613      	mov	r3, r2
 8004448:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800444a:	e05d      	b.n	8004508 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004452:	d059      	beq.n	8004508 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004454:	f7fc febe 	bl	80011d4 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	429a      	cmp	r2, r3
 8004462:	d302      	bcc.n	800446a <UART_WaitOnFlagUntilTimeout+0x30>
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d11b      	bne.n	80044a2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004478:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0201 	bic.w	r2, r2, #1
 8004488:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2220      	movs	r2, #32
 800448e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2220      	movs	r2, #32
 8004494:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e042      	b.n	8004528 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d02b      	beq.n	8004508 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044be:	d123      	bne.n	8004508 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044c8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80044d8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 0201 	bic.w	r2, r2, #1
 80044e8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2220      	movs	r2, #32
 80044ee:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2220      	movs	r2, #32
 80044f4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2220      	movs	r2, #32
 80044fa:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e00f      	b.n	8004528 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	69da      	ldr	r2, [r3, #28]
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	4013      	ands	r3, r2
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	429a      	cmp	r2, r3
 8004516:	bf0c      	ite	eq
 8004518:	2301      	moveq	r3, #1
 800451a:	2300      	movne	r3, #0
 800451c:	b2db      	uxtb	r3, r3
 800451e:	461a      	mov	r2, r3
 8004520:	79fb      	ldrb	r3, [r7, #7]
 8004522:	429a      	cmp	r2, r3
 8004524:	d092      	beq.n	800444c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	4603      	mov	r3, r0
 8004538:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800453a:	2300      	movs	r3, #0
 800453c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800453e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004542:	2b84      	cmp	r3, #132	; 0x84
 8004544:	d005      	beq.n	8004552 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004546:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	4413      	add	r3, r2
 800454e:	3303      	adds	r3, #3
 8004550:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004552:	68fb      	ldr	r3, [r7, #12]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004564:	f000 faf0 	bl	8004b48 <vTaskStartScheduler>
  
  return osOK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	bd80      	pop	{r7, pc}

0800456e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800456e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004570:	b089      	sub	sp, #36	; 0x24
 8004572:	af04      	add	r7, sp, #16
 8004574:	6078      	str	r0, [r7, #4]
 8004576:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d020      	beq.n	80045c2 <osThreadCreate+0x54>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d01c      	beq.n	80045c2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685c      	ldr	r4, [r3, #4]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681d      	ldr	r5, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691e      	ldr	r6, [r3, #16]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800459a:	4618      	mov	r0, r3
 800459c:	f7ff ffc8 	bl	8004530 <makeFreeRtosPriority>
 80045a0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045aa:	9202      	str	r2, [sp, #8]
 80045ac:	9301      	str	r3, [sp, #4]
 80045ae:	9100      	str	r1, [sp, #0]
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	4632      	mov	r2, r6
 80045b4:	4629      	mov	r1, r5
 80045b6:	4620      	mov	r0, r4
 80045b8:	f000 f8ed 	bl	8004796 <xTaskCreateStatic>
 80045bc:	4603      	mov	r3, r0
 80045be:	60fb      	str	r3, [r7, #12]
 80045c0:	e01c      	b.n	80045fc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685c      	ldr	r4, [r3, #4]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045ce:	b29e      	uxth	r6, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7ff ffaa 	bl	8004530 <makeFreeRtosPriority>
 80045dc:	4602      	mov	r2, r0
 80045de:	f107 030c 	add.w	r3, r7, #12
 80045e2:	9301      	str	r3, [sp, #4]
 80045e4:	9200      	str	r2, [sp, #0]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	4632      	mov	r2, r6
 80045ea:	4629      	mov	r1, r5
 80045ec:	4620      	mov	r0, r4
 80045ee:	f000 f932 	bl	8004856 <xTaskCreate>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d001      	beq.n	80045fc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80045f8:	2300      	movs	r3, #0
 80045fa:	e000      	b.n	80045fe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80045fc:	68fb      	ldr	r3, [r7, #12]
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3714      	adds	r7, #20
 8004602:	46bd      	mov	sp, r7
 8004604:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004606 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b084      	sub	sp, #16
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d001      	beq.n	800461c <osDelay+0x16>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	e000      	b.n	800461e <osDelay+0x18>
 800461c:	2301      	movs	r3, #1
 800461e:	4618      	mov	r0, r3
 8004620:	f000 fa5c 	bl	8004adc <vTaskDelay>
  
  return osOK;
 8004624:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800462e:	b480      	push	{r7}
 8004630:	b083      	sub	sp, #12
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f103 0208 	add.w	r2, r3, #8
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f04f 32ff 	mov.w	r2, #4294967295
 8004646:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f103 0208 	add.w	r2, r3, #8
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f103 0208 	add.w	r2, r3, #8
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004662:	bf00      	nop
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	689a      	ldr	r2, [r3, #8]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	1c5a      	adds	r2, r3, #1
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	601a      	str	r2, [r3, #0]
}
 80046c4:	bf00      	nop
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e6:	d103      	bne.n	80046f0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	60fb      	str	r3, [r7, #12]
 80046ee:	e00c      	b.n	800470a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3308      	adds	r3, #8
 80046f4:	60fb      	str	r3, [r7, #12]
 80046f6:	e002      	b.n	80046fe <vListInsert+0x2e>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	60fb      	str	r3, [r7, #12]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	429a      	cmp	r2, r3
 8004708:	d2f6      	bcs.n	80046f8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	683a      	ldr	r2, [r7, #0]
 8004718:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	683a      	ldr	r2, [r7, #0]
 8004724:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	1c5a      	adds	r2, r3, #1
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	601a      	str	r2, [r3, #0]
}
 8004736:	bf00      	nop
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004742:	b480      	push	{r7}
 8004744:	b085      	sub	sp, #20
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	6892      	ldr	r2, [r2, #8]
 8004758:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	6852      	ldr	r2, [r2, #4]
 8004762:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	429a      	cmp	r2, r3
 800476c:	d103      	bne.n	8004776 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689a      	ldr	r2, [r3, #8]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	1e5a      	subs	r2, r3, #1
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
}
 800478a:	4618      	mov	r0, r3
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004796:	b580      	push	{r7, lr}
 8004798:	b08e      	sub	sp, #56	; 0x38
 800479a:	af04      	add	r7, sp, #16
 800479c:	60f8      	str	r0, [r7, #12]
 800479e:	60b9      	str	r1, [r7, #8]
 80047a0:	607a      	str	r2, [r7, #4]
 80047a2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80047a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10b      	bne.n	80047c2 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80047aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ae:	b672      	cpsid	i
 80047b0:	f383 8811 	msr	BASEPRI, r3
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	b662      	cpsie	i
 80047be:	623b      	str	r3, [r7, #32]
 80047c0:	e7fe      	b.n	80047c0 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 80047c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10b      	bne.n	80047e0 <xTaskCreateStatic+0x4a>
 80047c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047cc:	b672      	cpsid	i
 80047ce:	f383 8811 	msr	BASEPRI, r3
 80047d2:	f3bf 8f6f 	isb	sy
 80047d6:	f3bf 8f4f 	dsb	sy
 80047da:	b662      	cpsie	i
 80047dc:	61fb      	str	r3, [r7, #28]
 80047de:	e7fe      	b.n	80047de <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80047e0:	2358      	movs	r3, #88	; 0x58
 80047e2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	2b58      	cmp	r3, #88	; 0x58
 80047e8:	d00b      	beq.n	8004802 <xTaskCreateStatic+0x6c>
 80047ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ee:	b672      	cpsid	i
 80047f0:	f383 8811 	msr	BASEPRI, r3
 80047f4:	f3bf 8f6f 	isb	sy
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	b662      	cpsie	i
 80047fe:	61bb      	str	r3, [r7, #24]
 8004800:	e7fe      	b.n	8004800 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004802:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004806:	2b00      	cmp	r3, #0
 8004808:	d01e      	beq.n	8004848 <xTaskCreateStatic+0xb2>
 800480a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800480c:	2b00      	cmp	r3, #0
 800480e:	d01b      	beq.n	8004848 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004812:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004818:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481c:	2202      	movs	r2, #2
 800481e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004822:	2300      	movs	r3, #0
 8004824:	9303      	str	r3, [sp, #12]
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	9302      	str	r3, [sp, #8]
 800482a:	f107 0314 	add.w	r3, r7, #20
 800482e:	9301      	str	r3, [sp, #4]
 8004830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	68b9      	ldr	r1, [r7, #8]
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f000 f850 	bl	80048e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004840:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004842:	f000 f8e1 	bl	8004a08 <prvAddNewTaskToReadyList>
 8004846:	e001      	b.n	800484c <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004848:	2300      	movs	r3, #0
 800484a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800484c:	697b      	ldr	r3, [r7, #20]
	}
 800484e:	4618      	mov	r0, r3
 8004850:	3728      	adds	r7, #40	; 0x28
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004856:	b580      	push	{r7, lr}
 8004858:	b08c      	sub	sp, #48	; 0x30
 800485a:	af04      	add	r7, sp, #16
 800485c:	60f8      	str	r0, [r7, #12]
 800485e:	60b9      	str	r1, [r7, #8]
 8004860:	603b      	str	r3, [r7, #0]
 8004862:	4613      	mov	r3, r2
 8004864:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004866:	88fb      	ldrh	r3, [r7, #6]
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4618      	mov	r0, r3
 800486c:	f000 fedc 	bl	8005628 <pvPortMalloc>
 8004870:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00e      	beq.n	8004896 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004878:	2058      	movs	r0, #88	; 0x58
 800487a:	f000 fed5 	bl	8005628 <pvPortMalloc>
 800487e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	631a      	str	r2, [r3, #48]	; 0x30
 800488c:	e005      	b.n	800489a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800488e:	6978      	ldr	r0, [r7, #20]
 8004890:	f000 ff96 	bl	80057c0 <vPortFree>
 8004894:	e001      	b.n	800489a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004896:	2300      	movs	r3, #0
 8004898:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d017      	beq.n	80048d0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80048a8:	88fa      	ldrh	r2, [r7, #6]
 80048aa:	2300      	movs	r3, #0
 80048ac:	9303      	str	r3, [sp, #12]
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	9302      	str	r3, [sp, #8]
 80048b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b4:	9301      	str	r3, [sp, #4]
 80048b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	68b9      	ldr	r1, [r7, #8]
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f000 f80e 	bl	80048e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048c4:	69f8      	ldr	r0, [r7, #28]
 80048c6:	f000 f89f 	bl	8004a08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80048ca:	2301      	movs	r3, #1
 80048cc:	61bb      	str	r3, [r7, #24]
 80048ce:	e002      	b.n	80048d6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80048d0:	f04f 33ff 	mov.w	r3, #4294967295
 80048d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80048d6:	69bb      	ldr	r3, [r7, #24]
	}
 80048d8:	4618      	mov	r0, r3
 80048da:	3720      	adds	r7, #32
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b088      	sub	sp, #32
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
 80048ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80048ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	461a      	mov	r2, r3
 80048f8:	21a5      	movs	r1, #165	; 0xa5
 80048fa:	f001 f8a3 	bl	8005a44 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80048fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004902:	6879      	ldr	r1, [r7, #4]
 8004904:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004908:	440b      	add	r3, r1
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4413      	add	r3, r2
 800490e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	f023 0307 	bic.w	r3, r3, #7
 8004916:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	f003 0307 	and.w	r3, r3, #7
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00b      	beq.n	800493a <prvInitialiseNewTask+0x5a>
 8004922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004926:	b672      	cpsid	i
 8004928:	f383 8811 	msr	BASEPRI, r3
 800492c:	f3bf 8f6f 	isb	sy
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	b662      	cpsie	i
 8004936:	617b      	str	r3, [r7, #20]
 8004938:	e7fe      	b.n	8004938 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d01f      	beq.n	8004980 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004940:	2300      	movs	r3, #0
 8004942:	61fb      	str	r3, [r7, #28]
 8004944:	e012      	b.n	800496c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	4413      	add	r3, r2
 800494c:	7819      	ldrb	r1, [r3, #0]
 800494e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	4413      	add	r3, r2
 8004954:	3334      	adds	r3, #52	; 0x34
 8004956:	460a      	mov	r2, r1
 8004958:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	4413      	add	r3, r2
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d006      	beq.n	8004974 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	3301      	adds	r3, #1
 800496a:	61fb      	str	r3, [r7, #28]
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	2b0f      	cmp	r3, #15
 8004970:	d9e9      	bls.n	8004946 <prvInitialiseNewTask+0x66>
 8004972:	e000      	b.n	8004976 <prvInitialiseNewTask+0x96>
			{
				break;
 8004974:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800497e:	e003      	b.n	8004988 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004982:	2200      	movs	r2, #0
 8004984:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498a:	2b06      	cmp	r3, #6
 800498c:	d901      	bls.n	8004992 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800498e:	2306      	movs	r3, #6
 8004990:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004994:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004996:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800499c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800499e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a0:	2200      	movs	r2, #0
 80049a2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80049a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a6:	3304      	adds	r3, #4
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7ff fe60 	bl	800466e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80049ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b0:	3318      	adds	r3, #24
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7ff fe5b 	bl	800466e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80049b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049bc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c0:	f1c3 0207 	rsb	r2, r3, #7
 80049c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80049c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049cc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 80049ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d0:	2200      	movs	r2, #0
 80049d2:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80049d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d6:	2200      	movs	r2, #0
 80049d8:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80049da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	68f9      	ldr	r1, [r7, #12]
 80049e6:	69b8      	ldr	r0, [r7, #24]
 80049e8:	f000 fc34 	bl	8005254 <pxPortInitialiseStack>
 80049ec:	4602      	mov	r2, r0
 80049ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80049f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d002      	beq.n	80049fe <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80049f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049fe:	bf00      	nop
 8004a00:	3720      	adds	r7, #32
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
	...

08004a08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004a10:	f000 fd2a 	bl	8005468 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a14:	4b2a      	ldr	r3, [pc, #168]	; (8004ac0 <prvAddNewTaskToReadyList+0xb8>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	4a29      	ldr	r2, [pc, #164]	; (8004ac0 <prvAddNewTaskToReadyList+0xb8>)
 8004a1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004a1e:	4b29      	ldr	r3, [pc, #164]	; (8004ac4 <prvAddNewTaskToReadyList+0xbc>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d109      	bne.n	8004a3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a26:	4a27      	ldr	r2, [pc, #156]	; (8004ac4 <prvAddNewTaskToReadyList+0xbc>)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a2c:	4b24      	ldr	r3, [pc, #144]	; (8004ac0 <prvAddNewTaskToReadyList+0xb8>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d110      	bne.n	8004a56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004a34:	f000 faec 	bl	8005010 <prvInitialiseTaskLists>
 8004a38:	e00d      	b.n	8004a56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004a3a:	4b23      	ldr	r3, [pc, #140]	; (8004ac8 <prvAddNewTaskToReadyList+0xc0>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d109      	bne.n	8004a56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a42:	4b20      	ldr	r3, [pc, #128]	; (8004ac4 <prvAddNewTaskToReadyList+0xbc>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d802      	bhi.n	8004a56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004a50:	4a1c      	ldr	r2, [pc, #112]	; (8004ac4 <prvAddNewTaskToReadyList+0xbc>)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004a56:	4b1d      	ldr	r3, [pc, #116]	; (8004acc <prvAddNewTaskToReadyList+0xc4>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	4a1b      	ldr	r2, [pc, #108]	; (8004acc <prvAddNewTaskToReadyList+0xc4>)
 8004a5e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a64:	2201      	movs	r2, #1
 8004a66:	409a      	lsls	r2, r3
 8004a68:	4b19      	ldr	r3, [pc, #100]	; (8004ad0 <prvAddNewTaskToReadyList+0xc8>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	4a18      	ldr	r2, [pc, #96]	; (8004ad0 <prvAddNewTaskToReadyList+0xc8>)
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a76:	4613      	mov	r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4413      	add	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4a15      	ldr	r2, [pc, #84]	; (8004ad4 <prvAddNewTaskToReadyList+0xcc>)
 8004a80:	441a      	add	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	3304      	adds	r3, #4
 8004a86:	4619      	mov	r1, r3
 8004a88:	4610      	mov	r0, r2
 8004a8a:	f7ff fdfd 	bl	8004688 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004a8e:	f000 fd1d 	bl	80054cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004a92:	4b0d      	ldr	r3, [pc, #52]	; (8004ac8 <prvAddNewTaskToReadyList+0xc0>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00e      	beq.n	8004ab8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a9a:	4b0a      	ldr	r3, [pc, #40]	; (8004ac4 <prvAddNewTaskToReadyList+0xbc>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d207      	bcs.n	8004ab8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004aa8:	4b0b      	ldr	r3, [pc, #44]	; (8004ad8 <prvAddNewTaskToReadyList+0xd0>)
 8004aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	f3bf 8f4f 	dsb	sy
 8004ab4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ab8:	bf00      	nop
 8004aba:	3708      	adds	r7, #8
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	200004e0 	.word	0x200004e0
 8004ac4:	200003e0 	.word	0x200003e0
 8004ac8:	200004ec 	.word	0x200004ec
 8004acc:	200004fc 	.word	0x200004fc
 8004ad0:	200004e8 	.word	0x200004e8
 8004ad4:	200003e4 	.word	0x200003e4
 8004ad8:	e000ed04 	.word	0xe000ed04

08004adc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d018      	beq.n	8004b20 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004aee:	4b14      	ldr	r3, [pc, #80]	; (8004b40 <vTaskDelay+0x64>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00b      	beq.n	8004b0e <vTaskDelay+0x32>
 8004af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afa:	b672      	cpsid	i
 8004afc:	f383 8811 	msr	BASEPRI, r3
 8004b00:	f3bf 8f6f 	isb	sy
 8004b04:	f3bf 8f4f 	dsb	sy
 8004b08:	b662      	cpsie	i
 8004b0a:	60bb      	str	r3, [r7, #8]
 8004b0c:	e7fe      	b.n	8004b0c <vTaskDelay+0x30>
			vTaskSuspendAll();
 8004b0e:	f000 f87d 	bl	8004c0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004b12:	2100      	movs	r1, #0
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 fb37 	bl	8005188 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004b1a:	f000 f885 	bl	8004c28 <xTaskResumeAll>
 8004b1e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d107      	bne.n	8004b36 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004b26:	4b07      	ldr	r3, [pc, #28]	; (8004b44 <vTaskDelay+0x68>)
 8004b28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	f3bf 8f4f 	dsb	sy
 8004b32:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b36:	bf00      	nop
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	20000508 	.word	0x20000508
 8004b44:	e000ed04 	.word	0xe000ed04

08004b48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b08a      	sub	sp, #40	; 0x28
 8004b4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004b52:	2300      	movs	r3, #0
 8004b54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004b56:	463a      	mov	r2, r7
 8004b58:	1d39      	adds	r1, r7, #4
 8004b5a:	f107 0308 	add.w	r3, r7, #8
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7fb fcf0 	bl	8000544 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004b64:	6839      	ldr	r1, [r7, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	9202      	str	r2, [sp, #8]
 8004b6c:	9301      	str	r3, [sp, #4]
 8004b6e:	2300      	movs	r3, #0
 8004b70:	9300      	str	r3, [sp, #0]
 8004b72:	2300      	movs	r3, #0
 8004b74:	460a      	mov	r2, r1
 8004b76:	491f      	ldr	r1, [pc, #124]	; (8004bf4 <vTaskStartScheduler+0xac>)
 8004b78:	481f      	ldr	r0, [pc, #124]	; (8004bf8 <vTaskStartScheduler+0xb0>)
 8004b7a:	f7ff fe0c 	bl	8004796 <xTaskCreateStatic>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	4b1e      	ldr	r3, [pc, #120]	; (8004bfc <vTaskStartScheduler+0xb4>)
 8004b82:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004b84:	4b1d      	ldr	r3, [pc, #116]	; (8004bfc <vTaskStartScheduler+0xb4>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d002      	beq.n	8004b92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	617b      	str	r3, [r7, #20]
 8004b90:	e001      	b.n	8004b96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004b92:	2300      	movs	r3, #0
 8004b94:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d117      	bne.n	8004bcc <vTaskStartScheduler+0x84>
 8004b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba0:	b672      	cpsid	i
 8004ba2:	f383 8811 	msr	BASEPRI, r3
 8004ba6:	f3bf 8f6f 	isb	sy
 8004baa:	f3bf 8f4f 	dsb	sy
 8004bae:	b662      	cpsie	i
 8004bb0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004bb2:	4b13      	ldr	r3, [pc, #76]	; (8004c00 <vTaskStartScheduler+0xb8>)
 8004bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8004bb8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004bba:	4b12      	ldr	r3, [pc, #72]	; (8004c04 <vTaskStartScheduler+0xbc>)
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004bc0:	4b11      	ldr	r3, [pc, #68]	; (8004c08 <vTaskStartScheduler+0xc0>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004bc6:	f000 fbd3 	bl	8005370 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004bca:	e00f      	b.n	8004bec <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd2:	d10b      	bne.n	8004bec <vTaskStartScheduler+0xa4>
 8004bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd8:	b672      	cpsid	i
 8004bda:	f383 8811 	msr	BASEPRI, r3
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f3bf 8f4f 	dsb	sy
 8004be6:	b662      	cpsie	i
 8004be8:	60fb      	str	r3, [r7, #12]
 8004bea:	e7fe      	b.n	8004bea <vTaskStartScheduler+0xa2>
}
 8004bec:	bf00      	nop
 8004bee:	3718      	adds	r7, #24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	08006520 	.word	0x08006520
 8004bf8:	08004fdd 	.word	0x08004fdd
 8004bfc:	20000504 	.word	0x20000504
 8004c00:	20000500 	.word	0x20000500
 8004c04:	200004ec 	.word	0x200004ec
 8004c08:	200004e4 	.word	0x200004e4

08004c0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004c10:	4b04      	ldr	r3, [pc, #16]	; (8004c24 <vTaskSuspendAll+0x18>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	3301      	adds	r3, #1
 8004c16:	4a03      	ldr	r2, [pc, #12]	; (8004c24 <vTaskSuspendAll+0x18>)
 8004c18:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004c1a:	bf00      	nop
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr
 8004c24:	20000508 	.word	0x20000508

08004c28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004c32:	2300      	movs	r3, #0
 8004c34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004c36:	4b42      	ldr	r3, [pc, #264]	; (8004d40 <xTaskResumeAll+0x118>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10b      	bne.n	8004c56 <xTaskResumeAll+0x2e>
 8004c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c42:	b672      	cpsid	i
 8004c44:	f383 8811 	msr	BASEPRI, r3
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	b662      	cpsie	i
 8004c52:	603b      	str	r3, [r7, #0]
 8004c54:	e7fe      	b.n	8004c54 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004c56:	f000 fc07 	bl	8005468 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004c5a:	4b39      	ldr	r3, [pc, #228]	; (8004d40 <xTaskResumeAll+0x118>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	4a37      	ldr	r2, [pc, #220]	; (8004d40 <xTaskResumeAll+0x118>)
 8004c62:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c64:	4b36      	ldr	r3, [pc, #216]	; (8004d40 <xTaskResumeAll+0x118>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d161      	bne.n	8004d30 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004c6c:	4b35      	ldr	r3, [pc, #212]	; (8004d44 <xTaskResumeAll+0x11c>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d05d      	beq.n	8004d30 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c74:	e02e      	b.n	8004cd4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c76:	4b34      	ldr	r3, [pc, #208]	; (8004d48 <xTaskResumeAll+0x120>)
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	3318      	adds	r3, #24
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7ff fd5d 	bl	8004742 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	3304      	adds	r3, #4
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7ff fd58 	bl	8004742 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c96:	2201      	movs	r2, #1
 8004c98:	409a      	lsls	r2, r3
 8004c9a:	4b2c      	ldr	r3, [pc, #176]	; (8004d4c <xTaskResumeAll+0x124>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	4a2a      	ldr	r2, [pc, #168]	; (8004d4c <xTaskResumeAll+0x124>)
 8004ca2:	6013      	str	r3, [r2, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca8:	4613      	mov	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4413      	add	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4a27      	ldr	r2, [pc, #156]	; (8004d50 <xTaskResumeAll+0x128>)
 8004cb2:	441a      	add	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	3304      	adds	r3, #4
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4610      	mov	r0, r2
 8004cbc:	f7ff fce4 	bl	8004688 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc4:	4b23      	ldr	r3, [pc, #140]	; (8004d54 <xTaskResumeAll+0x12c>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d302      	bcc.n	8004cd4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004cce:	4b22      	ldr	r3, [pc, #136]	; (8004d58 <xTaskResumeAll+0x130>)
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004cd4:	4b1c      	ldr	r3, [pc, #112]	; (8004d48 <xTaskResumeAll+0x120>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1cc      	bne.n	8004c76 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ce2:	f000 fa31 	bl	8005148 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004ce6:	4b1d      	ldr	r3, [pc, #116]	; (8004d5c <xTaskResumeAll+0x134>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d010      	beq.n	8004d14 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004cf2:	f000 f837 	bl	8004d64 <xTaskIncrementTick>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d002      	beq.n	8004d02 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004cfc:	4b16      	ldr	r3, [pc, #88]	; (8004d58 <xTaskResumeAll+0x130>)
 8004cfe:	2201      	movs	r2, #1
 8004d00:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	3b01      	subs	r3, #1
 8004d06:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1f1      	bne.n	8004cf2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8004d0e:	4b13      	ldr	r3, [pc, #76]	; (8004d5c <xTaskResumeAll+0x134>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004d14:	4b10      	ldr	r3, [pc, #64]	; (8004d58 <xTaskResumeAll+0x130>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d009      	beq.n	8004d30 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004d20:	4b0f      	ldr	r3, [pc, #60]	; (8004d60 <xTaskResumeAll+0x138>)
 8004d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	f3bf 8f4f 	dsb	sy
 8004d2c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d30:	f000 fbcc 	bl	80054cc <vPortExitCritical>

	return xAlreadyYielded;
 8004d34:	68bb      	ldr	r3, [r7, #8]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	20000508 	.word	0x20000508
 8004d44:	200004e0 	.word	0x200004e0
 8004d48:	200004a0 	.word	0x200004a0
 8004d4c:	200004e8 	.word	0x200004e8
 8004d50:	200003e4 	.word	0x200003e4
 8004d54:	200003e0 	.word	0x200003e0
 8004d58:	200004f4 	.word	0x200004f4
 8004d5c:	200004f0 	.word	0x200004f0
 8004d60:	e000ed04 	.word	0xe000ed04

08004d64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d6e:	4b4f      	ldr	r3, [pc, #316]	; (8004eac <xTaskIncrementTick+0x148>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f040 8089 	bne.w	8004e8a <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d78:	4b4d      	ldr	r3, [pc, #308]	; (8004eb0 <xTaskIncrementTick+0x14c>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004d80:	4a4b      	ldr	r2, [pc, #300]	; (8004eb0 <xTaskIncrementTick+0x14c>)
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d121      	bne.n	8004dd0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d8c:	4b49      	ldr	r3, [pc, #292]	; (8004eb4 <xTaskIncrementTick+0x150>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00b      	beq.n	8004dae <xTaskIncrementTick+0x4a>
 8004d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9a:	b672      	cpsid	i
 8004d9c:	f383 8811 	msr	BASEPRI, r3
 8004da0:	f3bf 8f6f 	isb	sy
 8004da4:	f3bf 8f4f 	dsb	sy
 8004da8:	b662      	cpsie	i
 8004daa:	603b      	str	r3, [r7, #0]
 8004dac:	e7fe      	b.n	8004dac <xTaskIncrementTick+0x48>
 8004dae:	4b41      	ldr	r3, [pc, #260]	; (8004eb4 <xTaskIncrementTick+0x150>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	60fb      	str	r3, [r7, #12]
 8004db4:	4b40      	ldr	r3, [pc, #256]	; (8004eb8 <xTaskIncrementTick+0x154>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a3e      	ldr	r2, [pc, #248]	; (8004eb4 <xTaskIncrementTick+0x150>)
 8004dba:	6013      	str	r3, [r2, #0]
 8004dbc:	4a3e      	ldr	r2, [pc, #248]	; (8004eb8 <xTaskIncrementTick+0x154>)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6013      	str	r3, [r2, #0]
 8004dc2:	4b3e      	ldr	r3, [pc, #248]	; (8004ebc <xTaskIncrementTick+0x158>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	4a3c      	ldr	r2, [pc, #240]	; (8004ebc <xTaskIncrementTick+0x158>)
 8004dca:	6013      	str	r3, [r2, #0]
 8004dcc:	f000 f9bc 	bl	8005148 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004dd0:	4b3b      	ldr	r3, [pc, #236]	; (8004ec0 <xTaskIncrementTick+0x15c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d348      	bcc.n	8004e6c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dda:	4b36      	ldr	r3, [pc, #216]	; (8004eb4 <xTaskIncrementTick+0x150>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d104      	bne.n	8004dee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004de4:	4b36      	ldr	r3, [pc, #216]	; (8004ec0 <xTaskIncrementTick+0x15c>)
 8004de6:	f04f 32ff 	mov.w	r2, #4294967295
 8004dea:	601a      	str	r2, [r3, #0]
					break;
 8004dec:	e03e      	b.n	8004e6c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dee:	4b31      	ldr	r3, [pc, #196]	; (8004eb4 <xTaskIncrementTick+0x150>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d203      	bcs.n	8004e0e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004e06:	4a2e      	ldr	r2, [pc, #184]	; (8004ec0 <xTaskIncrementTick+0x15c>)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004e0c:	e02e      	b.n	8004e6c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	3304      	adds	r3, #4
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7ff fc95 	bl	8004742 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d004      	beq.n	8004e2a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	3318      	adds	r3, #24
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7ff fc8c 	bl	8004742 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2e:	2201      	movs	r2, #1
 8004e30:	409a      	lsls	r2, r3
 8004e32:	4b24      	ldr	r3, [pc, #144]	; (8004ec4 <xTaskIncrementTick+0x160>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	4a22      	ldr	r2, [pc, #136]	; (8004ec4 <xTaskIncrementTick+0x160>)
 8004e3a:	6013      	str	r3, [r2, #0]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e40:	4613      	mov	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4a1f      	ldr	r2, [pc, #124]	; (8004ec8 <xTaskIncrementTick+0x164>)
 8004e4a:	441a      	add	r2, r3
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	3304      	adds	r3, #4
 8004e50:	4619      	mov	r1, r3
 8004e52:	4610      	mov	r0, r2
 8004e54:	f7ff fc18 	bl	8004688 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e5c:	4b1b      	ldr	r3, [pc, #108]	; (8004ecc <xTaskIncrementTick+0x168>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d3b9      	bcc.n	8004dda <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004e66:	2301      	movs	r3, #1
 8004e68:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e6a:	e7b6      	b.n	8004dda <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e6c:	4b17      	ldr	r3, [pc, #92]	; (8004ecc <xTaskIncrementTick+0x168>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e72:	4915      	ldr	r1, [pc, #84]	; (8004ec8 <xTaskIncrementTick+0x164>)
 8004e74:	4613      	mov	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	440b      	add	r3, r1
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d907      	bls.n	8004e94 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8004e84:	2301      	movs	r3, #1
 8004e86:	617b      	str	r3, [r7, #20]
 8004e88:	e004      	b.n	8004e94 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004e8a:	4b11      	ldr	r3, [pc, #68]	; (8004ed0 <xTaskIncrementTick+0x16c>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	4a0f      	ldr	r2, [pc, #60]	; (8004ed0 <xTaskIncrementTick+0x16c>)
 8004e92:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004e94:	4b0f      	ldr	r3, [pc, #60]	; (8004ed4 <xTaskIncrementTick+0x170>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d001      	beq.n	8004ea0 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004ea0:	697b      	ldr	r3, [r7, #20]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3718      	adds	r7, #24
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	20000508 	.word	0x20000508
 8004eb0:	200004e4 	.word	0x200004e4
 8004eb4:	20000498 	.word	0x20000498
 8004eb8:	2000049c 	.word	0x2000049c
 8004ebc:	200004f8 	.word	0x200004f8
 8004ec0:	20000500 	.word	0x20000500
 8004ec4:	200004e8 	.word	0x200004e8
 8004ec8:	200003e4 	.word	0x200003e4
 8004ecc:	200003e0 	.word	0x200003e0
 8004ed0:	200004f0 	.word	0x200004f0
 8004ed4:	200004f4 	.word	0x200004f4

08004ed8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b088      	sub	sp, #32
 8004edc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ede:	4b3a      	ldr	r3, [pc, #232]	; (8004fc8 <vTaskSwitchContext+0xf0>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004ee6:	4b39      	ldr	r3, [pc, #228]	; (8004fcc <vTaskSwitchContext+0xf4>)
 8004ee8:	2201      	movs	r2, #1
 8004eea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004eec:	e067      	b.n	8004fbe <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 8004eee:	4b37      	ldr	r3, [pc, #220]	; (8004fcc <vTaskSwitchContext+0xf4>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8004ef4:	4b36      	ldr	r3, [pc, #216]	; (8004fd0 <vTaskSwitchContext+0xf8>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efa:	61fb      	str	r3, [r7, #28]
 8004efc:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8004f00:	61bb      	str	r3, [r7, #24]
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	69ba      	ldr	r2, [r7, #24]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d111      	bne.n	8004f30 <vTaskSwitchContext+0x58>
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	3304      	adds	r3, #4
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d10b      	bne.n	8004f30 <vTaskSwitchContext+0x58>
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	3308      	adds	r3, #8
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	69ba      	ldr	r2, [r7, #24]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d105      	bne.n	8004f30 <vTaskSwitchContext+0x58>
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	330c      	adds	r3, #12
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d008      	beq.n	8004f42 <vTaskSwitchContext+0x6a>
 8004f30:	4b27      	ldr	r3, [pc, #156]	; (8004fd0 <vTaskSwitchContext+0xf8>)
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	4b26      	ldr	r3, [pc, #152]	; (8004fd0 <vTaskSwitchContext+0xf8>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	3334      	adds	r3, #52	; 0x34
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	4610      	mov	r0, r2
 8004f3e:	f7fb faee 	bl	800051e <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f42:	4b24      	ldr	r3, [pc, #144]	; (8004fd4 <vTaskSwitchContext+0xfc>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	fab3 f383 	clz	r3, r3
 8004f4e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004f50:	7afb      	ldrb	r3, [r7, #11]
 8004f52:	f1c3 031f 	rsb	r3, r3, #31
 8004f56:	617b      	str	r3, [r7, #20]
 8004f58:	491f      	ldr	r1, [pc, #124]	; (8004fd8 <vTaskSwitchContext+0x100>)
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	440b      	add	r3, r1
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10b      	bne.n	8004f84 <vTaskSwitchContext+0xac>
	__asm volatile
 8004f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f70:	b672      	cpsid	i
 8004f72:	f383 8811 	msr	BASEPRI, r3
 8004f76:	f3bf 8f6f 	isb	sy
 8004f7a:	f3bf 8f4f 	dsb	sy
 8004f7e:	b662      	cpsie	i
 8004f80:	607b      	str	r3, [r7, #4]
 8004f82:	e7fe      	b.n	8004f82 <vTaskSwitchContext+0xaa>
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	4613      	mov	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4a12      	ldr	r2, [pc, #72]	; (8004fd8 <vTaskSwitchContext+0x100>)
 8004f90:	4413      	add	r3, r2
 8004f92:	613b      	str	r3, [r7, #16]
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	605a      	str	r2, [r3, #4]
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	3308      	adds	r3, #8
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d104      	bne.n	8004fb4 <vTaskSwitchContext+0xdc>
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	605a      	str	r2, [r3, #4]
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	4a05      	ldr	r2, [pc, #20]	; (8004fd0 <vTaskSwitchContext+0xf8>)
 8004fbc:	6013      	str	r3, [r2, #0]
}
 8004fbe:	bf00      	nop
 8004fc0:	3720      	adds	r7, #32
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20000508 	.word	0x20000508
 8004fcc:	200004f4 	.word	0x200004f4
 8004fd0:	200003e0 	.word	0x200003e0
 8004fd4:	200004e8 	.word	0x200004e8
 8004fd8:	200003e4 	.word	0x200003e4

08004fdc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004fe4:	f000 f854 	bl	8005090 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004fe8:	4b07      	ldr	r3, [pc, #28]	; (8005008 <prvIdleTask+0x2c>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d907      	bls.n	8005000 <prvIdleTask+0x24>
			{
				taskYIELD();
 8004ff0:	4b06      	ldr	r3, [pc, #24]	; (800500c <prvIdleTask+0x30>)
 8004ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ff6:	601a      	str	r2, [r3, #0]
 8004ff8:	f3bf 8f4f 	dsb	sy
 8004ffc:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8005000:	f7fb fa86 	bl	8000510 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8005004:	e7ee      	b.n	8004fe4 <prvIdleTask+0x8>
 8005006:	bf00      	nop
 8005008:	200003e4 	.word	0x200003e4
 800500c:	e000ed04 	.word	0xe000ed04

08005010 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005016:	2300      	movs	r3, #0
 8005018:	607b      	str	r3, [r7, #4]
 800501a:	e00c      	b.n	8005036 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	4613      	mov	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4413      	add	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4a12      	ldr	r2, [pc, #72]	; (8005070 <prvInitialiseTaskLists+0x60>)
 8005028:	4413      	add	r3, r2
 800502a:	4618      	mov	r0, r3
 800502c:	f7ff faff 	bl	800462e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	3301      	adds	r3, #1
 8005034:	607b      	str	r3, [r7, #4]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b06      	cmp	r3, #6
 800503a:	d9ef      	bls.n	800501c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800503c:	480d      	ldr	r0, [pc, #52]	; (8005074 <prvInitialiseTaskLists+0x64>)
 800503e:	f7ff faf6 	bl	800462e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005042:	480d      	ldr	r0, [pc, #52]	; (8005078 <prvInitialiseTaskLists+0x68>)
 8005044:	f7ff faf3 	bl	800462e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005048:	480c      	ldr	r0, [pc, #48]	; (800507c <prvInitialiseTaskLists+0x6c>)
 800504a:	f7ff faf0 	bl	800462e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800504e:	480c      	ldr	r0, [pc, #48]	; (8005080 <prvInitialiseTaskLists+0x70>)
 8005050:	f7ff faed 	bl	800462e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005054:	480b      	ldr	r0, [pc, #44]	; (8005084 <prvInitialiseTaskLists+0x74>)
 8005056:	f7ff faea 	bl	800462e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800505a:	4b0b      	ldr	r3, [pc, #44]	; (8005088 <prvInitialiseTaskLists+0x78>)
 800505c:	4a05      	ldr	r2, [pc, #20]	; (8005074 <prvInitialiseTaskLists+0x64>)
 800505e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005060:	4b0a      	ldr	r3, [pc, #40]	; (800508c <prvInitialiseTaskLists+0x7c>)
 8005062:	4a05      	ldr	r2, [pc, #20]	; (8005078 <prvInitialiseTaskLists+0x68>)
 8005064:	601a      	str	r2, [r3, #0]
}
 8005066:	bf00      	nop
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	200003e4 	.word	0x200003e4
 8005074:	20000470 	.word	0x20000470
 8005078:	20000484 	.word	0x20000484
 800507c:	200004a0 	.word	0x200004a0
 8005080:	200004b4 	.word	0x200004b4
 8005084:	200004cc 	.word	0x200004cc
 8005088:	20000498 	.word	0x20000498
 800508c:	2000049c 	.word	0x2000049c

08005090 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005096:	e019      	b.n	80050cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005098:	f000 f9e6 	bl	8005468 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800509c:	4b0f      	ldr	r3, [pc, #60]	; (80050dc <prvCheckTasksWaitingTermination+0x4c>)
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	3304      	adds	r3, #4
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7ff fb4a 	bl	8004742 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80050ae:	4b0c      	ldr	r3, [pc, #48]	; (80050e0 <prvCheckTasksWaitingTermination+0x50>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	3b01      	subs	r3, #1
 80050b4:	4a0a      	ldr	r2, [pc, #40]	; (80050e0 <prvCheckTasksWaitingTermination+0x50>)
 80050b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80050b8:	4b0a      	ldr	r3, [pc, #40]	; (80050e4 <prvCheckTasksWaitingTermination+0x54>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3b01      	subs	r3, #1
 80050be:	4a09      	ldr	r2, [pc, #36]	; (80050e4 <prvCheckTasksWaitingTermination+0x54>)
 80050c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80050c2:	f000 fa03 	bl	80054cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f80e 	bl	80050e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050cc:	4b05      	ldr	r3, [pc, #20]	; (80050e4 <prvCheckTasksWaitingTermination+0x54>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1e1      	bne.n	8005098 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80050d4:	bf00      	nop
 80050d6:	3708      	adds	r7, #8
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	200004b4 	.word	0x200004b4
 80050e0:	200004e0 	.word	0x200004e0
 80050e4:	200004c8 	.word	0x200004c8

080050e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d108      	bne.n	800510c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 fb5e 	bl	80057c0 <vPortFree>
				vPortFree( pxTCB );
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 fb5b 	bl	80057c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800510a:	e019      	b.n	8005140 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005112:	2b01      	cmp	r3, #1
 8005114:	d103      	bne.n	800511e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 fb52 	bl	80057c0 <vPortFree>
	}
 800511c:	e010      	b.n	8005140 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005124:	2b02      	cmp	r3, #2
 8005126:	d00b      	beq.n	8005140 <prvDeleteTCB+0x58>
 8005128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512c:	b672      	cpsid	i
 800512e:	f383 8811 	msr	BASEPRI, r3
 8005132:	f3bf 8f6f 	isb	sy
 8005136:	f3bf 8f4f 	dsb	sy
 800513a:	b662      	cpsie	i
 800513c:	60fb      	str	r3, [r7, #12]
 800513e:	e7fe      	b.n	800513e <prvDeleteTCB+0x56>
	}
 8005140:	bf00      	nop
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800514e:	4b0c      	ldr	r3, [pc, #48]	; (8005180 <prvResetNextTaskUnblockTime+0x38>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d104      	bne.n	8005162 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005158:	4b0a      	ldr	r3, [pc, #40]	; (8005184 <prvResetNextTaskUnblockTime+0x3c>)
 800515a:	f04f 32ff 	mov.w	r2, #4294967295
 800515e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005160:	e008      	b.n	8005174 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005162:	4b07      	ldr	r3, [pc, #28]	; (8005180 <prvResetNextTaskUnblockTime+0x38>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	4a04      	ldr	r2, [pc, #16]	; (8005184 <prvResetNextTaskUnblockTime+0x3c>)
 8005172:	6013      	str	r3, [r2, #0]
}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	20000498 	.word	0x20000498
 8005184:	20000500 	.word	0x20000500

08005188 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005192:	4b29      	ldr	r3, [pc, #164]	; (8005238 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005198:	4b28      	ldr	r3, [pc, #160]	; (800523c <prvAddCurrentTaskToDelayedList+0xb4>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3304      	adds	r3, #4
 800519e:	4618      	mov	r0, r3
 80051a0:	f7ff facf 	bl	8004742 <uxListRemove>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10b      	bne.n	80051c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80051aa:	4b24      	ldr	r3, [pc, #144]	; (800523c <prvAddCurrentTaskToDelayedList+0xb4>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b0:	2201      	movs	r2, #1
 80051b2:	fa02 f303 	lsl.w	r3, r2, r3
 80051b6:	43da      	mvns	r2, r3
 80051b8:	4b21      	ldr	r3, [pc, #132]	; (8005240 <prvAddCurrentTaskToDelayedList+0xb8>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4013      	ands	r3, r2
 80051be:	4a20      	ldr	r2, [pc, #128]	; (8005240 <prvAddCurrentTaskToDelayedList+0xb8>)
 80051c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c8:	d10a      	bne.n	80051e0 <prvAddCurrentTaskToDelayedList+0x58>
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d007      	beq.n	80051e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051d0:	4b1a      	ldr	r3, [pc, #104]	; (800523c <prvAddCurrentTaskToDelayedList+0xb4>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	3304      	adds	r3, #4
 80051d6:	4619      	mov	r1, r3
 80051d8:	481a      	ldr	r0, [pc, #104]	; (8005244 <prvAddCurrentTaskToDelayedList+0xbc>)
 80051da:	f7ff fa55 	bl	8004688 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80051de:	e026      	b.n	800522e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4413      	add	r3, r2
 80051e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80051e8:	4b14      	ldr	r3, [pc, #80]	; (800523c <prvAddCurrentTaskToDelayedList+0xb4>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80051f0:	68ba      	ldr	r2, [r7, #8]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d209      	bcs.n	800520c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051f8:	4b13      	ldr	r3, [pc, #76]	; (8005248 <prvAddCurrentTaskToDelayedList+0xc0>)
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	4b0f      	ldr	r3, [pc, #60]	; (800523c <prvAddCurrentTaskToDelayedList+0xb4>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	3304      	adds	r3, #4
 8005202:	4619      	mov	r1, r3
 8005204:	4610      	mov	r0, r2
 8005206:	f7ff fa63 	bl	80046d0 <vListInsert>
}
 800520a:	e010      	b.n	800522e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800520c:	4b0f      	ldr	r3, [pc, #60]	; (800524c <prvAddCurrentTaskToDelayedList+0xc4>)
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	4b0a      	ldr	r3, [pc, #40]	; (800523c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	3304      	adds	r3, #4
 8005216:	4619      	mov	r1, r3
 8005218:	4610      	mov	r0, r2
 800521a:	f7ff fa59 	bl	80046d0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800521e:	4b0c      	ldr	r3, [pc, #48]	; (8005250 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	429a      	cmp	r2, r3
 8005226:	d202      	bcs.n	800522e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005228:	4a09      	ldr	r2, [pc, #36]	; (8005250 <prvAddCurrentTaskToDelayedList+0xc8>)
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	6013      	str	r3, [r2, #0]
}
 800522e:	bf00      	nop
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	200004e4 	.word	0x200004e4
 800523c:	200003e0 	.word	0x200003e0
 8005240:	200004e8 	.word	0x200004e8
 8005244:	200004cc 	.word	0x200004cc
 8005248:	2000049c 	.word	0x2000049c
 800524c:	20000498 	.word	0x20000498
 8005250:	20000500 	.word	0x20000500

08005254 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	3b04      	subs	r3, #4
 8005264:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800526c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	3b04      	subs	r3, #4
 8005272:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	f023 0201 	bic.w	r2, r3, #1
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	3b04      	subs	r3, #4
 8005282:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005284:	4a0c      	ldr	r2, [pc, #48]	; (80052b8 <pxPortInitialiseStack+0x64>)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	3b14      	subs	r3, #20
 800528e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	3b04      	subs	r3, #4
 800529a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f06f 0202 	mvn.w	r2, #2
 80052a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	3b20      	subs	r3, #32
 80052a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80052aa:	68fb      	ldr	r3, [r7, #12]
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3714      	adds	r7, #20
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	080052bd 	.word	0x080052bd

080052bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80052c2:	2300      	movs	r3, #0
 80052c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80052c6:	4b13      	ldr	r3, [pc, #76]	; (8005314 <prvTaskExitError+0x58>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ce:	d00b      	beq.n	80052e8 <prvTaskExitError+0x2c>
 80052d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d4:	b672      	cpsid	i
 80052d6:	f383 8811 	msr	BASEPRI, r3
 80052da:	f3bf 8f6f 	isb	sy
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	b662      	cpsie	i
 80052e4:	60fb      	str	r3, [r7, #12]
 80052e6:	e7fe      	b.n	80052e6 <prvTaskExitError+0x2a>
 80052e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ec:	b672      	cpsid	i
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	b662      	cpsie	i
 80052fc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80052fe:	bf00      	nop
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d0fc      	beq.n	8005300 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005306:	bf00      	nop
 8005308:	3714      	adds	r7, #20
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	20000100 	.word	0x20000100
	...

08005320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005320:	4b07      	ldr	r3, [pc, #28]	; (8005340 <pxCurrentTCBConst2>)
 8005322:	6819      	ldr	r1, [r3, #0]
 8005324:	6808      	ldr	r0, [r1, #0]
 8005326:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800532a:	f380 8809 	msr	PSP, r0
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	f04f 0000 	mov.w	r0, #0
 8005336:	f380 8811 	msr	BASEPRI, r0
 800533a:	4770      	bx	lr
 800533c:	f3af 8000 	nop.w

08005340 <pxCurrentTCBConst2>:
 8005340:	200003e0 	.word	0x200003e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005344:	bf00      	nop
 8005346:	bf00      	nop

08005348 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005348:	4808      	ldr	r0, [pc, #32]	; (800536c <prvPortStartFirstTask+0x24>)
 800534a:	6800      	ldr	r0, [r0, #0]
 800534c:	6800      	ldr	r0, [r0, #0]
 800534e:	f380 8808 	msr	MSP, r0
 8005352:	f04f 0000 	mov.w	r0, #0
 8005356:	f380 8814 	msr	CONTROL, r0
 800535a:	b662      	cpsie	i
 800535c:	b661      	cpsie	f
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	f3bf 8f6f 	isb	sy
 8005366:	df00      	svc	0
 8005368:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800536a:	bf00      	nop
 800536c:	e000ed08 	.word	0xe000ed08

08005370 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005376:	4b36      	ldr	r3, [pc, #216]	; (8005450 <xPortStartScheduler+0xe0>)
 8005378:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	b2db      	uxtb	r3, r3
 8005380:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	22ff      	movs	r2, #255	; 0xff
 8005386:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	b2db      	uxtb	r3, r3
 800538e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005390:	78fb      	ldrb	r3, [r7, #3]
 8005392:	b2db      	uxtb	r3, r3
 8005394:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005398:	b2da      	uxtb	r2, r3
 800539a:	4b2e      	ldr	r3, [pc, #184]	; (8005454 <xPortStartScheduler+0xe4>)
 800539c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800539e:	4b2e      	ldr	r3, [pc, #184]	; (8005458 <xPortStartScheduler+0xe8>)
 80053a0:	2207      	movs	r2, #7
 80053a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053a4:	e009      	b.n	80053ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80053a6:	4b2c      	ldr	r3, [pc, #176]	; (8005458 <xPortStartScheduler+0xe8>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	3b01      	subs	r3, #1
 80053ac:	4a2a      	ldr	r2, [pc, #168]	; (8005458 <xPortStartScheduler+0xe8>)
 80053ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80053b0:	78fb      	ldrb	r3, [r7, #3]
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	005b      	lsls	r3, r3, #1
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053ba:	78fb      	ldrb	r3, [r7, #3]
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c2:	2b80      	cmp	r3, #128	; 0x80
 80053c4:	d0ef      	beq.n	80053a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80053c6:	4b24      	ldr	r3, [pc, #144]	; (8005458 <xPortStartScheduler+0xe8>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f1c3 0307 	rsb	r3, r3, #7
 80053ce:	2b04      	cmp	r3, #4
 80053d0:	d00b      	beq.n	80053ea <xPortStartScheduler+0x7a>
 80053d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d6:	b672      	cpsid	i
 80053d8:	f383 8811 	msr	BASEPRI, r3
 80053dc:	f3bf 8f6f 	isb	sy
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	b662      	cpsie	i
 80053e6:	60bb      	str	r3, [r7, #8]
 80053e8:	e7fe      	b.n	80053e8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80053ea:	4b1b      	ldr	r3, [pc, #108]	; (8005458 <xPortStartScheduler+0xe8>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	021b      	lsls	r3, r3, #8
 80053f0:	4a19      	ldr	r2, [pc, #100]	; (8005458 <xPortStartScheduler+0xe8>)
 80053f2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80053f4:	4b18      	ldr	r3, [pc, #96]	; (8005458 <xPortStartScheduler+0xe8>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053fc:	4a16      	ldr	r2, [pc, #88]	; (8005458 <xPortStartScheduler+0xe8>)
 80053fe:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	b2da      	uxtb	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005408:	4b14      	ldr	r3, [pc, #80]	; (800545c <xPortStartScheduler+0xec>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a13      	ldr	r2, [pc, #76]	; (800545c <xPortStartScheduler+0xec>)
 800540e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005412:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005414:	4b11      	ldr	r3, [pc, #68]	; (800545c <xPortStartScheduler+0xec>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a10      	ldr	r2, [pc, #64]	; (800545c <xPortStartScheduler+0xec>)
 800541a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800541e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005420:	f000 f8d4 	bl	80055cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005424:	4b0e      	ldr	r3, [pc, #56]	; (8005460 <xPortStartScheduler+0xf0>)
 8005426:	2200      	movs	r2, #0
 8005428:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800542a:	f000 f8f3 	bl	8005614 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800542e:	4b0d      	ldr	r3, [pc, #52]	; (8005464 <xPortStartScheduler+0xf4>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a0c      	ldr	r2, [pc, #48]	; (8005464 <xPortStartScheduler+0xf4>)
 8005434:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005438:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800543a:	f7ff ff85 	bl	8005348 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800543e:	f7ff fd4b 	bl	8004ed8 <vTaskSwitchContext>
	prvTaskExitError();
 8005442:	f7ff ff3b 	bl	80052bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	e000e400 	.word	0xe000e400
 8005454:	2000050c 	.word	0x2000050c
 8005458:	20000510 	.word	0x20000510
 800545c:	e000ed20 	.word	0xe000ed20
 8005460:	20000100 	.word	0x20000100
 8005464:	e000ef34 	.word	0xe000ef34

08005468 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005472:	b672      	cpsid	i
 8005474:	f383 8811 	msr	BASEPRI, r3
 8005478:	f3bf 8f6f 	isb	sy
 800547c:	f3bf 8f4f 	dsb	sy
 8005480:	b662      	cpsie	i
 8005482:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005484:	4b0f      	ldr	r3, [pc, #60]	; (80054c4 <vPortEnterCritical+0x5c>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	3301      	adds	r3, #1
 800548a:	4a0e      	ldr	r2, [pc, #56]	; (80054c4 <vPortEnterCritical+0x5c>)
 800548c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800548e:	4b0d      	ldr	r3, [pc, #52]	; (80054c4 <vPortEnterCritical+0x5c>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d110      	bne.n	80054b8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005496:	4b0c      	ldr	r3, [pc, #48]	; (80054c8 <vPortEnterCritical+0x60>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00b      	beq.n	80054b8 <vPortEnterCritical+0x50>
 80054a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a4:	b672      	cpsid	i
 80054a6:	f383 8811 	msr	BASEPRI, r3
 80054aa:	f3bf 8f6f 	isb	sy
 80054ae:	f3bf 8f4f 	dsb	sy
 80054b2:	b662      	cpsie	i
 80054b4:	603b      	str	r3, [r7, #0]
 80054b6:	e7fe      	b.n	80054b6 <vPortEnterCritical+0x4e>
	}
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr
 80054c4:	20000100 	.word	0x20000100
 80054c8:	e000ed04 	.word	0xe000ed04

080054cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80054d2:	4b12      	ldr	r3, [pc, #72]	; (800551c <vPortExitCritical+0x50>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d10b      	bne.n	80054f2 <vPortExitCritical+0x26>
 80054da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054de:	b672      	cpsid	i
 80054e0:	f383 8811 	msr	BASEPRI, r3
 80054e4:	f3bf 8f6f 	isb	sy
 80054e8:	f3bf 8f4f 	dsb	sy
 80054ec:	b662      	cpsie	i
 80054ee:	607b      	str	r3, [r7, #4]
 80054f0:	e7fe      	b.n	80054f0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80054f2:	4b0a      	ldr	r3, [pc, #40]	; (800551c <vPortExitCritical+0x50>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	3b01      	subs	r3, #1
 80054f8:	4a08      	ldr	r2, [pc, #32]	; (800551c <vPortExitCritical+0x50>)
 80054fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80054fc:	4b07      	ldr	r3, [pc, #28]	; (800551c <vPortExitCritical+0x50>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d104      	bne.n	800550e <vPortExitCritical+0x42>
 8005504:	2300      	movs	r3, #0
 8005506:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800550e:	bf00      	nop
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	20000100 	.word	0x20000100

08005520 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005520:	f3ef 8009 	mrs	r0, PSP
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	4b15      	ldr	r3, [pc, #84]	; (8005580 <pxCurrentTCBConst>)
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	f01e 0f10 	tst.w	lr, #16
 8005530:	bf08      	it	eq
 8005532:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005536:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800553a:	6010      	str	r0, [r2, #0]
 800553c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005540:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005544:	b672      	cpsid	i
 8005546:	f380 8811 	msr	BASEPRI, r0
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	f3bf 8f6f 	isb	sy
 8005552:	b662      	cpsie	i
 8005554:	f7ff fcc0 	bl	8004ed8 <vTaskSwitchContext>
 8005558:	f04f 0000 	mov.w	r0, #0
 800555c:	f380 8811 	msr	BASEPRI, r0
 8005560:	bc09      	pop	{r0, r3}
 8005562:	6819      	ldr	r1, [r3, #0]
 8005564:	6808      	ldr	r0, [r1, #0]
 8005566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800556a:	f01e 0f10 	tst.w	lr, #16
 800556e:	bf08      	it	eq
 8005570:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005574:	f380 8809 	msr	PSP, r0
 8005578:	f3bf 8f6f 	isb	sy
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop

08005580 <pxCurrentTCBConst>:
 8005580:	200003e0 	.word	0x200003e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005584:	bf00      	nop
 8005586:	bf00      	nop

08005588 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
	__asm volatile
 800558e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005592:	b672      	cpsid	i
 8005594:	f383 8811 	msr	BASEPRI, r3
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	b662      	cpsie	i
 80055a2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80055a4:	f7ff fbde 	bl	8004d64 <xTaskIncrementTick>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d003      	beq.n	80055b6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80055ae:	4b06      	ldr	r3, [pc, #24]	; (80055c8 <SysTick_Handler+0x40>)
 80055b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055b4:	601a      	str	r2, [r3, #0]
 80055b6:	2300      	movs	r3, #0
 80055b8:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80055c0:	bf00      	nop
 80055c2:	3708      	adds	r7, #8
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	e000ed04 	.word	0xe000ed04

080055cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80055cc:	b480      	push	{r7}
 80055ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80055d0:	4b0b      	ldr	r3, [pc, #44]	; (8005600 <vPortSetupTimerInterrupt+0x34>)
 80055d2:	2200      	movs	r2, #0
 80055d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80055d6:	4b0b      	ldr	r3, [pc, #44]	; (8005604 <vPortSetupTimerInterrupt+0x38>)
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80055dc:	4b0a      	ldr	r3, [pc, #40]	; (8005608 <vPortSetupTimerInterrupt+0x3c>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a0a      	ldr	r2, [pc, #40]	; (800560c <vPortSetupTimerInterrupt+0x40>)
 80055e2:	fba2 2303 	umull	r2, r3, r2, r3
 80055e6:	099b      	lsrs	r3, r3, #6
 80055e8:	4a09      	ldr	r2, [pc, #36]	; (8005610 <vPortSetupTimerInterrupt+0x44>)
 80055ea:	3b01      	subs	r3, #1
 80055ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80055ee:	4b04      	ldr	r3, [pc, #16]	; (8005600 <vPortSetupTimerInterrupt+0x34>)
 80055f0:	2207      	movs	r2, #7
 80055f2:	601a      	str	r2, [r3, #0]
}
 80055f4:	bf00      	nop
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	e000e010 	.word	0xe000e010
 8005604:	e000e018 	.word	0xe000e018
 8005608:	200000f4 	.word	0x200000f4
 800560c:	10624dd3 	.word	0x10624dd3
 8005610:	e000e014 	.word	0xe000e014

08005614 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005614:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005624 <vPortEnableVFP+0x10>
 8005618:	6801      	ldr	r1, [r0, #0]
 800561a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800561e:	6001      	str	r1, [r0, #0]
 8005620:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005622:	bf00      	nop
 8005624:	e000ed88 	.word	0xe000ed88

08005628 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b08a      	sub	sp, #40	; 0x28
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005630:	2300      	movs	r3, #0
 8005632:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005634:	f7ff faea 	bl	8004c0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005638:	4b5c      	ldr	r3, [pc, #368]	; (80057ac <pvPortMalloc+0x184>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d101      	bne.n	8005644 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005640:	f000 f91a 	bl	8005878 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005644:	4b5a      	ldr	r3, [pc, #360]	; (80057b0 <pvPortMalloc+0x188>)
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4013      	ands	r3, r2
 800564c:	2b00      	cmp	r3, #0
 800564e:	f040 8090 	bne.w	8005772 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d01e      	beq.n	8005696 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005658:	2208      	movs	r2, #8
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4413      	add	r3, r2
 800565e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f003 0307 	and.w	r3, r3, #7
 8005666:	2b00      	cmp	r3, #0
 8005668:	d015      	beq.n	8005696 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f023 0307 	bic.w	r3, r3, #7
 8005670:	3308      	adds	r3, #8
 8005672:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f003 0307 	and.w	r3, r3, #7
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00b      	beq.n	8005696 <pvPortMalloc+0x6e>
	__asm volatile
 800567e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005682:	b672      	cpsid	i
 8005684:	f383 8811 	msr	BASEPRI, r3
 8005688:	f3bf 8f6f 	isb	sy
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	b662      	cpsie	i
 8005692:	617b      	str	r3, [r7, #20]
 8005694:	e7fe      	b.n	8005694 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d06a      	beq.n	8005772 <pvPortMalloc+0x14a>
 800569c:	4b45      	ldr	r3, [pc, #276]	; (80057b4 <pvPortMalloc+0x18c>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d865      	bhi.n	8005772 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80056a6:	4b44      	ldr	r3, [pc, #272]	; (80057b8 <pvPortMalloc+0x190>)
 80056a8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80056aa:	4b43      	ldr	r3, [pc, #268]	; (80057b8 <pvPortMalloc+0x190>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056b0:	e004      	b.n	80056bc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80056b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d903      	bls.n	80056ce <pvPortMalloc+0xa6>
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1f1      	bne.n	80056b2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80056ce:	4b37      	ldr	r3, [pc, #220]	; (80057ac <pvPortMalloc+0x184>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d04c      	beq.n	8005772 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80056d8:	6a3b      	ldr	r3, [r7, #32]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2208      	movs	r2, #8
 80056de:	4413      	add	r3, r2
 80056e0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80056e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	6a3b      	ldr	r3, [r7, #32]
 80056e8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80056ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ec:	685a      	ldr	r2, [r3, #4]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	1ad2      	subs	r2, r2, r3
 80056f2:	2308      	movs	r3, #8
 80056f4:	005b      	lsls	r3, r3, #1
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d920      	bls.n	800573c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80056fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4413      	add	r3, r2
 8005700:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	f003 0307 	and.w	r3, r3, #7
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00b      	beq.n	8005724 <pvPortMalloc+0xfc>
 800570c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005710:	b672      	cpsid	i
 8005712:	f383 8811 	msr	BASEPRI, r3
 8005716:	f3bf 8f6f 	isb	sy
 800571a:	f3bf 8f4f 	dsb	sy
 800571e:	b662      	cpsie	i
 8005720:	613b      	str	r3, [r7, #16]
 8005722:	e7fe      	b.n	8005722 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005726:	685a      	ldr	r2, [r3, #4]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	1ad2      	subs	r2, r2, r3
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005736:	69b8      	ldr	r0, [r7, #24]
 8005738:	f000 f900 	bl	800593c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800573c:	4b1d      	ldr	r3, [pc, #116]	; (80057b4 <pvPortMalloc+0x18c>)
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	4a1b      	ldr	r2, [pc, #108]	; (80057b4 <pvPortMalloc+0x18c>)
 8005748:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800574a:	4b1a      	ldr	r3, [pc, #104]	; (80057b4 <pvPortMalloc+0x18c>)
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	4b1b      	ldr	r3, [pc, #108]	; (80057bc <pvPortMalloc+0x194>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	429a      	cmp	r2, r3
 8005754:	d203      	bcs.n	800575e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005756:	4b17      	ldr	r3, [pc, #92]	; (80057b4 <pvPortMalloc+0x18c>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a18      	ldr	r2, [pc, #96]	; (80057bc <pvPortMalloc+0x194>)
 800575c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	4b13      	ldr	r3, [pc, #76]	; (80057b0 <pvPortMalloc+0x188>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	431a      	orrs	r2, r3
 8005768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576e:	2200      	movs	r2, #0
 8005770:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005772:	f7ff fa59 	bl	8004c28 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d101      	bne.n	8005780 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800577c:	f7fa feda 	bl	8000534 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	f003 0307 	and.w	r3, r3, #7
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00b      	beq.n	80057a2 <pvPortMalloc+0x17a>
 800578a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578e:	b672      	cpsid	i
 8005790:	f383 8811 	msr	BASEPRI, r3
 8005794:	f3bf 8f6f 	isb	sy
 8005798:	f3bf 8f4f 	dsb	sy
 800579c:	b662      	cpsie	i
 800579e:	60fb      	str	r3, [r7, #12]
 80057a0:	e7fe      	b.n	80057a0 <pvPortMalloc+0x178>
	return pvReturn;
 80057a2:	69fb      	ldr	r3, [r7, #28]
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3728      	adds	r7, #40	; 0x28
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	2000851c 	.word	0x2000851c
 80057b0:	20008528 	.word	0x20008528
 80057b4:	20008520 	.word	0x20008520
 80057b8:	20008514 	.word	0x20008514
 80057bc:	20008524 	.word	0x20008524

080057c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d04a      	beq.n	8005868 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80057d2:	2308      	movs	r3, #8
 80057d4:	425b      	negs	r3, r3
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	4413      	add	r3, r2
 80057da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	685a      	ldr	r2, [r3, #4]
 80057e4:	4b22      	ldr	r3, [pc, #136]	; (8005870 <vPortFree+0xb0>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4013      	ands	r3, r2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10b      	bne.n	8005806 <vPortFree+0x46>
 80057ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f2:	b672      	cpsid	i
 80057f4:	f383 8811 	msr	BASEPRI, r3
 80057f8:	f3bf 8f6f 	isb	sy
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	b662      	cpsie	i
 8005802:	60fb      	str	r3, [r7, #12]
 8005804:	e7fe      	b.n	8005804 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00b      	beq.n	8005826 <vPortFree+0x66>
 800580e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005812:	b672      	cpsid	i
 8005814:	f383 8811 	msr	BASEPRI, r3
 8005818:	f3bf 8f6f 	isb	sy
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	b662      	cpsie	i
 8005822:	60bb      	str	r3, [r7, #8]
 8005824:	e7fe      	b.n	8005824 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	685a      	ldr	r2, [r3, #4]
 800582a:	4b11      	ldr	r3, [pc, #68]	; (8005870 <vPortFree+0xb0>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4013      	ands	r3, r2
 8005830:	2b00      	cmp	r3, #0
 8005832:	d019      	beq.n	8005868 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d115      	bne.n	8005868 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	4b0b      	ldr	r3, [pc, #44]	; (8005870 <vPortFree+0xb0>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	43db      	mvns	r3, r3
 8005846:	401a      	ands	r2, r3
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800584c:	f7ff f9de 	bl	8004c0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	4b07      	ldr	r3, [pc, #28]	; (8005874 <vPortFree+0xb4>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4413      	add	r3, r2
 800585a:	4a06      	ldr	r2, [pc, #24]	; (8005874 <vPortFree+0xb4>)
 800585c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800585e:	6938      	ldr	r0, [r7, #16]
 8005860:	f000 f86c 	bl	800593c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005864:	f7ff f9e0 	bl	8004c28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005868:	bf00      	nop
 800586a:	3718      	adds	r7, #24
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	20008528 	.word	0x20008528
 8005874:	20008520 	.word	0x20008520

08005878 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800587e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005882:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005884:	4b27      	ldr	r3, [pc, #156]	; (8005924 <prvHeapInit+0xac>)
 8005886:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f003 0307 	and.w	r3, r3, #7
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00c      	beq.n	80058ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	3307      	adds	r3, #7
 8005896:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f023 0307 	bic.w	r3, r3, #7
 800589e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	4a1f      	ldr	r2, [pc, #124]	; (8005924 <prvHeapInit+0xac>)
 80058a8:	4413      	add	r3, r2
 80058aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80058b0:	4a1d      	ldr	r2, [pc, #116]	; (8005928 <prvHeapInit+0xb0>)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80058b6:	4b1c      	ldr	r3, [pc, #112]	; (8005928 <prvHeapInit+0xb0>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	4413      	add	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80058c4:	2208      	movs	r2, #8
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	1a9b      	subs	r3, r3, r2
 80058ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f023 0307 	bic.w	r3, r3, #7
 80058d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4a15      	ldr	r2, [pc, #84]	; (800592c <prvHeapInit+0xb4>)
 80058d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80058da:	4b14      	ldr	r3, [pc, #80]	; (800592c <prvHeapInit+0xb4>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2200      	movs	r2, #0
 80058e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80058e2:	4b12      	ldr	r3, [pc, #72]	; (800592c <prvHeapInit+0xb4>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2200      	movs	r2, #0
 80058e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	1ad2      	subs	r2, r2, r3
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80058f8:	4b0c      	ldr	r3, [pc, #48]	; (800592c <prvHeapInit+0xb4>)
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	4a0a      	ldr	r2, [pc, #40]	; (8005930 <prvHeapInit+0xb8>)
 8005906:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	4a09      	ldr	r2, [pc, #36]	; (8005934 <prvHeapInit+0xbc>)
 800590e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005910:	4b09      	ldr	r3, [pc, #36]	; (8005938 <prvHeapInit+0xc0>)
 8005912:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005916:	601a      	str	r2, [r3, #0]
}
 8005918:	bf00      	nop
 800591a:	3714      	adds	r7, #20
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr
 8005924:	20000514 	.word	0x20000514
 8005928:	20008514 	.word	0x20008514
 800592c:	2000851c 	.word	0x2000851c
 8005930:	20008524 	.word	0x20008524
 8005934:	20008520 	.word	0x20008520
 8005938:	20008528 	.word	0x20008528

0800593c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005944:	4b28      	ldr	r3, [pc, #160]	; (80059e8 <prvInsertBlockIntoFreeList+0xac>)
 8005946:	60fb      	str	r3, [r7, #12]
 8005948:	e002      	b.n	8005950 <prvInsertBlockIntoFreeList+0x14>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	60fb      	str	r3, [r7, #12]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	429a      	cmp	r2, r3
 8005958:	d8f7      	bhi.n	800594a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	4413      	add	r3, r2
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	429a      	cmp	r2, r3
 800596a:	d108      	bne.n	800597e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	685a      	ldr	r2, [r3, #4]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	441a      	add	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	68ba      	ldr	r2, [r7, #8]
 8005988:	441a      	add	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	429a      	cmp	r2, r3
 8005990:	d118      	bne.n	80059c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	4b15      	ldr	r3, [pc, #84]	; (80059ec <prvInsertBlockIntoFreeList+0xb0>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	429a      	cmp	r2, r3
 800599c:	d00d      	beq.n	80059ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685a      	ldr	r2, [r3, #4]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	441a      	add	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	e008      	b.n	80059cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80059ba:	4b0c      	ldr	r3, [pc, #48]	; (80059ec <prvInsertBlockIntoFreeList+0xb0>)
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	601a      	str	r2, [r3, #0]
 80059c2:	e003      	b.n	80059cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d002      	beq.n	80059da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059da:	bf00      	nop
 80059dc:	3714      	adds	r7, #20
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop
 80059e8:	20008514 	.word	0x20008514
 80059ec:	2000851c 	.word	0x2000851c

080059f0 <__errno>:
 80059f0:	4b01      	ldr	r3, [pc, #4]	; (80059f8 <__errno+0x8>)
 80059f2:	6818      	ldr	r0, [r3, #0]
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	20000104 	.word	0x20000104

080059fc <__libc_init_array>:
 80059fc:	b570      	push	{r4, r5, r6, lr}
 80059fe:	4e0d      	ldr	r6, [pc, #52]	; (8005a34 <__libc_init_array+0x38>)
 8005a00:	4c0d      	ldr	r4, [pc, #52]	; (8005a38 <__libc_init_array+0x3c>)
 8005a02:	1ba4      	subs	r4, r4, r6
 8005a04:	10a4      	asrs	r4, r4, #2
 8005a06:	2500      	movs	r5, #0
 8005a08:	42a5      	cmp	r5, r4
 8005a0a:	d109      	bne.n	8005a20 <__libc_init_array+0x24>
 8005a0c:	4e0b      	ldr	r6, [pc, #44]	; (8005a3c <__libc_init_array+0x40>)
 8005a0e:	4c0c      	ldr	r4, [pc, #48]	; (8005a40 <__libc_init_array+0x44>)
 8005a10:	f000 fd46 	bl	80064a0 <_init>
 8005a14:	1ba4      	subs	r4, r4, r6
 8005a16:	10a4      	asrs	r4, r4, #2
 8005a18:	2500      	movs	r5, #0
 8005a1a:	42a5      	cmp	r5, r4
 8005a1c:	d105      	bne.n	8005a2a <__libc_init_array+0x2e>
 8005a1e:	bd70      	pop	{r4, r5, r6, pc}
 8005a20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a24:	4798      	blx	r3
 8005a26:	3501      	adds	r5, #1
 8005a28:	e7ee      	b.n	8005a08 <__libc_init_array+0xc>
 8005a2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a2e:	4798      	blx	r3
 8005a30:	3501      	adds	r5, #1
 8005a32:	e7f2      	b.n	8005a1a <__libc_init_array+0x1e>
 8005a34:	080065ac 	.word	0x080065ac
 8005a38:	080065ac 	.word	0x080065ac
 8005a3c:	080065ac 	.word	0x080065ac
 8005a40:	080065b0 	.word	0x080065b0

08005a44 <memset>:
 8005a44:	4402      	add	r2, r0
 8005a46:	4603      	mov	r3, r0
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d100      	bne.n	8005a4e <memset+0xa>
 8005a4c:	4770      	bx	lr
 8005a4e:	f803 1b01 	strb.w	r1, [r3], #1
 8005a52:	e7f9      	b.n	8005a48 <memset+0x4>

08005a54 <_puts_r>:
 8005a54:	b570      	push	{r4, r5, r6, lr}
 8005a56:	460e      	mov	r6, r1
 8005a58:	4605      	mov	r5, r0
 8005a5a:	b118      	cbz	r0, 8005a64 <_puts_r+0x10>
 8005a5c:	6983      	ldr	r3, [r0, #24]
 8005a5e:	b90b      	cbnz	r3, 8005a64 <_puts_r+0x10>
 8005a60:	f000 fac2 	bl	8005fe8 <__sinit>
 8005a64:	69ab      	ldr	r3, [r5, #24]
 8005a66:	68ac      	ldr	r4, [r5, #8]
 8005a68:	b913      	cbnz	r3, 8005a70 <_puts_r+0x1c>
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	f000 fabc 	bl	8005fe8 <__sinit>
 8005a70:	4b23      	ldr	r3, [pc, #140]	; (8005b00 <_puts_r+0xac>)
 8005a72:	429c      	cmp	r4, r3
 8005a74:	d117      	bne.n	8005aa6 <_puts_r+0x52>
 8005a76:	686c      	ldr	r4, [r5, #4]
 8005a78:	89a3      	ldrh	r3, [r4, #12]
 8005a7a:	071b      	lsls	r3, r3, #28
 8005a7c:	d51d      	bpl.n	8005aba <_puts_r+0x66>
 8005a7e:	6923      	ldr	r3, [r4, #16]
 8005a80:	b1db      	cbz	r3, 8005aba <_puts_r+0x66>
 8005a82:	3e01      	subs	r6, #1
 8005a84:	68a3      	ldr	r3, [r4, #8]
 8005a86:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	60a3      	str	r3, [r4, #8]
 8005a8e:	b9e9      	cbnz	r1, 8005acc <_puts_r+0x78>
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	da2e      	bge.n	8005af2 <_puts_r+0x9e>
 8005a94:	4622      	mov	r2, r4
 8005a96:	210a      	movs	r1, #10
 8005a98:	4628      	mov	r0, r5
 8005a9a:	f000 f8f5 	bl	8005c88 <__swbuf_r>
 8005a9e:	3001      	adds	r0, #1
 8005aa0:	d011      	beq.n	8005ac6 <_puts_r+0x72>
 8005aa2:	200a      	movs	r0, #10
 8005aa4:	e011      	b.n	8005aca <_puts_r+0x76>
 8005aa6:	4b17      	ldr	r3, [pc, #92]	; (8005b04 <_puts_r+0xb0>)
 8005aa8:	429c      	cmp	r4, r3
 8005aaa:	d101      	bne.n	8005ab0 <_puts_r+0x5c>
 8005aac:	68ac      	ldr	r4, [r5, #8]
 8005aae:	e7e3      	b.n	8005a78 <_puts_r+0x24>
 8005ab0:	4b15      	ldr	r3, [pc, #84]	; (8005b08 <_puts_r+0xb4>)
 8005ab2:	429c      	cmp	r4, r3
 8005ab4:	bf08      	it	eq
 8005ab6:	68ec      	ldreq	r4, [r5, #12]
 8005ab8:	e7de      	b.n	8005a78 <_puts_r+0x24>
 8005aba:	4621      	mov	r1, r4
 8005abc:	4628      	mov	r0, r5
 8005abe:	f000 f935 	bl	8005d2c <__swsetup_r>
 8005ac2:	2800      	cmp	r0, #0
 8005ac4:	d0dd      	beq.n	8005a82 <_puts_r+0x2e>
 8005ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8005aca:	bd70      	pop	{r4, r5, r6, pc}
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	da04      	bge.n	8005ada <_puts_r+0x86>
 8005ad0:	69a2      	ldr	r2, [r4, #24]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	dc06      	bgt.n	8005ae4 <_puts_r+0x90>
 8005ad6:	290a      	cmp	r1, #10
 8005ad8:	d004      	beq.n	8005ae4 <_puts_r+0x90>
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	1c5a      	adds	r2, r3, #1
 8005ade:	6022      	str	r2, [r4, #0]
 8005ae0:	7019      	strb	r1, [r3, #0]
 8005ae2:	e7cf      	b.n	8005a84 <_puts_r+0x30>
 8005ae4:	4622      	mov	r2, r4
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	f000 f8ce 	bl	8005c88 <__swbuf_r>
 8005aec:	3001      	adds	r0, #1
 8005aee:	d1c9      	bne.n	8005a84 <_puts_r+0x30>
 8005af0:	e7e9      	b.n	8005ac6 <_puts_r+0x72>
 8005af2:	6823      	ldr	r3, [r4, #0]
 8005af4:	200a      	movs	r0, #10
 8005af6:	1c5a      	adds	r2, r3, #1
 8005af8:	6022      	str	r2, [r4, #0]
 8005afa:	7018      	strb	r0, [r3, #0]
 8005afc:	e7e5      	b.n	8005aca <_puts_r+0x76>
 8005afe:	bf00      	nop
 8005b00:	08006564 	.word	0x08006564
 8005b04:	08006584 	.word	0x08006584
 8005b08:	08006544 	.word	0x08006544

08005b0c <puts>:
 8005b0c:	4b02      	ldr	r3, [pc, #8]	; (8005b18 <puts+0xc>)
 8005b0e:	4601      	mov	r1, r0
 8005b10:	6818      	ldr	r0, [r3, #0]
 8005b12:	f7ff bf9f 	b.w	8005a54 <_puts_r>
 8005b16:	bf00      	nop
 8005b18:	20000104 	.word	0x20000104

08005b1c <setbuf>:
 8005b1c:	2900      	cmp	r1, #0
 8005b1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b22:	bf0c      	ite	eq
 8005b24:	2202      	moveq	r2, #2
 8005b26:	2200      	movne	r2, #0
 8005b28:	f000 b800 	b.w	8005b2c <setvbuf>

08005b2c <setvbuf>:
 8005b2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005b30:	461d      	mov	r5, r3
 8005b32:	4b51      	ldr	r3, [pc, #324]	; (8005c78 <setvbuf+0x14c>)
 8005b34:	681e      	ldr	r6, [r3, #0]
 8005b36:	4604      	mov	r4, r0
 8005b38:	460f      	mov	r7, r1
 8005b3a:	4690      	mov	r8, r2
 8005b3c:	b126      	cbz	r6, 8005b48 <setvbuf+0x1c>
 8005b3e:	69b3      	ldr	r3, [r6, #24]
 8005b40:	b913      	cbnz	r3, 8005b48 <setvbuf+0x1c>
 8005b42:	4630      	mov	r0, r6
 8005b44:	f000 fa50 	bl	8005fe8 <__sinit>
 8005b48:	4b4c      	ldr	r3, [pc, #304]	; (8005c7c <setvbuf+0x150>)
 8005b4a:	429c      	cmp	r4, r3
 8005b4c:	d152      	bne.n	8005bf4 <setvbuf+0xc8>
 8005b4e:	6874      	ldr	r4, [r6, #4]
 8005b50:	f1b8 0f02 	cmp.w	r8, #2
 8005b54:	d006      	beq.n	8005b64 <setvbuf+0x38>
 8005b56:	f1b8 0f01 	cmp.w	r8, #1
 8005b5a:	f200 8089 	bhi.w	8005c70 <setvbuf+0x144>
 8005b5e:	2d00      	cmp	r5, #0
 8005b60:	f2c0 8086 	blt.w	8005c70 <setvbuf+0x144>
 8005b64:	4621      	mov	r1, r4
 8005b66:	4630      	mov	r0, r6
 8005b68:	f000 f9d4 	bl	8005f14 <_fflush_r>
 8005b6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b6e:	b141      	cbz	r1, 8005b82 <setvbuf+0x56>
 8005b70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b74:	4299      	cmp	r1, r3
 8005b76:	d002      	beq.n	8005b7e <setvbuf+0x52>
 8005b78:	4630      	mov	r0, r6
 8005b7a:	f000 fb2b 	bl	80061d4 <_free_r>
 8005b7e:	2300      	movs	r3, #0
 8005b80:	6363      	str	r3, [r4, #52]	; 0x34
 8005b82:	2300      	movs	r3, #0
 8005b84:	61a3      	str	r3, [r4, #24]
 8005b86:	6063      	str	r3, [r4, #4]
 8005b88:	89a3      	ldrh	r3, [r4, #12]
 8005b8a:	061b      	lsls	r3, r3, #24
 8005b8c:	d503      	bpl.n	8005b96 <setvbuf+0x6a>
 8005b8e:	6921      	ldr	r1, [r4, #16]
 8005b90:	4630      	mov	r0, r6
 8005b92:	f000 fb1f 	bl	80061d4 <_free_r>
 8005b96:	89a3      	ldrh	r3, [r4, #12]
 8005b98:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005b9c:	f023 0303 	bic.w	r3, r3, #3
 8005ba0:	f1b8 0f02 	cmp.w	r8, #2
 8005ba4:	81a3      	strh	r3, [r4, #12]
 8005ba6:	d05d      	beq.n	8005c64 <setvbuf+0x138>
 8005ba8:	ab01      	add	r3, sp, #4
 8005baa:	466a      	mov	r2, sp
 8005bac:	4621      	mov	r1, r4
 8005bae:	4630      	mov	r0, r6
 8005bb0:	f000 faa4 	bl	80060fc <__swhatbuf_r>
 8005bb4:	89a3      	ldrh	r3, [r4, #12]
 8005bb6:	4318      	orrs	r0, r3
 8005bb8:	81a0      	strh	r0, [r4, #12]
 8005bba:	bb2d      	cbnz	r5, 8005c08 <setvbuf+0xdc>
 8005bbc:	9d00      	ldr	r5, [sp, #0]
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	f000 fb00 	bl	80061c4 <malloc>
 8005bc4:	4607      	mov	r7, r0
 8005bc6:	2800      	cmp	r0, #0
 8005bc8:	d14e      	bne.n	8005c68 <setvbuf+0x13c>
 8005bca:	f8dd 9000 	ldr.w	r9, [sp]
 8005bce:	45a9      	cmp	r9, r5
 8005bd0:	d13c      	bne.n	8005c4c <setvbuf+0x120>
 8005bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd6:	89a3      	ldrh	r3, [r4, #12]
 8005bd8:	f043 0302 	orr.w	r3, r3, #2
 8005bdc:	81a3      	strh	r3, [r4, #12]
 8005bde:	2300      	movs	r3, #0
 8005be0:	60a3      	str	r3, [r4, #8]
 8005be2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005be6:	6023      	str	r3, [r4, #0]
 8005be8:	6123      	str	r3, [r4, #16]
 8005bea:	2301      	movs	r3, #1
 8005bec:	6163      	str	r3, [r4, #20]
 8005bee:	b003      	add	sp, #12
 8005bf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005bf4:	4b22      	ldr	r3, [pc, #136]	; (8005c80 <setvbuf+0x154>)
 8005bf6:	429c      	cmp	r4, r3
 8005bf8:	d101      	bne.n	8005bfe <setvbuf+0xd2>
 8005bfa:	68b4      	ldr	r4, [r6, #8]
 8005bfc:	e7a8      	b.n	8005b50 <setvbuf+0x24>
 8005bfe:	4b21      	ldr	r3, [pc, #132]	; (8005c84 <setvbuf+0x158>)
 8005c00:	429c      	cmp	r4, r3
 8005c02:	bf08      	it	eq
 8005c04:	68f4      	ldreq	r4, [r6, #12]
 8005c06:	e7a3      	b.n	8005b50 <setvbuf+0x24>
 8005c08:	2f00      	cmp	r7, #0
 8005c0a:	d0d8      	beq.n	8005bbe <setvbuf+0x92>
 8005c0c:	69b3      	ldr	r3, [r6, #24]
 8005c0e:	b913      	cbnz	r3, 8005c16 <setvbuf+0xea>
 8005c10:	4630      	mov	r0, r6
 8005c12:	f000 f9e9 	bl	8005fe8 <__sinit>
 8005c16:	f1b8 0f01 	cmp.w	r8, #1
 8005c1a:	bf08      	it	eq
 8005c1c:	89a3      	ldrheq	r3, [r4, #12]
 8005c1e:	6027      	str	r7, [r4, #0]
 8005c20:	bf04      	itt	eq
 8005c22:	f043 0301 	orreq.w	r3, r3, #1
 8005c26:	81a3      	strheq	r3, [r4, #12]
 8005c28:	89a3      	ldrh	r3, [r4, #12]
 8005c2a:	f013 0008 	ands.w	r0, r3, #8
 8005c2e:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8005c32:	d01b      	beq.n	8005c6c <setvbuf+0x140>
 8005c34:	f013 0001 	ands.w	r0, r3, #1
 8005c38:	bf18      	it	ne
 8005c3a:	426d      	negne	r5, r5
 8005c3c:	f04f 0300 	mov.w	r3, #0
 8005c40:	bf1d      	ittte	ne
 8005c42:	60a3      	strne	r3, [r4, #8]
 8005c44:	61a5      	strne	r5, [r4, #24]
 8005c46:	4618      	movne	r0, r3
 8005c48:	60a5      	streq	r5, [r4, #8]
 8005c4a:	e7d0      	b.n	8005bee <setvbuf+0xc2>
 8005c4c:	4648      	mov	r0, r9
 8005c4e:	f000 fab9 	bl	80061c4 <malloc>
 8005c52:	4607      	mov	r7, r0
 8005c54:	2800      	cmp	r0, #0
 8005c56:	d0bc      	beq.n	8005bd2 <setvbuf+0xa6>
 8005c58:	89a3      	ldrh	r3, [r4, #12]
 8005c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c5e:	81a3      	strh	r3, [r4, #12]
 8005c60:	464d      	mov	r5, r9
 8005c62:	e7d3      	b.n	8005c0c <setvbuf+0xe0>
 8005c64:	2000      	movs	r0, #0
 8005c66:	e7b6      	b.n	8005bd6 <setvbuf+0xaa>
 8005c68:	46a9      	mov	r9, r5
 8005c6a:	e7f5      	b.n	8005c58 <setvbuf+0x12c>
 8005c6c:	60a0      	str	r0, [r4, #8]
 8005c6e:	e7be      	b.n	8005bee <setvbuf+0xc2>
 8005c70:	f04f 30ff 	mov.w	r0, #4294967295
 8005c74:	e7bb      	b.n	8005bee <setvbuf+0xc2>
 8005c76:	bf00      	nop
 8005c78:	20000104 	.word	0x20000104
 8005c7c:	08006564 	.word	0x08006564
 8005c80:	08006584 	.word	0x08006584
 8005c84:	08006544 	.word	0x08006544

08005c88 <__swbuf_r>:
 8005c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8a:	460e      	mov	r6, r1
 8005c8c:	4614      	mov	r4, r2
 8005c8e:	4605      	mov	r5, r0
 8005c90:	b118      	cbz	r0, 8005c9a <__swbuf_r+0x12>
 8005c92:	6983      	ldr	r3, [r0, #24]
 8005c94:	b90b      	cbnz	r3, 8005c9a <__swbuf_r+0x12>
 8005c96:	f000 f9a7 	bl	8005fe8 <__sinit>
 8005c9a:	4b21      	ldr	r3, [pc, #132]	; (8005d20 <__swbuf_r+0x98>)
 8005c9c:	429c      	cmp	r4, r3
 8005c9e:	d12a      	bne.n	8005cf6 <__swbuf_r+0x6e>
 8005ca0:	686c      	ldr	r4, [r5, #4]
 8005ca2:	69a3      	ldr	r3, [r4, #24]
 8005ca4:	60a3      	str	r3, [r4, #8]
 8005ca6:	89a3      	ldrh	r3, [r4, #12]
 8005ca8:	071a      	lsls	r2, r3, #28
 8005caa:	d52e      	bpl.n	8005d0a <__swbuf_r+0x82>
 8005cac:	6923      	ldr	r3, [r4, #16]
 8005cae:	b363      	cbz	r3, 8005d0a <__swbuf_r+0x82>
 8005cb0:	6923      	ldr	r3, [r4, #16]
 8005cb2:	6820      	ldr	r0, [r4, #0]
 8005cb4:	1ac0      	subs	r0, r0, r3
 8005cb6:	6963      	ldr	r3, [r4, #20]
 8005cb8:	b2f6      	uxtb	r6, r6
 8005cba:	4283      	cmp	r3, r0
 8005cbc:	4637      	mov	r7, r6
 8005cbe:	dc04      	bgt.n	8005cca <__swbuf_r+0x42>
 8005cc0:	4621      	mov	r1, r4
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	f000 f926 	bl	8005f14 <_fflush_r>
 8005cc8:	bb28      	cbnz	r0, 8005d16 <__swbuf_r+0x8e>
 8005cca:	68a3      	ldr	r3, [r4, #8]
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	60a3      	str	r3, [r4, #8]
 8005cd0:	6823      	ldr	r3, [r4, #0]
 8005cd2:	1c5a      	adds	r2, r3, #1
 8005cd4:	6022      	str	r2, [r4, #0]
 8005cd6:	701e      	strb	r6, [r3, #0]
 8005cd8:	6963      	ldr	r3, [r4, #20]
 8005cda:	3001      	adds	r0, #1
 8005cdc:	4283      	cmp	r3, r0
 8005cde:	d004      	beq.n	8005cea <__swbuf_r+0x62>
 8005ce0:	89a3      	ldrh	r3, [r4, #12]
 8005ce2:	07db      	lsls	r3, r3, #31
 8005ce4:	d519      	bpl.n	8005d1a <__swbuf_r+0x92>
 8005ce6:	2e0a      	cmp	r6, #10
 8005ce8:	d117      	bne.n	8005d1a <__swbuf_r+0x92>
 8005cea:	4621      	mov	r1, r4
 8005cec:	4628      	mov	r0, r5
 8005cee:	f000 f911 	bl	8005f14 <_fflush_r>
 8005cf2:	b190      	cbz	r0, 8005d1a <__swbuf_r+0x92>
 8005cf4:	e00f      	b.n	8005d16 <__swbuf_r+0x8e>
 8005cf6:	4b0b      	ldr	r3, [pc, #44]	; (8005d24 <__swbuf_r+0x9c>)
 8005cf8:	429c      	cmp	r4, r3
 8005cfa:	d101      	bne.n	8005d00 <__swbuf_r+0x78>
 8005cfc:	68ac      	ldr	r4, [r5, #8]
 8005cfe:	e7d0      	b.n	8005ca2 <__swbuf_r+0x1a>
 8005d00:	4b09      	ldr	r3, [pc, #36]	; (8005d28 <__swbuf_r+0xa0>)
 8005d02:	429c      	cmp	r4, r3
 8005d04:	bf08      	it	eq
 8005d06:	68ec      	ldreq	r4, [r5, #12]
 8005d08:	e7cb      	b.n	8005ca2 <__swbuf_r+0x1a>
 8005d0a:	4621      	mov	r1, r4
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	f000 f80d 	bl	8005d2c <__swsetup_r>
 8005d12:	2800      	cmp	r0, #0
 8005d14:	d0cc      	beq.n	8005cb0 <__swbuf_r+0x28>
 8005d16:	f04f 37ff 	mov.w	r7, #4294967295
 8005d1a:	4638      	mov	r0, r7
 8005d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	08006564 	.word	0x08006564
 8005d24:	08006584 	.word	0x08006584
 8005d28:	08006544 	.word	0x08006544

08005d2c <__swsetup_r>:
 8005d2c:	4b32      	ldr	r3, [pc, #200]	; (8005df8 <__swsetup_r+0xcc>)
 8005d2e:	b570      	push	{r4, r5, r6, lr}
 8005d30:	681d      	ldr	r5, [r3, #0]
 8005d32:	4606      	mov	r6, r0
 8005d34:	460c      	mov	r4, r1
 8005d36:	b125      	cbz	r5, 8005d42 <__swsetup_r+0x16>
 8005d38:	69ab      	ldr	r3, [r5, #24]
 8005d3a:	b913      	cbnz	r3, 8005d42 <__swsetup_r+0x16>
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	f000 f953 	bl	8005fe8 <__sinit>
 8005d42:	4b2e      	ldr	r3, [pc, #184]	; (8005dfc <__swsetup_r+0xd0>)
 8005d44:	429c      	cmp	r4, r3
 8005d46:	d10f      	bne.n	8005d68 <__swsetup_r+0x3c>
 8005d48:	686c      	ldr	r4, [r5, #4]
 8005d4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	0715      	lsls	r5, r2, #28
 8005d52:	d42c      	bmi.n	8005dae <__swsetup_r+0x82>
 8005d54:	06d0      	lsls	r0, r2, #27
 8005d56:	d411      	bmi.n	8005d7c <__swsetup_r+0x50>
 8005d58:	2209      	movs	r2, #9
 8005d5a:	6032      	str	r2, [r6, #0]
 8005d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d60:	81a3      	strh	r3, [r4, #12]
 8005d62:	f04f 30ff 	mov.w	r0, #4294967295
 8005d66:	e03e      	b.n	8005de6 <__swsetup_r+0xba>
 8005d68:	4b25      	ldr	r3, [pc, #148]	; (8005e00 <__swsetup_r+0xd4>)
 8005d6a:	429c      	cmp	r4, r3
 8005d6c:	d101      	bne.n	8005d72 <__swsetup_r+0x46>
 8005d6e:	68ac      	ldr	r4, [r5, #8]
 8005d70:	e7eb      	b.n	8005d4a <__swsetup_r+0x1e>
 8005d72:	4b24      	ldr	r3, [pc, #144]	; (8005e04 <__swsetup_r+0xd8>)
 8005d74:	429c      	cmp	r4, r3
 8005d76:	bf08      	it	eq
 8005d78:	68ec      	ldreq	r4, [r5, #12]
 8005d7a:	e7e6      	b.n	8005d4a <__swsetup_r+0x1e>
 8005d7c:	0751      	lsls	r1, r2, #29
 8005d7e:	d512      	bpl.n	8005da6 <__swsetup_r+0x7a>
 8005d80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d82:	b141      	cbz	r1, 8005d96 <__swsetup_r+0x6a>
 8005d84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d88:	4299      	cmp	r1, r3
 8005d8a:	d002      	beq.n	8005d92 <__swsetup_r+0x66>
 8005d8c:	4630      	mov	r0, r6
 8005d8e:	f000 fa21 	bl	80061d4 <_free_r>
 8005d92:	2300      	movs	r3, #0
 8005d94:	6363      	str	r3, [r4, #52]	; 0x34
 8005d96:	89a3      	ldrh	r3, [r4, #12]
 8005d98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d9c:	81a3      	strh	r3, [r4, #12]
 8005d9e:	2300      	movs	r3, #0
 8005da0:	6063      	str	r3, [r4, #4]
 8005da2:	6923      	ldr	r3, [r4, #16]
 8005da4:	6023      	str	r3, [r4, #0]
 8005da6:	89a3      	ldrh	r3, [r4, #12]
 8005da8:	f043 0308 	orr.w	r3, r3, #8
 8005dac:	81a3      	strh	r3, [r4, #12]
 8005dae:	6923      	ldr	r3, [r4, #16]
 8005db0:	b94b      	cbnz	r3, 8005dc6 <__swsetup_r+0x9a>
 8005db2:	89a3      	ldrh	r3, [r4, #12]
 8005db4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005db8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dbc:	d003      	beq.n	8005dc6 <__swsetup_r+0x9a>
 8005dbe:	4621      	mov	r1, r4
 8005dc0:	4630      	mov	r0, r6
 8005dc2:	f000 f9bf 	bl	8006144 <__smakebuf_r>
 8005dc6:	89a2      	ldrh	r2, [r4, #12]
 8005dc8:	f012 0301 	ands.w	r3, r2, #1
 8005dcc:	d00c      	beq.n	8005de8 <__swsetup_r+0xbc>
 8005dce:	2300      	movs	r3, #0
 8005dd0:	60a3      	str	r3, [r4, #8]
 8005dd2:	6963      	ldr	r3, [r4, #20]
 8005dd4:	425b      	negs	r3, r3
 8005dd6:	61a3      	str	r3, [r4, #24]
 8005dd8:	6923      	ldr	r3, [r4, #16]
 8005dda:	b953      	cbnz	r3, 8005df2 <__swsetup_r+0xc6>
 8005ddc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005de0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005de4:	d1ba      	bne.n	8005d5c <__swsetup_r+0x30>
 8005de6:	bd70      	pop	{r4, r5, r6, pc}
 8005de8:	0792      	lsls	r2, r2, #30
 8005dea:	bf58      	it	pl
 8005dec:	6963      	ldrpl	r3, [r4, #20]
 8005dee:	60a3      	str	r3, [r4, #8]
 8005df0:	e7f2      	b.n	8005dd8 <__swsetup_r+0xac>
 8005df2:	2000      	movs	r0, #0
 8005df4:	e7f7      	b.n	8005de6 <__swsetup_r+0xba>
 8005df6:	bf00      	nop
 8005df8:	20000104 	.word	0x20000104
 8005dfc:	08006564 	.word	0x08006564
 8005e00:	08006584 	.word	0x08006584
 8005e04:	08006544 	.word	0x08006544

08005e08 <__sflush_r>:
 8005e08:	898a      	ldrh	r2, [r1, #12]
 8005e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e0e:	4605      	mov	r5, r0
 8005e10:	0710      	lsls	r0, r2, #28
 8005e12:	460c      	mov	r4, r1
 8005e14:	d458      	bmi.n	8005ec8 <__sflush_r+0xc0>
 8005e16:	684b      	ldr	r3, [r1, #4]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	dc05      	bgt.n	8005e28 <__sflush_r+0x20>
 8005e1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	dc02      	bgt.n	8005e28 <__sflush_r+0x20>
 8005e22:	2000      	movs	r0, #0
 8005e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e2a:	2e00      	cmp	r6, #0
 8005e2c:	d0f9      	beq.n	8005e22 <__sflush_r+0x1a>
 8005e2e:	2300      	movs	r3, #0
 8005e30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005e34:	682f      	ldr	r7, [r5, #0]
 8005e36:	6a21      	ldr	r1, [r4, #32]
 8005e38:	602b      	str	r3, [r5, #0]
 8005e3a:	d032      	beq.n	8005ea2 <__sflush_r+0x9a>
 8005e3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005e3e:	89a3      	ldrh	r3, [r4, #12]
 8005e40:	075a      	lsls	r2, r3, #29
 8005e42:	d505      	bpl.n	8005e50 <__sflush_r+0x48>
 8005e44:	6863      	ldr	r3, [r4, #4]
 8005e46:	1ac0      	subs	r0, r0, r3
 8005e48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e4a:	b10b      	cbz	r3, 8005e50 <__sflush_r+0x48>
 8005e4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e4e:	1ac0      	subs	r0, r0, r3
 8005e50:	2300      	movs	r3, #0
 8005e52:	4602      	mov	r2, r0
 8005e54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e56:	6a21      	ldr	r1, [r4, #32]
 8005e58:	4628      	mov	r0, r5
 8005e5a:	47b0      	blx	r6
 8005e5c:	1c43      	adds	r3, r0, #1
 8005e5e:	89a3      	ldrh	r3, [r4, #12]
 8005e60:	d106      	bne.n	8005e70 <__sflush_r+0x68>
 8005e62:	6829      	ldr	r1, [r5, #0]
 8005e64:	291d      	cmp	r1, #29
 8005e66:	d848      	bhi.n	8005efa <__sflush_r+0xf2>
 8005e68:	4a29      	ldr	r2, [pc, #164]	; (8005f10 <__sflush_r+0x108>)
 8005e6a:	40ca      	lsrs	r2, r1
 8005e6c:	07d6      	lsls	r6, r2, #31
 8005e6e:	d544      	bpl.n	8005efa <__sflush_r+0xf2>
 8005e70:	2200      	movs	r2, #0
 8005e72:	6062      	str	r2, [r4, #4]
 8005e74:	04d9      	lsls	r1, r3, #19
 8005e76:	6922      	ldr	r2, [r4, #16]
 8005e78:	6022      	str	r2, [r4, #0]
 8005e7a:	d504      	bpl.n	8005e86 <__sflush_r+0x7e>
 8005e7c:	1c42      	adds	r2, r0, #1
 8005e7e:	d101      	bne.n	8005e84 <__sflush_r+0x7c>
 8005e80:	682b      	ldr	r3, [r5, #0]
 8005e82:	b903      	cbnz	r3, 8005e86 <__sflush_r+0x7e>
 8005e84:	6560      	str	r0, [r4, #84]	; 0x54
 8005e86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e88:	602f      	str	r7, [r5, #0]
 8005e8a:	2900      	cmp	r1, #0
 8005e8c:	d0c9      	beq.n	8005e22 <__sflush_r+0x1a>
 8005e8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e92:	4299      	cmp	r1, r3
 8005e94:	d002      	beq.n	8005e9c <__sflush_r+0x94>
 8005e96:	4628      	mov	r0, r5
 8005e98:	f000 f99c 	bl	80061d4 <_free_r>
 8005e9c:	2000      	movs	r0, #0
 8005e9e:	6360      	str	r0, [r4, #52]	; 0x34
 8005ea0:	e7c0      	b.n	8005e24 <__sflush_r+0x1c>
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	4628      	mov	r0, r5
 8005ea6:	47b0      	blx	r6
 8005ea8:	1c41      	adds	r1, r0, #1
 8005eaa:	d1c8      	bne.n	8005e3e <__sflush_r+0x36>
 8005eac:	682b      	ldr	r3, [r5, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d0c5      	beq.n	8005e3e <__sflush_r+0x36>
 8005eb2:	2b1d      	cmp	r3, #29
 8005eb4:	d001      	beq.n	8005eba <__sflush_r+0xb2>
 8005eb6:	2b16      	cmp	r3, #22
 8005eb8:	d101      	bne.n	8005ebe <__sflush_r+0xb6>
 8005eba:	602f      	str	r7, [r5, #0]
 8005ebc:	e7b1      	b.n	8005e22 <__sflush_r+0x1a>
 8005ebe:	89a3      	ldrh	r3, [r4, #12]
 8005ec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ec4:	81a3      	strh	r3, [r4, #12]
 8005ec6:	e7ad      	b.n	8005e24 <__sflush_r+0x1c>
 8005ec8:	690f      	ldr	r7, [r1, #16]
 8005eca:	2f00      	cmp	r7, #0
 8005ecc:	d0a9      	beq.n	8005e22 <__sflush_r+0x1a>
 8005ece:	0793      	lsls	r3, r2, #30
 8005ed0:	680e      	ldr	r6, [r1, #0]
 8005ed2:	bf08      	it	eq
 8005ed4:	694b      	ldreq	r3, [r1, #20]
 8005ed6:	600f      	str	r7, [r1, #0]
 8005ed8:	bf18      	it	ne
 8005eda:	2300      	movne	r3, #0
 8005edc:	eba6 0807 	sub.w	r8, r6, r7
 8005ee0:	608b      	str	r3, [r1, #8]
 8005ee2:	f1b8 0f00 	cmp.w	r8, #0
 8005ee6:	dd9c      	ble.n	8005e22 <__sflush_r+0x1a>
 8005ee8:	4643      	mov	r3, r8
 8005eea:	463a      	mov	r2, r7
 8005eec:	6a21      	ldr	r1, [r4, #32]
 8005eee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	47b0      	blx	r6
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	dc06      	bgt.n	8005f06 <__sflush_r+0xfe>
 8005ef8:	89a3      	ldrh	r3, [r4, #12]
 8005efa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005efe:	81a3      	strh	r3, [r4, #12]
 8005f00:	f04f 30ff 	mov.w	r0, #4294967295
 8005f04:	e78e      	b.n	8005e24 <__sflush_r+0x1c>
 8005f06:	4407      	add	r7, r0
 8005f08:	eba8 0800 	sub.w	r8, r8, r0
 8005f0c:	e7e9      	b.n	8005ee2 <__sflush_r+0xda>
 8005f0e:	bf00      	nop
 8005f10:	20400001 	.word	0x20400001

08005f14 <_fflush_r>:
 8005f14:	b538      	push	{r3, r4, r5, lr}
 8005f16:	690b      	ldr	r3, [r1, #16]
 8005f18:	4605      	mov	r5, r0
 8005f1a:	460c      	mov	r4, r1
 8005f1c:	b1db      	cbz	r3, 8005f56 <_fflush_r+0x42>
 8005f1e:	b118      	cbz	r0, 8005f28 <_fflush_r+0x14>
 8005f20:	6983      	ldr	r3, [r0, #24]
 8005f22:	b90b      	cbnz	r3, 8005f28 <_fflush_r+0x14>
 8005f24:	f000 f860 	bl	8005fe8 <__sinit>
 8005f28:	4b0c      	ldr	r3, [pc, #48]	; (8005f5c <_fflush_r+0x48>)
 8005f2a:	429c      	cmp	r4, r3
 8005f2c:	d109      	bne.n	8005f42 <_fflush_r+0x2e>
 8005f2e:	686c      	ldr	r4, [r5, #4]
 8005f30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f34:	b17b      	cbz	r3, 8005f56 <_fflush_r+0x42>
 8005f36:	4621      	mov	r1, r4
 8005f38:	4628      	mov	r0, r5
 8005f3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f3e:	f7ff bf63 	b.w	8005e08 <__sflush_r>
 8005f42:	4b07      	ldr	r3, [pc, #28]	; (8005f60 <_fflush_r+0x4c>)
 8005f44:	429c      	cmp	r4, r3
 8005f46:	d101      	bne.n	8005f4c <_fflush_r+0x38>
 8005f48:	68ac      	ldr	r4, [r5, #8]
 8005f4a:	e7f1      	b.n	8005f30 <_fflush_r+0x1c>
 8005f4c:	4b05      	ldr	r3, [pc, #20]	; (8005f64 <_fflush_r+0x50>)
 8005f4e:	429c      	cmp	r4, r3
 8005f50:	bf08      	it	eq
 8005f52:	68ec      	ldreq	r4, [r5, #12]
 8005f54:	e7ec      	b.n	8005f30 <_fflush_r+0x1c>
 8005f56:	2000      	movs	r0, #0
 8005f58:	bd38      	pop	{r3, r4, r5, pc}
 8005f5a:	bf00      	nop
 8005f5c:	08006564 	.word	0x08006564
 8005f60:	08006584 	.word	0x08006584
 8005f64:	08006544 	.word	0x08006544

08005f68 <std>:
 8005f68:	2300      	movs	r3, #0
 8005f6a:	b510      	push	{r4, lr}
 8005f6c:	4604      	mov	r4, r0
 8005f6e:	e9c0 3300 	strd	r3, r3, [r0]
 8005f72:	6083      	str	r3, [r0, #8]
 8005f74:	8181      	strh	r1, [r0, #12]
 8005f76:	6643      	str	r3, [r0, #100]	; 0x64
 8005f78:	81c2      	strh	r2, [r0, #14]
 8005f7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f7e:	6183      	str	r3, [r0, #24]
 8005f80:	4619      	mov	r1, r3
 8005f82:	2208      	movs	r2, #8
 8005f84:	305c      	adds	r0, #92	; 0x5c
 8005f86:	f7ff fd5d 	bl	8005a44 <memset>
 8005f8a:	4b05      	ldr	r3, [pc, #20]	; (8005fa0 <std+0x38>)
 8005f8c:	6263      	str	r3, [r4, #36]	; 0x24
 8005f8e:	4b05      	ldr	r3, [pc, #20]	; (8005fa4 <std+0x3c>)
 8005f90:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f92:	4b05      	ldr	r3, [pc, #20]	; (8005fa8 <std+0x40>)
 8005f94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f96:	4b05      	ldr	r3, [pc, #20]	; (8005fac <std+0x44>)
 8005f98:	6224      	str	r4, [r4, #32]
 8005f9a:	6323      	str	r3, [r4, #48]	; 0x30
 8005f9c:	bd10      	pop	{r4, pc}
 8005f9e:	bf00      	nop
 8005fa0:	08006345 	.word	0x08006345
 8005fa4:	08006367 	.word	0x08006367
 8005fa8:	0800639f 	.word	0x0800639f
 8005fac:	080063c3 	.word	0x080063c3

08005fb0 <_cleanup_r>:
 8005fb0:	4901      	ldr	r1, [pc, #4]	; (8005fb8 <_cleanup_r+0x8>)
 8005fb2:	f000 b885 	b.w	80060c0 <_fwalk_reent>
 8005fb6:	bf00      	nop
 8005fb8:	08005f15 	.word	0x08005f15

08005fbc <__sfmoreglue>:
 8005fbc:	b570      	push	{r4, r5, r6, lr}
 8005fbe:	1e4a      	subs	r2, r1, #1
 8005fc0:	2568      	movs	r5, #104	; 0x68
 8005fc2:	4355      	muls	r5, r2
 8005fc4:	460e      	mov	r6, r1
 8005fc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005fca:	f000 f951 	bl	8006270 <_malloc_r>
 8005fce:	4604      	mov	r4, r0
 8005fd0:	b140      	cbz	r0, 8005fe4 <__sfmoreglue+0x28>
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	e9c0 1600 	strd	r1, r6, [r0]
 8005fd8:	300c      	adds	r0, #12
 8005fda:	60a0      	str	r0, [r4, #8]
 8005fdc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005fe0:	f7ff fd30 	bl	8005a44 <memset>
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	bd70      	pop	{r4, r5, r6, pc}

08005fe8 <__sinit>:
 8005fe8:	6983      	ldr	r3, [r0, #24]
 8005fea:	b510      	push	{r4, lr}
 8005fec:	4604      	mov	r4, r0
 8005fee:	bb33      	cbnz	r3, 800603e <__sinit+0x56>
 8005ff0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005ff4:	6503      	str	r3, [r0, #80]	; 0x50
 8005ff6:	4b12      	ldr	r3, [pc, #72]	; (8006040 <__sinit+0x58>)
 8005ff8:	4a12      	ldr	r2, [pc, #72]	; (8006044 <__sinit+0x5c>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6282      	str	r2, [r0, #40]	; 0x28
 8005ffe:	4298      	cmp	r0, r3
 8006000:	bf04      	itt	eq
 8006002:	2301      	moveq	r3, #1
 8006004:	6183      	streq	r3, [r0, #24]
 8006006:	f000 f81f 	bl	8006048 <__sfp>
 800600a:	6060      	str	r0, [r4, #4]
 800600c:	4620      	mov	r0, r4
 800600e:	f000 f81b 	bl	8006048 <__sfp>
 8006012:	60a0      	str	r0, [r4, #8]
 8006014:	4620      	mov	r0, r4
 8006016:	f000 f817 	bl	8006048 <__sfp>
 800601a:	2200      	movs	r2, #0
 800601c:	60e0      	str	r0, [r4, #12]
 800601e:	2104      	movs	r1, #4
 8006020:	6860      	ldr	r0, [r4, #4]
 8006022:	f7ff ffa1 	bl	8005f68 <std>
 8006026:	2201      	movs	r2, #1
 8006028:	2109      	movs	r1, #9
 800602a:	68a0      	ldr	r0, [r4, #8]
 800602c:	f7ff ff9c 	bl	8005f68 <std>
 8006030:	2202      	movs	r2, #2
 8006032:	2112      	movs	r1, #18
 8006034:	68e0      	ldr	r0, [r4, #12]
 8006036:	f7ff ff97 	bl	8005f68 <std>
 800603a:	2301      	movs	r3, #1
 800603c:	61a3      	str	r3, [r4, #24]
 800603e:	bd10      	pop	{r4, pc}
 8006040:	08006540 	.word	0x08006540
 8006044:	08005fb1 	.word	0x08005fb1

08006048 <__sfp>:
 8006048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800604a:	4b1b      	ldr	r3, [pc, #108]	; (80060b8 <__sfp+0x70>)
 800604c:	681e      	ldr	r6, [r3, #0]
 800604e:	69b3      	ldr	r3, [r6, #24]
 8006050:	4607      	mov	r7, r0
 8006052:	b913      	cbnz	r3, 800605a <__sfp+0x12>
 8006054:	4630      	mov	r0, r6
 8006056:	f7ff ffc7 	bl	8005fe8 <__sinit>
 800605a:	3648      	adds	r6, #72	; 0x48
 800605c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006060:	3b01      	subs	r3, #1
 8006062:	d503      	bpl.n	800606c <__sfp+0x24>
 8006064:	6833      	ldr	r3, [r6, #0]
 8006066:	b133      	cbz	r3, 8006076 <__sfp+0x2e>
 8006068:	6836      	ldr	r6, [r6, #0]
 800606a:	e7f7      	b.n	800605c <__sfp+0x14>
 800606c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006070:	b16d      	cbz	r5, 800608e <__sfp+0x46>
 8006072:	3468      	adds	r4, #104	; 0x68
 8006074:	e7f4      	b.n	8006060 <__sfp+0x18>
 8006076:	2104      	movs	r1, #4
 8006078:	4638      	mov	r0, r7
 800607a:	f7ff ff9f 	bl	8005fbc <__sfmoreglue>
 800607e:	6030      	str	r0, [r6, #0]
 8006080:	2800      	cmp	r0, #0
 8006082:	d1f1      	bne.n	8006068 <__sfp+0x20>
 8006084:	230c      	movs	r3, #12
 8006086:	603b      	str	r3, [r7, #0]
 8006088:	4604      	mov	r4, r0
 800608a:	4620      	mov	r0, r4
 800608c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800608e:	4b0b      	ldr	r3, [pc, #44]	; (80060bc <__sfp+0x74>)
 8006090:	6665      	str	r5, [r4, #100]	; 0x64
 8006092:	e9c4 5500 	strd	r5, r5, [r4]
 8006096:	60a5      	str	r5, [r4, #8]
 8006098:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800609c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80060a0:	2208      	movs	r2, #8
 80060a2:	4629      	mov	r1, r5
 80060a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80060a8:	f7ff fccc 	bl	8005a44 <memset>
 80060ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80060b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80060b4:	e7e9      	b.n	800608a <__sfp+0x42>
 80060b6:	bf00      	nop
 80060b8:	08006540 	.word	0x08006540
 80060bc:	ffff0001 	.word	0xffff0001

080060c0 <_fwalk_reent>:
 80060c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060c4:	4680      	mov	r8, r0
 80060c6:	4689      	mov	r9, r1
 80060c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80060cc:	2600      	movs	r6, #0
 80060ce:	b914      	cbnz	r4, 80060d6 <_fwalk_reent+0x16>
 80060d0:	4630      	mov	r0, r6
 80060d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060d6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80060da:	3f01      	subs	r7, #1
 80060dc:	d501      	bpl.n	80060e2 <_fwalk_reent+0x22>
 80060de:	6824      	ldr	r4, [r4, #0]
 80060e0:	e7f5      	b.n	80060ce <_fwalk_reent+0xe>
 80060e2:	89ab      	ldrh	r3, [r5, #12]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d907      	bls.n	80060f8 <_fwalk_reent+0x38>
 80060e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060ec:	3301      	adds	r3, #1
 80060ee:	d003      	beq.n	80060f8 <_fwalk_reent+0x38>
 80060f0:	4629      	mov	r1, r5
 80060f2:	4640      	mov	r0, r8
 80060f4:	47c8      	blx	r9
 80060f6:	4306      	orrs	r6, r0
 80060f8:	3568      	adds	r5, #104	; 0x68
 80060fa:	e7ee      	b.n	80060da <_fwalk_reent+0x1a>

080060fc <__swhatbuf_r>:
 80060fc:	b570      	push	{r4, r5, r6, lr}
 80060fe:	460e      	mov	r6, r1
 8006100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006104:	2900      	cmp	r1, #0
 8006106:	b096      	sub	sp, #88	; 0x58
 8006108:	4614      	mov	r4, r2
 800610a:	461d      	mov	r5, r3
 800610c:	da07      	bge.n	800611e <__swhatbuf_r+0x22>
 800610e:	2300      	movs	r3, #0
 8006110:	602b      	str	r3, [r5, #0]
 8006112:	89b3      	ldrh	r3, [r6, #12]
 8006114:	061a      	lsls	r2, r3, #24
 8006116:	d410      	bmi.n	800613a <__swhatbuf_r+0x3e>
 8006118:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800611c:	e00e      	b.n	800613c <__swhatbuf_r+0x40>
 800611e:	466a      	mov	r2, sp
 8006120:	f000 f976 	bl	8006410 <_fstat_r>
 8006124:	2800      	cmp	r0, #0
 8006126:	dbf2      	blt.n	800610e <__swhatbuf_r+0x12>
 8006128:	9a01      	ldr	r2, [sp, #4]
 800612a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800612e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006132:	425a      	negs	r2, r3
 8006134:	415a      	adcs	r2, r3
 8006136:	602a      	str	r2, [r5, #0]
 8006138:	e7ee      	b.n	8006118 <__swhatbuf_r+0x1c>
 800613a:	2340      	movs	r3, #64	; 0x40
 800613c:	2000      	movs	r0, #0
 800613e:	6023      	str	r3, [r4, #0]
 8006140:	b016      	add	sp, #88	; 0x58
 8006142:	bd70      	pop	{r4, r5, r6, pc}

08006144 <__smakebuf_r>:
 8006144:	898b      	ldrh	r3, [r1, #12]
 8006146:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006148:	079d      	lsls	r5, r3, #30
 800614a:	4606      	mov	r6, r0
 800614c:	460c      	mov	r4, r1
 800614e:	d507      	bpl.n	8006160 <__smakebuf_r+0x1c>
 8006150:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006154:	6023      	str	r3, [r4, #0]
 8006156:	6123      	str	r3, [r4, #16]
 8006158:	2301      	movs	r3, #1
 800615a:	6163      	str	r3, [r4, #20]
 800615c:	b002      	add	sp, #8
 800615e:	bd70      	pop	{r4, r5, r6, pc}
 8006160:	ab01      	add	r3, sp, #4
 8006162:	466a      	mov	r2, sp
 8006164:	f7ff ffca 	bl	80060fc <__swhatbuf_r>
 8006168:	9900      	ldr	r1, [sp, #0]
 800616a:	4605      	mov	r5, r0
 800616c:	4630      	mov	r0, r6
 800616e:	f000 f87f 	bl	8006270 <_malloc_r>
 8006172:	b948      	cbnz	r0, 8006188 <__smakebuf_r+0x44>
 8006174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006178:	059a      	lsls	r2, r3, #22
 800617a:	d4ef      	bmi.n	800615c <__smakebuf_r+0x18>
 800617c:	f023 0303 	bic.w	r3, r3, #3
 8006180:	f043 0302 	orr.w	r3, r3, #2
 8006184:	81a3      	strh	r3, [r4, #12]
 8006186:	e7e3      	b.n	8006150 <__smakebuf_r+0xc>
 8006188:	4b0d      	ldr	r3, [pc, #52]	; (80061c0 <__smakebuf_r+0x7c>)
 800618a:	62b3      	str	r3, [r6, #40]	; 0x28
 800618c:	89a3      	ldrh	r3, [r4, #12]
 800618e:	6020      	str	r0, [r4, #0]
 8006190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006194:	81a3      	strh	r3, [r4, #12]
 8006196:	9b00      	ldr	r3, [sp, #0]
 8006198:	6163      	str	r3, [r4, #20]
 800619a:	9b01      	ldr	r3, [sp, #4]
 800619c:	6120      	str	r0, [r4, #16]
 800619e:	b15b      	cbz	r3, 80061b8 <__smakebuf_r+0x74>
 80061a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061a4:	4630      	mov	r0, r6
 80061a6:	f000 f945 	bl	8006434 <_isatty_r>
 80061aa:	b128      	cbz	r0, 80061b8 <__smakebuf_r+0x74>
 80061ac:	89a3      	ldrh	r3, [r4, #12]
 80061ae:	f023 0303 	bic.w	r3, r3, #3
 80061b2:	f043 0301 	orr.w	r3, r3, #1
 80061b6:	81a3      	strh	r3, [r4, #12]
 80061b8:	89a3      	ldrh	r3, [r4, #12]
 80061ba:	431d      	orrs	r5, r3
 80061bc:	81a5      	strh	r5, [r4, #12]
 80061be:	e7cd      	b.n	800615c <__smakebuf_r+0x18>
 80061c0:	08005fb1 	.word	0x08005fb1

080061c4 <malloc>:
 80061c4:	4b02      	ldr	r3, [pc, #8]	; (80061d0 <malloc+0xc>)
 80061c6:	4601      	mov	r1, r0
 80061c8:	6818      	ldr	r0, [r3, #0]
 80061ca:	f000 b851 	b.w	8006270 <_malloc_r>
 80061ce:	bf00      	nop
 80061d0:	20000104 	.word	0x20000104

080061d4 <_free_r>:
 80061d4:	b538      	push	{r3, r4, r5, lr}
 80061d6:	4605      	mov	r5, r0
 80061d8:	2900      	cmp	r1, #0
 80061da:	d045      	beq.n	8006268 <_free_r+0x94>
 80061dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061e0:	1f0c      	subs	r4, r1, #4
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	bfb8      	it	lt
 80061e6:	18e4      	addlt	r4, r4, r3
 80061e8:	f000 f946 	bl	8006478 <__malloc_lock>
 80061ec:	4a1f      	ldr	r2, [pc, #124]	; (800626c <_free_r+0x98>)
 80061ee:	6813      	ldr	r3, [r2, #0]
 80061f0:	4610      	mov	r0, r2
 80061f2:	b933      	cbnz	r3, 8006202 <_free_r+0x2e>
 80061f4:	6063      	str	r3, [r4, #4]
 80061f6:	6014      	str	r4, [r2, #0]
 80061f8:	4628      	mov	r0, r5
 80061fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061fe:	f000 b93c 	b.w	800647a <__malloc_unlock>
 8006202:	42a3      	cmp	r3, r4
 8006204:	d90c      	bls.n	8006220 <_free_r+0x4c>
 8006206:	6821      	ldr	r1, [r4, #0]
 8006208:	1862      	adds	r2, r4, r1
 800620a:	4293      	cmp	r3, r2
 800620c:	bf04      	itt	eq
 800620e:	681a      	ldreq	r2, [r3, #0]
 8006210:	685b      	ldreq	r3, [r3, #4]
 8006212:	6063      	str	r3, [r4, #4]
 8006214:	bf04      	itt	eq
 8006216:	1852      	addeq	r2, r2, r1
 8006218:	6022      	streq	r2, [r4, #0]
 800621a:	6004      	str	r4, [r0, #0]
 800621c:	e7ec      	b.n	80061f8 <_free_r+0x24>
 800621e:	4613      	mov	r3, r2
 8006220:	685a      	ldr	r2, [r3, #4]
 8006222:	b10a      	cbz	r2, 8006228 <_free_r+0x54>
 8006224:	42a2      	cmp	r2, r4
 8006226:	d9fa      	bls.n	800621e <_free_r+0x4a>
 8006228:	6819      	ldr	r1, [r3, #0]
 800622a:	1858      	adds	r0, r3, r1
 800622c:	42a0      	cmp	r0, r4
 800622e:	d10b      	bne.n	8006248 <_free_r+0x74>
 8006230:	6820      	ldr	r0, [r4, #0]
 8006232:	4401      	add	r1, r0
 8006234:	1858      	adds	r0, r3, r1
 8006236:	4282      	cmp	r2, r0
 8006238:	6019      	str	r1, [r3, #0]
 800623a:	d1dd      	bne.n	80061f8 <_free_r+0x24>
 800623c:	6810      	ldr	r0, [r2, #0]
 800623e:	6852      	ldr	r2, [r2, #4]
 8006240:	605a      	str	r2, [r3, #4]
 8006242:	4401      	add	r1, r0
 8006244:	6019      	str	r1, [r3, #0]
 8006246:	e7d7      	b.n	80061f8 <_free_r+0x24>
 8006248:	d902      	bls.n	8006250 <_free_r+0x7c>
 800624a:	230c      	movs	r3, #12
 800624c:	602b      	str	r3, [r5, #0]
 800624e:	e7d3      	b.n	80061f8 <_free_r+0x24>
 8006250:	6820      	ldr	r0, [r4, #0]
 8006252:	1821      	adds	r1, r4, r0
 8006254:	428a      	cmp	r2, r1
 8006256:	bf04      	itt	eq
 8006258:	6811      	ldreq	r1, [r2, #0]
 800625a:	6852      	ldreq	r2, [r2, #4]
 800625c:	6062      	str	r2, [r4, #4]
 800625e:	bf04      	itt	eq
 8006260:	1809      	addeq	r1, r1, r0
 8006262:	6021      	streq	r1, [r4, #0]
 8006264:	605c      	str	r4, [r3, #4]
 8006266:	e7c7      	b.n	80061f8 <_free_r+0x24>
 8006268:	bd38      	pop	{r3, r4, r5, pc}
 800626a:	bf00      	nop
 800626c:	2000852c 	.word	0x2000852c

08006270 <_malloc_r>:
 8006270:	b570      	push	{r4, r5, r6, lr}
 8006272:	1ccd      	adds	r5, r1, #3
 8006274:	f025 0503 	bic.w	r5, r5, #3
 8006278:	3508      	adds	r5, #8
 800627a:	2d0c      	cmp	r5, #12
 800627c:	bf38      	it	cc
 800627e:	250c      	movcc	r5, #12
 8006280:	2d00      	cmp	r5, #0
 8006282:	4606      	mov	r6, r0
 8006284:	db01      	blt.n	800628a <_malloc_r+0x1a>
 8006286:	42a9      	cmp	r1, r5
 8006288:	d903      	bls.n	8006292 <_malloc_r+0x22>
 800628a:	230c      	movs	r3, #12
 800628c:	6033      	str	r3, [r6, #0]
 800628e:	2000      	movs	r0, #0
 8006290:	bd70      	pop	{r4, r5, r6, pc}
 8006292:	f000 f8f1 	bl	8006478 <__malloc_lock>
 8006296:	4a21      	ldr	r2, [pc, #132]	; (800631c <_malloc_r+0xac>)
 8006298:	6814      	ldr	r4, [r2, #0]
 800629a:	4621      	mov	r1, r4
 800629c:	b991      	cbnz	r1, 80062c4 <_malloc_r+0x54>
 800629e:	4c20      	ldr	r4, [pc, #128]	; (8006320 <_malloc_r+0xb0>)
 80062a0:	6823      	ldr	r3, [r4, #0]
 80062a2:	b91b      	cbnz	r3, 80062ac <_malloc_r+0x3c>
 80062a4:	4630      	mov	r0, r6
 80062a6:	f000 f83d 	bl	8006324 <_sbrk_r>
 80062aa:	6020      	str	r0, [r4, #0]
 80062ac:	4629      	mov	r1, r5
 80062ae:	4630      	mov	r0, r6
 80062b0:	f000 f838 	bl	8006324 <_sbrk_r>
 80062b4:	1c43      	adds	r3, r0, #1
 80062b6:	d124      	bne.n	8006302 <_malloc_r+0x92>
 80062b8:	230c      	movs	r3, #12
 80062ba:	6033      	str	r3, [r6, #0]
 80062bc:	4630      	mov	r0, r6
 80062be:	f000 f8dc 	bl	800647a <__malloc_unlock>
 80062c2:	e7e4      	b.n	800628e <_malloc_r+0x1e>
 80062c4:	680b      	ldr	r3, [r1, #0]
 80062c6:	1b5b      	subs	r3, r3, r5
 80062c8:	d418      	bmi.n	80062fc <_malloc_r+0x8c>
 80062ca:	2b0b      	cmp	r3, #11
 80062cc:	d90f      	bls.n	80062ee <_malloc_r+0x7e>
 80062ce:	600b      	str	r3, [r1, #0]
 80062d0:	50cd      	str	r5, [r1, r3]
 80062d2:	18cc      	adds	r4, r1, r3
 80062d4:	4630      	mov	r0, r6
 80062d6:	f000 f8d0 	bl	800647a <__malloc_unlock>
 80062da:	f104 000b 	add.w	r0, r4, #11
 80062de:	1d23      	adds	r3, r4, #4
 80062e0:	f020 0007 	bic.w	r0, r0, #7
 80062e4:	1ac3      	subs	r3, r0, r3
 80062e6:	d0d3      	beq.n	8006290 <_malloc_r+0x20>
 80062e8:	425a      	negs	r2, r3
 80062ea:	50e2      	str	r2, [r4, r3]
 80062ec:	e7d0      	b.n	8006290 <_malloc_r+0x20>
 80062ee:	428c      	cmp	r4, r1
 80062f0:	684b      	ldr	r3, [r1, #4]
 80062f2:	bf16      	itet	ne
 80062f4:	6063      	strne	r3, [r4, #4]
 80062f6:	6013      	streq	r3, [r2, #0]
 80062f8:	460c      	movne	r4, r1
 80062fa:	e7eb      	b.n	80062d4 <_malloc_r+0x64>
 80062fc:	460c      	mov	r4, r1
 80062fe:	6849      	ldr	r1, [r1, #4]
 8006300:	e7cc      	b.n	800629c <_malloc_r+0x2c>
 8006302:	1cc4      	adds	r4, r0, #3
 8006304:	f024 0403 	bic.w	r4, r4, #3
 8006308:	42a0      	cmp	r0, r4
 800630a:	d005      	beq.n	8006318 <_malloc_r+0xa8>
 800630c:	1a21      	subs	r1, r4, r0
 800630e:	4630      	mov	r0, r6
 8006310:	f000 f808 	bl	8006324 <_sbrk_r>
 8006314:	3001      	adds	r0, #1
 8006316:	d0cf      	beq.n	80062b8 <_malloc_r+0x48>
 8006318:	6025      	str	r5, [r4, #0]
 800631a:	e7db      	b.n	80062d4 <_malloc_r+0x64>
 800631c:	2000852c 	.word	0x2000852c
 8006320:	20008530 	.word	0x20008530

08006324 <_sbrk_r>:
 8006324:	b538      	push	{r3, r4, r5, lr}
 8006326:	4c06      	ldr	r4, [pc, #24]	; (8006340 <_sbrk_r+0x1c>)
 8006328:	2300      	movs	r3, #0
 800632a:	4605      	mov	r5, r0
 800632c:	4608      	mov	r0, r1
 800632e:	6023      	str	r3, [r4, #0]
 8006330:	f7fa feba 	bl	80010a8 <_sbrk>
 8006334:	1c43      	adds	r3, r0, #1
 8006336:	d102      	bne.n	800633e <_sbrk_r+0x1a>
 8006338:	6823      	ldr	r3, [r4, #0]
 800633a:	b103      	cbz	r3, 800633e <_sbrk_r+0x1a>
 800633c:	602b      	str	r3, [r5, #0]
 800633e:	bd38      	pop	{r3, r4, r5, pc}
 8006340:	20008740 	.word	0x20008740

08006344 <__sread>:
 8006344:	b510      	push	{r4, lr}
 8006346:	460c      	mov	r4, r1
 8006348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800634c:	f000 f896 	bl	800647c <_read_r>
 8006350:	2800      	cmp	r0, #0
 8006352:	bfab      	itete	ge
 8006354:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006356:	89a3      	ldrhlt	r3, [r4, #12]
 8006358:	181b      	addge	r3, r3, r0
 800635a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800635e:	bfac      	ite	ge
 8006360:	6563      	strge	r3, [r4, #84]	; 0x54
 8006362:	81a3      	strhlt	r3, [r4, #12]
 8006364:	bd10      	pop	{r4, pc}

08006366 <__swrite>:
 8006366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800636a:	461f      	mov	r7, r3
 800636c:	898b      	ldrh	r3, [r1, #12]
 800636e:	05db      	lsls	r3, r3, #23
 8006370:	4605      	mov	r5, r0
 8006372:	460c      	mov	r4, r1
 8006374:	4616      	mov	r6, r2
 8006376:	d505      	bpl.n	8006384 <__swrite+0x1e>
 8006378:	2302      	movs	r3, #2
 800637a:	2200      	movs	r2, #0
 800637c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006380:	f000 f868 	bl	8006454 <_lseek_r>
 8006384:	89a3      	ldrh	r3, [r4, #12]
 8006386:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800638a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800638e:	81a3      	strh	r3, [r4, #12]
 8006390:	4632      	mov	r2, r6
 8006392:	463b      	mov	r3, r7
 8006394:	4628      	mov	r0, r5
 8006396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800639a:	f000 b817 	b.w	80063cc <_write_r>

0800639e <__sseek>:
 800639e:	b510      	push	{r4, lr}
 80063a0:	460c      	mov	r4, r1
 80063a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063a6:	f000 f855 	bl	8006454 <_lseek_r>
 80063aa:	1c43      	adds	r3, r0, #1
 80063ac:	89a3      	ldrh	r3, [r4, #12]
 80063ae:	bf15      	itete	ne
 80063b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80063b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80063b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80063ba:	81a3      	strheq	r3, [r4, #12]
 80063bc:	bf18      	it	ne
 80063be:	81a3      	strhne	r3, [r4, #12]
 80063c0:	bd10      	pop	{r4, pc}

080063c2 <__sclose>:
 80063c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063c6:	f000 b813 	b.w	80063f0 <_close_r>
	...

080063cc <_write_r>:
 80063cc:	b538      	push	{r3, r4, r5, lr}
 80063ce:	4c07      	ldr	r4, [pc, #28]	; (80063ec <_write_r+0x20>)
 80063d0:	4605      	mov	r5, r0
 80063d2:	4608      	mov	r0, r1
 80063d4:	4611      	mov	r1, r2
 80063d6:	2200      	movs	r2, #0
 80063d8:	6022      	str	r2, [r4, #0]
 80063da:	461a      	mov	r2, r3
 80063dc:	f7fa f8cc 	bl	8000578 <_write>
 80063e0:	1c43      	adds	r3, r0, #1
 80063e2:	d102      	bne.n	80063ea <_write_r+0x1e>
 80063e4:	6823      	ldr	r3, [r4, #0]
 80063e6:	b103      	cbz	r3, 80063ea <_write_r+0x1e>
 80063e8:	602b      	str	r3, [r5, #0]
 80063ea:	bd38      	pop	{r3, r4, r5, pc}
 80063ec:	20008740 	.word	0x20008740

080063f0 <_close_r>:
 80063f0:	b538      	push	{r3, r4, r5, lr}
 80063f2:	4c06      	ldr	r4, [pc, #24]	; (800640c <_close_r+0x1c>)
 80063f4:	2300      	movs	r3, #0
 80063f6:	4605      	mov	r5, r0
 80063f8:	4608      	mov	r0, r1
 80063fa:	6023      	str	r3, [r4, #0]
 80063fc:	f7fa fe1f 	bl	800103e <_close>
 8006400:	1c43      	adds	r3, r0, #1
 8006402:	d102      	bne.n	800640a <_close_r+0x1a>
 8006404:	6823      	ldr	r3, [r4, #0]
 8006406:	b103      	cbz	r3, 800640a <_close_r+0x1a>
 8006408:	602b      	str	r3, [r5, #0]
 800640a:	bd38      	pop	{r3, r4, r5, pc}
 800640c:	20008740 	.word	0x20008740

08006410 <_fstat_r>:
 8006410:	b538      	push	{r3, r4, r5, lr}
 8006412:	4c07      	ldr	r4, [pc, #28]	; (8006430 <_fstat_r+0x20>)
 8006414:	2300      	movs	r3, #0
 8006416:	4605      	mov	r5, r0
 8006418:	4608      	mov	r0, r1
 800641a:	4611      	mov	r1, r2
 800641c:	6023      	str	r3, [r4, #0]
 800641e:	f7fa fe1a 	bl	8001056 <_fstat>
 8006422:	1c43      	adds	r3, r0, #1
 8006424:	d102      	bne.n	800642c <_fstat_r+0x1c>
 8006426:	6823      	ldr	r3, [r4, #0]
 8006428:	b103      	cbz	r3, 800642c <_fstat_r+0x1c>
 800642a:	602b      	str	r3, [r5, #0]
 800642c:	bd38      	pop	{r3, r4, r5, pc}
 800642e:	bf00      	nop
 8006430:	20008740 	.word	0x20008740

08006434 <_isatty_r>:
 8006434:	b538      	push	{r3, r4, r5, lr}
 8006436:	4c06      	ldr	r4, [pc, #24]	; (8006450 <_isatty_r+0x1c>)
 8006438:	2300      	movs	r3, #0
 800643a:	4605      	mov	r5, r0
 800643c:	4608      	mov	r0, r1
 800643e:	6023      	str	r3, [r4, #0]
 8006440:	f7fa fe19 	bl	8001076 <_isatty>
 8006444:	1c43      	adds	r3, r0, #1
 8006446:	d102      	bne.n	800644e <_isatty_r+0x1a>
 8006448:	6823      	ldr	r3, [r4, #0]
 800644a:	b103      	cbz	r3, 800644e <_isatty_r+0x1a>
 800644c:	602b      	str	r3, [r5, #0]
 800644e:	bd38      	pop	{r3, r4, r5, pc}
 8006450:	20008740 	.word	0x20008740

08006454 <_lseek_r>:
 8006454:	b538      	push	{r3, r4, r5, lr}
 8006456:	4c07      	ldr	r4, [pc, #28]	; (8006474 <_lseek_r+0x20>)
 8006458:	4605      	mov	r5, r0
 800645a:	4608      	mov	r0, r1
 800645c:	4611      	mov	r1, r2
 800645e:	2200      	movs	r2, #0
 8006460:	6022      	str	r2, [r4, #0]
 8006462:	461a      	mov	r2, r3
 8006464:	f7fa fe12 	bl	800108c <_lseek>
 8006468:	1c43      	adds	r3, r0, #1
 800646a:	d102      	bne.n	8006472 <_lseek_r+0x1e>
 800646c:	6823      	ldr	r3, [r4, #0]
 800646e:	b103      	cbz	r3, 8006472 <_lseek_r+0x1e>
 8006470:	602b      	str	r3, [r5, #0]
 8006472:	bd38      	pop	{r3, r4, r5, pc}
 8006474:	20008740 	.word	0x20008740

08006478 <__malloc_lock>:
 8006478:	4770      	bx	lr

0800647a <__malloc_unlock>:
 800647a:	4770      	bx	lr

0800647c <_read_r>:
 800647c:	b538      	push	{r3, r4, r5, lr}
 800647e:	4c07      	ldr	r4, [pc, #28]	; (800649c <_read_r+0x20>)
 8006480:	4605      	mov	r5, r0
 8006482:	4608      	mov	r0, r1
 8006484:	4611      	mov	r1, r2
 8006486:	2200      	movs	r2, #0
 8006488:	6022      	str	r2, [r4, #0]
 800648a:	461a      	mov	r2, r3
 800648c:	f7fa fdba 	bl	8001004 <_read>
 8006490:	1c43      	adds	r3, r0, #1
 8006492:	d102      	bne.n	800649a <_read_r+0x1e>
 8006494:	6823      	ldr	r3, [r4, #0]
 8006496:	b103      	cbz	r3, 800649a <_read_r+0x1e>
 8006498:	602b      	str	r3, [r5, #0]
 800649a:	bd38      	pop	{r3, r4, r5, pc}
 800649c:	20008740 	.word	0x20008740

080064a0 <_init>:
 80064a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064a2:	bf00      	nop
 80064a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064a6:	bc08      	pop	{r3}
 80064a8:	469e      	mov	lr, r3
 80064aa:	4770      	bx	lr

080064ac <_fini>:
 80064ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ae:	bf00      	nop
 80064b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064b2:	bc08      	pop	{r3}
 80064b4:	469e      	mov	lr, r3
 80064b6:	4770      	bx	lr
